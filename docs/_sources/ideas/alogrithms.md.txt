# Fundamentals -> Algorithms -> Recursion

## Calling oneself
The starter code calls what is supposed to be a recursive function. The problem is,
recursive functions are supposed to call *themselves*. Fill in the `# recursive step`
in the starter code below by calling the function itself (`some_recursive_function()`).

The result is not ideal, but hey, it's recursion!


```python
def some_recursive_function():
    print("This is supposed to be a recursive function")
    print("that does some stuff over and over.)

    # recursive step


some_recursive_function()
```

---

It's not helpful to have a recursive function that *never* stops calling itself. At
somepoint, it needs to be told when not to. They need to simply `return` before the
code gets to the "recursive step".

In the starter code is a function that is supposed to print `"hello"` a given number of times and `return` when that number is ever `0`. The point when the function quits before it can get to the "recursive step" is called the **base case**.

```python
def say_hello(times: int) -> None:
    if times == 0:  # base case
        # what then?

    print("hello")
    say_hello(times - 1)  # recursive step


say_hello(5)

```

---

We don't really ever print things from recursive functions. We can accumulate totals
and compile lists. Complete the starter code's base case and recursive step. Fill in the blanks.

Help with the base case:
- What value of `times` would yield a result of `0` for this function?

Help with the recursive step:
- What is 100% necessary to make this function recursive?

```python
def add_one(times: int) -> int:
    """Adds the number 1 a given number of times.

    Args:
        times: the number of times we want to add 1 together.
    
    Returns:
        The resulting sum.
    """
    if times == ___:  # base case
        return 0
    
    return 1 + ________(times - 1)  # recursive step


total = add_one(7)  # should add 1, 7 times, so total is 7
print(total)
```

---

When learning looping it is good practice to create loops that count from some number to another, increasing by some value.

Let's take this for loop and convert it to a recursive function.

```python
def count_to(n: int) -> None:
    """Print from 1 up to (including) n."""
    # +1 if you want to include the last number
    for num in range(n + 1):
        print(num)


count_to(5)
```

Complete the starter code by filling in the blanks. The weird part is we want the numbers to count upward, but in recursion the work is done on the downward phase of the call stack so the printing needs to happen *after* we do the "recursive step".

```python

def count_to(n: int) -> None:
    # base case
    if n == ____:
        ______
    
    print(n)
    count_to(n - 1)  # recursive step
```

---
```python

def sum_to(n: int):
    """Calculate the sum from 0 to n (inclusive)."""
    
    # base case
    if n == 0:
        return 0
    
    return n + sum_to(n + 1)

```

# name
Triage

# topic


# requirements


# description
You are a doctor on the front line of some unspecified medical emergeny in an open fiels. There is an entire line of people spread out across this field needing medical attention with various priority levels based on the severity of their injuries. An intern has already assessed each patient and has handed you a list of priority levels (`List[int]`). The problem is, the patients are spead out too far to simply go to the person with the highest priority level, their distance needs to be taken into consideration.

Interestingly, all the patients are spread out with the exact same distance between them so factoring in their distances is made quite simple. The first person in line is `10 m` away, then the second person is `20m` away, the third is `30m` away, and so on.

You decide that it might not be best to simply go to the person with the highest priority level. The list of people can be extremely long and you need to treat the closest, most severe case first.

You come up with a `triage_score` formula that factors in their distance with their priority level:

```
triage_score = 1 / distance * priority_level
```

The patient with the highest `triage_score` will be the one you treat first.

Write the function that will return the patient's position in the line that should be treated first, according to the `triage_score` metric. The first patient is at position `1`.

You may assume you will not get an empty list. If two `triage_scores` are identical, visit the closest person.


# starter code
```python

```

# tests
```python

```

# solution
```python

```
