{
    "series_list": [
        "Fundamentals",
        "Codingbat",
        "Codingbat (Input/Output)"
    ],
    "Fundamentals": {
        "chapter_list": [
            "introduction to programming",
            "Functions"
        ],
        "introduction to programming": [
            {
                "name": "Hello, World!",
                "topic": "output a message",
                "requirements": [],
                "description": "One of the most important parts of a computer program is the ability for the computer to talk to the user (the person running the program). In Python, this is achieved using the `print()` function. The `print()` function will will output anything you want to the terminal screen (it does not activate your printer). \n\n\n### Your task\n1. Run the starter code to see an example of what it looks like to print something to the terminal. The code, as it is, should output the following:\n    ```\n    Hello,\n    ```\n2. In addition to the output that is already there, make the program print out `\"World!\"`. The result should look like:\n    ```\n    Hello,\n    World!\n    ```\n\n",
                "starter_code": "print(\"Hello,\")\nprint()\n\n",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_hello_world(captured_output):\n    assert captured_output() == \"Hello,\\nWorld!\"\n\n",
                "solution": "print(\"Hello,\")\nprint(\"World!\")\n"
            },
            {
                "name": "Hello, Goodbye",
                "topic": "output a message",
                "requirements": [],
                "description": "The print function in the starter code provided (`main.py`) currently prints out the string `\"Hello\"`. Modify the code, so instead of printing out `\"Hello\"`, it prints out `\"Goodbye\"`. \n\n1. Run the code and observe the fact the output says `\"Hello\"`.\n2. Change the string in the `print()` function to `\"Goodbye\"`.\n3. Run the program again to observe the change. The output should no longer include `Hello`, only `Goodbye`. Expected output:\n    ```\n    Goodbye\n    ```\n",
                "starter_code": "print(\"Hello\")\n",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_hello_goodbye(captured_output):\n    assert captured_output() == \"Goodbye\"\n",
                "solution": "print(\"Goodbye\")\n"
            },
            {
                "name": "Hamburger",
                "topic": "output a message",
                "requirements": [],
                "description": "With the starter code (given in `main.py`) your program outputs an empty hamburger. You goal is to create a complete hamburger.\n\n1. Run the program and observe the output. It should be as follows:\n    ```\n    (--Bun--)\n\n    (--Bun--)\n    ```\n    Notice the empty space. This empty line comes from the empty `print()` function.\n2. Place the string `\"Hamburger\"` inside that empty `print()` function.\n",
                "starter_code": "print(\"(--Bun--)\")\nprint()\nprint(\"(--Bun--)\")\n",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_hamburger(captured_output):\n    assert captured_output() == \"(--Bun--)\\nHamburger\\n(--Bun--)\"\n",
                "solution": "print(\"(--Bun--)\")\nprint(\"Hamburger\")\nprint(\"(--Bun--)\")\n"
            },
            {
                "name": "One to Five",
                "topic": "output a message",
                "requirements": [],
                "description": "With the starter code (given in `main.py`) your program outputs an incomplete and out-of-order list of numbers. You goal is to fix it so it outputs the numbers from one to five.\n\n1. Run the program and observe the incorrect output. It should start off as follows:\n    ```\n    three\n    five\n    four\n    ```\n    Notice that the strings `\"one\"` and `\"two\"` don't even show up. This is because those `print()` functions have been commented out using the pound-sign (\"hashtag\") and a space (`# `).\n2. Remove the comment characters (pound-sign and the space) and allow the words \"one\" and \"two\" to show up. It should look like:\n    ```\n    three\n    five\n    one\n    four\n    two\n    ```\n    **Warning:** If you do not *also* delete the space, you will get an `IndentationError`. Make sure all the `p`'s in the word `print` are lined up with *no space* in front of them.\n3. Rearrange the `print()` functions to correct the order of the words.\n    ```\n    one\n    two\n    three\n    four\n    five\n    ```\n",
                "starter_code": "print(\"three\")\nprint(\"five\")\n# print(\"one\")\nprint(\"four\")\n# print(\"two\")\n",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_one_to_five(captured_output):\n    assert captured_output() == \"one\\ntwo\\nthree\\nfour\\nfive\"\n",
                "solution": "print(\"one\")\nprint(\"two\")\nprint(\"three\")\nprint(\"four\")\nprint(\"five\")\n"
            },
            {
                "name": "Escape character",
                "topic": "output a message",
                "requirements": [],
                "description": "With the starter code (given in `main.py`) your program will encounter a `SyntaxError`.\n\n1. Run the program as is. Notice the `SyntaxError`.\n    ```\n      File \"main.py\", line 2\n        print(\"Her friend said \"Nice to see you!\".\")\n                                ^\n    SyntaxError: invalid syntax\n    ```\n    - On what line did the error happen?\n    - Python gets confused with the extra quotes (`\"`) in the second print statement (on line 2).\n    - Python uses quotes to determine where a string starts and where a string ends. If we want to actually include a quote in a string, we need to **escape** that quote with the escape character `\\`. This will tell Python to skip over that particular quote and not to use it to end the string.\n2. Go back to `main.py` and comment-out line 2 by putting a number-sign (hashtag) infront of the line. For example:\n    ```\n    # print(\"Her friend said \"Nice to see you!\".\")\n    ```\n3. Run the program and observe what the first print statement outputs. Notice:\n    - there is no error,\n    - the output *actually contains* the quote characters\n    - the output doesn't contain the escape characters `\\`.\n4. Use the escape character (`\\`) to allow the second print statement to include the quotes. Be sure to use the first print statement as an example for how to do this correctly. Also, remember to un-comment the second print statement, when you are ready to run it. The final output should look like:\n    ```\n    She said \"Hello\" to her friend.\n    Her friend said \"Nice to see you!\".\n    ```\n\n",
                "starter_code": "print(\"She said \\\"Hello\\\" to her friend.\")\nprint(\"Her friend said \"Nice to see you!\".\")\n\n",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_escape_character(captured_output):\n    assert captured_output() == \"She said \\\"Hello\\\" to her friend.\\nHer friend said \\\"Nice to see you!\\\".\"\n\n",
                "solution": "print(\"She said \\\"Hello\\\" to her friend.\")\nprint(\"Her friend said \\\"Nice to see you!\\\".\")\n\n"
            },
            {
                "name": "Surface Area",
                "topic": "mathematical operations",
                "requirements": [],
                "description": "Multiplication in Python is done with the asterisk character (`*`). For example, in Python, the expression `5 * 3` will evaluate to `15`.\n\nThe starter code shown below is quite wrong. It's supposed to calulate the surface area of a `10 cm` by `25 cm` rectangle. Go and fix the equation on line 1.\n\n",
                "starter_code": "surface_area = 10 + 25\nprint(f\"The surface area is {surface_area} cm^2\")\n",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_answer_should_be_250(captured_output):\n    assert captured_output() == \"The surface area is 250 cm^2\"\n\n",
                "solution": "surface_area = 10 * 25\nprint(f\"The surface area is {surface_area} cm^2\")\n"
            },
            {
                "name": "All the Operators",
                "topic": "mathematical operations",
                "requirements": [],
                "description": "Python can do mathematical evaluations, but some of the symbols are different than you might be used to.\n\nCheck out the [Python Mathematical Operators](https://gist.github.com/MrGallo/f6ef9b3ef06875761a675730e1095af6) table.\n\nThe starter code is missing the mathematical equations. In the empty `print()` functions, place the appropriate math. The first one is done for you.",
                "starter_code": "print(\"One plus Two is:\")\nprint(1 + 2)\n\nprint(\"Five minus Three is:\")\nprint()\n\nprint(\"Six multiplied by Four is:\")\nprint()\n\nprint(\"Twelve divided by Six is:\")\nprint()\n\nprint(\"Twenty Three floor-divide by Five is:\")\nprint()\n\nprint(\"The remainder of Twenty Three divided by Five is:\")\nprint()\n\nprint(\"Two to the power of Eight is:\")\nprint()",
                "tests": "from exercise.fixtures import captured_output, source_code_matches\n\n\ndef test_one_plus_two(captured_output):\n    assert \"One plus Two is:\\n3\" in captured_output()\n\n\ndef test_contains_mathematical_expression_1_plus_2():\n    assert source_code_matches(r\"print\\(\\s?1\\s?\\+\\s?2\\s?\\)\") or source_code_matches(r\"print\\(\\s?2\\s?\\+\\s?1\\s?\\)\"), \"There should be a mathematical expression in your code (1 + 2).\"\n\n\ndef test_five_minus_three(captured_output):\n    assert \"Five minus Three is:\\n2\" in captured_output()\n\n\ndef test_contains_mathematical_expression_5_minus_3():\n    assert source_code_matches(r\"print\\(\\s?5\\s?\\-\\s?3\\s?\\)\"), \"There should be a mathematical expression in your code (5 - 3).\"\n\n\ndef test_six_multiply_four(captured_output):\n    assert \"Six multiplied by Four is:\\n24\" in captured_output()\n\n\ndef test_contains_mathematical_expression_6_multiply_4():\n    assert source_code_matches(r\"print\\(\\s?6\\s?\\*\\s?4s?\\)\") or source_code_matches(r\"print\\(\\s?4\\s?\\*\\s?6s?\\)\"), \"There should be a mathematical expression in your code (6 * 4).\"\n\n\ndef test_twelve_divide_by_6(captured_output):\n    assert \"Twelve divided by Six is:\\n2\" in captured_output()\n\n\ndef test_contains_mathematical_expression_12_divide_6():\n    assert source_code_matches(r\"print\\(\\s?12\\s?/\\s?6\\s?\\)\"), \"There should be a mathematical expression in your code (12 / 6).\"\n\n\ndef test_23_floor_divide_5(captured_output):\n    assert \"Twenty Three floor-divide by Five is:\\n4\" in captured_output()\n\n\ndef test_contains_mathematical_expression_23_floor_5():\n    assert source_code_matches(r\"print\\(\\s?23\\s?//\\s?5\\s?\\)\"), \"There should be a mathematical expression in your code (23 // 5).\"\n\n\ndef test_2_power_8(captured_output):\n    assert \"Two to the power of Eight is:\\n256\" in captured_output()\n\n\ndef test_contains_mathematical_expression_2_power_8():\n    assert source_code_matches(r\"print\\(\\s?2\\s?\\*\\*\\s?8\\s?\\)\"), \"There should be a mathematical expression in your code (2 ** 8).\"",
                "solution": "print(\"One plus Two is:\")\nprint(1 + 2)\n\nprint(\"Five minus Three is:\")\nprint(5 - 3)\n\nprint(\"Six multiplied by Four is:\")\nprint(6 * 4)\n\nprint(\"Twelve divided by Six is:\")\nprint(12 / 6)\n\nprint(\"Twenty Three floor-divide by Five is:\")\nprint(23 // 5)\n\nprint(\"The remainder of Twenty Three divided by Five is:\")\nprint(23 % 5)\n\nprint(\"Two to the power of Eight is:\")\nprint(2 ** 8)"
            },
            {
                "name": "Student Groups",
                "topic": "mathematical operations",
                "requirements": [],
                "description": "Modulus (remainder) is one of the stranger mathematical operators, but its use in computer science is incredibly important. We also use modulus on a daily basis but don't think too much about it.\n\nGiven a class size of `33` students and the number of groups being `5`, the starter code is trying to determine the number of `students_per_group` as well as how many students will not be placed in a group (`students_left_over`). Leave the `students` and `number_of_groups` variables alone. Only modify the lines that have `students_per_group = 0` and `students_left_over = 0`.\n\nUse floor division to determine the number of students per group and modulus to determine the number of left over students. \n\nHere is a table of [Python Mathematical Operators](https://gist.github.com/MrGallo/f6ef9b3ef06875761a675730e1095af6).",
                "starter_code": "students = 33\nnumber_of_groups = 5\n\nstudents_per_group = 0\nstudents_left_over = 0\n\nprint(f\"If there are {students} students and {number_of_groups} groups.\")\nprint(f\"There will be {students_per_group} students per group\")\nprint(f\"and there will be {students_left_over} students without a group.\")",
                "tests": "from exercise.fixtures import captured_output, source_code_matches\n\n\ndef test_correct_students_per_group(captured_output):\n    assert \"There will be 6 students per group\" in captured_output()\n\n\ndef test_using_proper_math_to_calculate_students_per_group():\n    assert len(source_code_matches(r\"students_per_group\\s?=\\s?students\\s?\\/\\/\\s?number_of_groups\")), \"You must use mathematical operations to solve this. Also, you need to use the proper variables. Don't simply repeat the values stored in the variables.\"\n\n\ndef test_correct_students_remaining(captured_output):\n    assert \"and there will be 3 students without a group.\" in captured_output()\n\n\ndef test_using_proper_math_to_calculate_students_remaining():\n    assert len(source_code_matches(r\"students_left_over\\s?=\\s?students\\s?%\\s?number_of_groups\")), \"You must use mathematical operations to solve this. Also, you need to use the proper variables. Don't simply repeat the values stored in the variables.\"",
                "solution": "students = 33\nnumber_of_groups = 5\n\nstudents_per_group = students // number_of_groups\nstudents_left_over = students % number_of_groups\n\nprint(f\"If there are {students} students and {number_of_groups} groups.\")\nprint(f\"There will be {students_per_group} students per group\")\nprint(f\"and there will be {students_left_over} students without a group.\")"
            },
            {
                "name": "How Many Quarters?",
                "topic": "mathematical operations",
                "requirements": [],
                "description": "Floor division is useful when we need to know how many times we can evenly divide a particular number.\n\nImagine you are at the store and you pay cash for something and the amount of money they need to give back to you is `$2.35`. Also imagine, for the sake of the exercise, the highest valued coins they have are quarters to give back to you. \n\nThe starter code tries to determine how many quarters they will need to give back to you. Modify the line with `quarters = 0` to determine the number of quarters required.\n\n*Note: the code will handle currency in cents rather than dollars.*",
                "starter_code": "change_cents = 235\nquarters = 0\n\nprint(f\"You will get back {quarters} quarters.\")",
                "tests": "from exercise.fixtures import captured_output, source_code_matches\n\n\ndef test_calculates_correct_quarters(captured_output):\n    assert \"You will get back 9 quarters.\" in captured_output()\n\n\ndef test_proper_calculation_for_quarters():\n    assert len(source_code_matches(r\"quarters\\s?=\\s?change_cents\\s?\\/\\/\\s?25\")) == 1, \"There should be a mathematical operation in your source code. Also, use the 'change_cents' variable to calculate this.\"",
                "solution": "change_cents = 235\nquarters = change_cents // 25\n\nprint(f\"You will get back {quarters} quarters.\")"
            },
            {
                "name": "Banquet Hall Chairs",
                "topic": "storing data in variables",
                "requirements": [],
                "description": "The program will calculate the total number of chairs in a banquet hall. This is determined by the number of tables and the number of chairs per table.\n\nInitialize a variable called `tables` and assign it a value of `32`.\n\nThen initialize a variable called `chairs_per_table`, and assign it a value of `9`.\n\nThe program will calculate the total chairs and then output a message.",
                "starter_code": "# initialize tables here\n# initialize chairs_per_table here\n\n# do not modify the code below this line\ntotal_chairs = tables * chairs_per_table\nprint(f\"There are {total_chairs} chairs.\")",
                "tests": "from exercise.fixtures import captured_output, source_code_matches\n\n\ndef test_bottom_code_isnt_modified():\n    assert len(source_code_matches(r'total_chairs = tables \\* chairs_per_table\\nprint\\(f\"There are {total_chairs} chairs.\"\\)')) == 1, \"You shouldn't modify the code at the bottom.\"\n\ndef test_calculates_correct_numner(captured_output):\n    assert captured_output() == \"There are 288 chairs.\"",
                "solution": "tables = 32\nchairs_per_table = 9\n\n# do not modify the code below this line\ntotal_chairs = tables * chairs_per_table\nprint(f\"There are {total_chairs} chairs.\")"
            }
        ],
        "Functions": [
            {
                "name": "Execute order 66",
                "topic": "calling a function",
                "requirements": [],
                "description": "In the starter code, we have defined a function called `order_66`. Supreme-Chancellor Palpatine (who *is* the senate) came up with a plan to destroy the Jedi in one fell-swoop. He called this plan \"Order 66\". The plan was not executed right away. Palpatine waited for the right time and when that time came, he executed the order.\n\nIn order for you to execute the function called `order_66`, you must call it's name with parenthesis below where it is defined. Replace the comment below the function and call the function with the following code:\n\n```python\norder_66()\n```\n\nBe careful **not** to indent this call. That would make it *part* of the function itself and Order 66 would never be executed.",
                "starter_code": "def order_66():\n    print(\"Executing Order 66:\")\n    print()\n    print(\"Telling clones to attack the Jedi...\")\n    print(\"Assuming they will listen...\")\n    print(\"(apparently they had some bio-chip installed)\")\n    print(\"Most of the Jedi have been eliminated.\")\n    print(\"... except those Jedi that would provide convenient successive expanded-universe story-lines.\")\n\n\n# call the function here (watch your indent level)",
                "tests": "",
                "solution": "def order_66():\n    print(\"Executing Order 66:\")\n    print()\n    print(\"Telling clones to attack the Jedi...\")\n    print(\"Assuming they will listen...\")\n    print(\"(apparently they had some bio-chip installed)\")\n    print(\"Most of the Jedi have been eliminated.\")\n    print(\"... except those Jedi that would provide convenient successive expanded-universe story-lines.\")\n\n\norder_66()"
            },
            {
                "name": "Hello, goodbye",
                "topic": "calling a function",
                "requirements": [],
                "description": "The Beatles (from the 60's) have a song called \"Hello, Goodbye\". Part of the lyrics are:\n\n```\nHello,\ngoodbye.\nHello,\ngoodbye.\nHello,\ngoodbye.\nHello,\ngoodbye.\n```\n\nInspiring, I know. \n\nThe starter code has a function defined that will print one set of \"Hello, goodbye.\". The starter code calls the function only once. Unfortunately, to make a hit song, you need to repeat things many times. In this case it needs to be called a total of four times.\n\nAll you need to do is call the function `hello_goodbye` four times to achieve the lyrics as shown above.",
                "starter_code": "def hello_goodbye():\n    print(\"Hello,\")\n    print(\"goodbye.\")\n\n\nhello_goodbye()",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_hello_goodbye(captured_output):\n    assert captured_output() == (\"Hello,\\ngoodbye.\\n\" * 4).strip()",
                "solution": "def hello_goodbye():\n    print(\"Hello,\")\n    print(\"goodbye.\")\n\n\nhello_goodbye()\nhello_goodbye()\nhello_goodbye()\nhello_goodbye()"
            }
        ]
    },
    "Codingbat": {
        "chapter_list": [
            "Warmup-1",
            "String-1",
            "String-2"
        ],
        "String-1": [
            {
                "name": "hello_name",
                "topic": "",
                "requirements": [
                    "format output text"
                ],
                "description": "Given a string name, e.g. \"Bob\", return a greeting of the form \"Hello Bob!\".\n\n```\nhello_name(\"Bob\") -> \"Hello Bob!\"\nhello_name(\"Alice\") -> \"Hello Alice!\"\nhello_name(\"X\") -> \"Hello X!\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p171896) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def hello_name(name: str) -> str:\n    pass\n\n\nresult = hello_name('Bob')\nprint(result)\n",
                "tests": "from main import hello_name\n\n\ndef test_hello_name_1():\n    assert hello_name('Bob') == 'Hello Bob!'\n\n\ndef test_hello_name_2():\n    assert hello_name('Alice') == 'Hello Alice!'\n\n\ndef test_hello_name_3():\n    assert hello_name('X') == 'Hello X!'\n\n\ndef test_hello_name_4():\n    assert hello_name('Dolly') == 'Hello Dolly!'\n\n\ndef test_hello_name_5():\n    assert hello_name('Alpha') == 'Hello Alpha!'\n\n\ndef test_hello_name_6():\n    assert hello_name('Omega') == 'Hello Omega!'\n\n\ndef test_hello_name_7():\n    assert hello_name('Goodbye') == 'Hello Goodbye!'\n\n\ndef test_hello_name_8():\n    assert hello_name('ho ho ho') == 'Hello ho ho ho!'\n\n\ndef test_hello_name_9():\n    assert hello_name('xyz!') == 'Hello xyz!!'\n\n\ndef test_hello_name_10():\n    assert hello_name('Hello') == 'Hello Hello!'\n\n\n",
                "solution": ""
            },
            {
                "name": "make_abba",
                "topic": "",
                "requirements": [],
                "description": "Given two strings, a and b, return the result of putting them together in the order abba, e.g. \"Hi\" and \"Bye\" returns \"HiByeByeHi\".\n\n```\nmake_abba(\"Hi\", \"Bye\") -> \"HiByeByeHi\"\nmake_abba(\"Yo\", \"Alice\") -> \"YoAliceAliceYo\"\nmake_abba(\"What\", \"Up\") -> \"WhatUpUpWhat\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p161056) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def make_abba(a: str, b: str) -> str:\n    pass\n\n\nresult = make_abba('Hi', 'Bye')\nprint(result)\n",
                "tests": "from main import make_abba\n\n\ndef test_make_abba_1():\n    assert make_abba('Hi', 'Bye') == 'HiByeByeHi'\n\n\ndef test_make_abba_2():\n    assert make_abba('Yo', 'Alice') == 'YoAliceAliceYo'\n\n\ndef test_make_abba_3():\n    assert make_abba('What', 'Up') == 'WhatUpUpWhat'\n\n\ndef test_make_abba_4():\n    assert make_abba('aaa', 'bbb') == 'aaabbbbbbaaa'\n\n\ndef test_make_abba_5():\n    assert make_abba('x', 'y') == 'xyyx'\n\n\ndef test_make_abba_6():\n    assert make_abba('x', '') == 'xx'\n\n\ndef test_make_abba_7():\n    assert make_abba('', 'y') == 'yy'\n\n\ndef test_make_abba_8():\n    assert make_abba('Bo', 'Ya') == 'BoYaYaBo'\n\n\ndef test_make_abba_9():\n    assert make_abba('Ya', 'Ya') == 'YaYaYaYa'\n\n\n",
                "solution": ""
            },
            {
                "name": "make_tags",
                "topic": "",
                "requirements": [],
                "description": "The web is built with HTML strings like \"&lt;i&gt;Yay&lt;/i&gt;\" which draws Yay as italic text. In this example, the \"i\" tag makes &lt;i&gt; and &lt;/i&gt; which surround the word \"Yay\". Given tag and word strings, create the HTML string with tags around the word, e.g. \"&lt;i&gt;Yay&lt;/i&gt;\".\n\n```\nmake_tags(\"i\", \"Yay\") -> \"&lt;i&gt;Yay&lt;/i&gt;\"\nmake_tags(\"i\", \"Hello\") -> \"&lt;i&gt;Hello&lt;/i&gt;\"\nmake_tags(\"cite\", \"Yay\") -> \"&lt;cite&gt;Yay&lt;/cite&gt;\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p147483) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def make_tags(tag: str, word: str) -> str:\n    pass\n\n\nresult = make_tags('i', 'Yay')\nprint(result)\n",
                "tests": "from main import make_tags\n\n\ndef test_make_tags_1():\n    assert make_tags('i', 'Yay') == '<i>Yay</i>'\n\n\ndef test_make_tags_2():\n    assert make_tags('i', 'Hello') == '<i>Hello</i>'\n\n\ndef test_make_tags_3():\n    assert make_tags('cite', 'Yay') == '<cite>Yay</cite>'\n\n\ndef test_make_tags_4():\n    assert make_tags('address', 'here') == '<address>here</address>'\n\n\ndef test_make_tags_5():\n    assert make_tags('body', 'Heart') == '<body>Heart</body>'\n\n\ndef test_make_tags_6():\n    assert make_tags('i', 'i') == '<i>i</i>'\n\n\ndef test_make_tags_7():\n    assert make_tags('i', '') == '<i></i>'\n\n\n",
                "solution": ""
            },
            {
                "name": "make_out_word",
                "topic": "",
                "requirements": [],
                "description": "Given an \"out\" string length 4, such as \"&lt;&lt;&gt;&gt;\", and a word, return a new string where the word is in the middle of the out string, e.g. \"&lt;&lt;word&gt;&gt;\". Note: use `str[i:j]` to extract the String starting at index i and going up to but not including index j.\n\n```\nmake_out_word(\"&lt;&lt;&gt;&gt;\", \"Yay\") -> \"&lt;&lt;Yay&gt;&gt;\"\nmake_out_word(\"&lt;&lt;&gt;&gt;\", \"WooHoo\") -> \"&lt;&lt;WooHoo&gt;&gt;\"\nmake_out_word(\"[[]]\", \"word\") -> \"[[word]]\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p184030) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def make_out_word(out: str, word: str) -> str:\n    pass\n\n\nresult = make_out_word('<<>>', 'Yay')\nprint(result)\n",
                "tests": "from main import make_out_word\n\n\ndef test_make_out_word_1():\n    assert make_out_word('<<>>', 'Yay') == '<<Yay>>'\n\n\ndef test_make_out_word_2():\n    assert make_out_word('<<>>', 'WooHoo') == '<<WooHoo>>'\n\n\ndef test_make_out_word_3():\n    assert make_out_word('[[]]', 'word') == '[[word]]'\n\n\ndef test_make_out_word_4():\n    assert make_out_word('HHoo', 'Hello') == 'HHHellooo'\n\n\ndef test_make_out_word_5():\n    assert make_out_word('abyz', 'YAY') == 'abYAYyz'\n\n\n",
                "solution": ""
            },
            {
                "name": "extra_end",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a new string made of 3 copies of the last 2 chars of the original string. The string length will be at least 2.\n\n```\nextra_end(\"Hello\") -> \"lololo\"\nextra_end(\"ab\") -> \"ababab\"\nextra_end(\"Hi\") -> \"HiHiHi\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p108853) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def extra_end(string: str) -> str:\n    pass\n\n\nresult = extra_end('Hello')\nprint(result)\n",
                "tests": "from main import extra_end\n\n\ndef test_extra_end_1():\n    assert extra_end('Hello') == 'lololo'\n\n\ndef test_extra_end_2():\n    assert extra_end('ab') == 'ababab'\n\n\ndef test_extra_end_3():\n    assert extra_end('Hi') == 'HiHiHi'\n\n\ndef test_extra_end_4():\n    assert extra_end('Candy') == 'dydydy'\n\n\ndef test_extra_end_5():\n    assert extra_end('Code') == 'dedede'\n\n\n",
                "solution": ""
            },
            {
                "name": "first_two",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return the string made of its first two chars, so the String \"Hello\" yields \"He\". If the string is shorter than length 2, return whatever there is, so \"X\" yields \"X\", and the empty string \"\" yields the empty string \"\". Note that `len()` returns the length of a string.\n\n```\nfirst_two(\"Hello\") -> \"He\"\nfirst_two(\"abcdefg\") -> \"ab\"\nfirst_two(\"ab\") -> \"ab\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p163411) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def first_two(string: str) -> str:\n    pass\n\n\nresult = first_two('Hello')\nprint(result)\n",
                "tests": "from main import first_two\n\n\ndef test_first_two_1():\n    assert first_two('Hello') == 'He'\n\n\ndef test_first_two_2():\n    assert first_two('abcdefg') == 'ab'\n\n\ndef test_first_two_3():\n    assert first_two('ab') == 'ab'\n\n\ndef test_first_two_4():\n    assert first_two('a') == 'a'\n\n\ndef test_first_two_5():\n    assert first_two('') == ''\n\n\ndef test_first_two_6():\n    assert first_two('Kitten') == 'Ki'\n\n\ndef test_first_two_7():\n    assert first_two('hi') == 'hi'\n\n\ndef test_first_two_8():\n    assert first_two('hiya') == 'hi'\n\n\n",
                "solution": ""
            },
            {
                "name": "first_half",
                "topic": "",
                "requirements": [],
                "description": "Given a string of even length, return the first half. So the string \"WooHoo\" yields \"Woo\".\n\n```\nfirst_half(\"WooHoo\") -> \"Woo\"\nfirst_half(\"HelloThere\") -> \"Hello\"\nfirst_half(\"abcdef\") -> \"abc\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p172267) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def first_half(string: str) -> str:\n    pass\n\n\nresult = first_half('WooHoo')\nprint(result)\n",
                "tests": "from main import first_half\n\n\ndef test_first_half_1():\n    assert first_half('WooHoo') == 'Woo'\n\n\ndef test_first_half_2():\n    assert first_half('HelloThere') == 'Hello'\n\n\ndef test_first_half_3():\n    assert first_half('abcdef') == 'abc'\n\n\ndef test_first_half_4():\n    assert first_half('ab') == 'a'\n\n\ndef test_first_half_5():\n    assert first_half('') == ''\n\n\ndef test_first_half_6():\n    assert first_half('0123456789') == '01234'\n\n\ndef test_first_half_7():\n    assert first_half('kitten') == 'kit'\n\n\n",
                "solution": ""
            },
            {
                "name": "without_end",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a version without the first and last char, so \"Hello\" yields \"ell\". The string length will be at least 2.\n\n```\nwithout_end(\"Hello\") -> \"ell\"\nwithout_end(\"java\") -> \"av\"\nwithout_end(\"coding\") -> \"odin\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p130896) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def without_end(string: str) -> str:\n    pass\n\n\nresult = without_end('Hello')\nprint(result)\n",
                "tests": "from main import without_end\n\n\ndef test_without_end_1():\n    assert without_end('Hello') == 'ell'\n\n\ndef test_without_end_2():\n    assert without_end('java') == 'av'\n\n\ndef test_without_end_3():\n    assert without_end('coding') == 'odin'\n\n\ndef test_without_end_4():\n    assert without_end('code') == 'od'\n\n\ndef test_without_end_5():\n    assert without_end('ab') == ''\n\n\ndef test_without_end_6():\n    assert without_end('Chocolate!') == 'hocolate'\n\n\ndef test_without_end_7():\n    assert without_end('kitten') == 'itte'\n\n\ndef test_without_end_8():\n    assert without_end('woohoo') == 'ooho'\n\n\n",
                "solution": ""
            },
            {
                "name": "combo_string",
                "topic": "",
                "requirements": [],
                "description": "Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0).\n\n```\ncombo_string(\"Hello\", \"hi\") -> \"hiHellohi\"\ncombo_string(\"hi\", \"Hello\") -> \"hiHellohi\"\ncombo_string(\"aaa\", \"b\") -> \"baaab\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p168564) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def combo_string(a: str, b: str) -> str:\n    pass\n\n\nresult = combo_string('Hello', 'hi')\nprint(result)\n",
                "tests": "from main import combo_string\n\n\ndef test_combo_string_1():\n    assert combo_string('Hello', 'hi') == 'hiHellohi'\n\n\ndef test_combo_string_2():\n    assert combo_string('hi', 'Hello') == 'hiHellohi'\n\n\ndef test_combo_string_3():\n    assert combo_string('aaa', 'b') == 'baaab'\n\n\ndef test_combo_string_4():\n    assert combo_string('b', 'aaa') == 'baaab'\n\n\ndef test_combo_string_5():\n    assert combo_string('aaa', '') == 'aaa'\n\n\ndef test_combo_string_6():\n    assert combo_string('', 'bb') == 'bb'\n\n\ndef test_combo_string_7():\n    assert combo_string('aaa', '1234') == 'aaa1234aaa'\n\n\ndef test_combo_string_8():\n    assert combo_string('aaa', 'bb') == 'bbaaabb'\n\n\ndef test_combo_string_9():\n    assert combo_string('a', 'bb') == 'abba'\n\n\ndef test_combo_string_10():\n    assert combo_string('bb', 'a') == 'abba'\n\n\ndef test_combo_string_11():\n    assert combo_string('xyz', 'ab') == 'abxyzab'\n\n\n",
                "solution": ""
            },
            {
                "name": "non_start",
                "topic": "",
                "requirements": [],
                "description": "Given 2 strings, return their concatenation, except omit the first char of each. The strings will be at least length 1.\n\n```\nnon_start(\"Hello\", \"There\") -> \"ellohere\"\nnon_start(\"java\", \"code\") -> \"avaode\"\nnon_start(\"shotl\", \"java\") -> \"hotlava\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p143825) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def non_start(a: str, b: str) -> str:\n    pass\n\n\nresult = non_start('Hello', 'There')\nprint(result)\n",
                "tests": "from main import non_start\n\n\ndef test_non_start_1():\n    assert non_start('Hello', 'There') == 'ellohere'\n\n\ndef test_non_start_2():\n    assert non_start('java', 'code') == 'avaode'\n\n\ndef test_non_start_3():\n    assert non_start('shotl', 'java') == 'hotlava'\n\n\ndef test_non_start_4():\n    assert non_start('ab', 'xy') == 'by'\n\n\ndef test_non_start_5():\n    assert non_start('ab', 'x') == 'b'\n\n\ndef test_non_start_6():\n    assert non_start('x', 'ac') == 'c'\n\n\ndef test_non_start_7():\n    assert non_start('a', 'x') == ''\n\n\ndef test_non_start_8():\n    assert non_start('kit', 'kat') == 'itat'\n\n\ndef test_non_start_9():\n    assert non_start('mart', 'dart') == 'artart'\n\n\n",
                "solution": ""
            },
            {
                "name": "left_2",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a \"rotated left 2\" version where the first 2 chars are moved to the end. The string length will be at least 2.\n\n```\nleft_2(\"Hello\") -> \"lloHe\"\nleft_2(\"java\") -> \"vaja\"\nleft_2(\"Hi\") -> \"Hi\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p197720) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def left_2(string: str) -> str:\n    pass\n\n\nresult = left_2('Hello')\nprint(result)\n",
                "tests": "from main import left_2\n\n\ndef test_left_2_1():\n    assert left_2('Hello') == 'lloHe'\n\n\ndef test_left_2_2():\n    assert left_2('java') == 'vaja'\n\n\ndef test_left_2_3():\n    assert left_2('Hi') == 'Hi'\n\n\ndef test_left_2_4():\n    assert left_2('code') == 'deco'\n\n\ndef test_left_2_5():\n    assert left_2('cat') == 'tca'\n\n\ndef test_left_2_6():\n    assert left_2('12345') == '34512'\n\n\ndef test_left_2_7():\n    assert left_2('Chocolate') == 'ocolateCh'\n\n\ndef test_left_2_8():\n    assert left_2('bricks') == 'icksbr'\n\n\n",
                "solution": ""
            },
            {
                "name": "right_2",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a \"rotated right 2\" version where the last 2 chars are moved to the start. The string length will be at least 2.\n\n```\nright_2(\"Hello\") -> \"loHel\"\nright_2(\"java\") -> \"vaja\"\nright_2(\"Hi\") -> \"Hi\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p130781) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def right_2(string: str) -> str:\n    pass\n\n\nresult = right_2('Hello')\nprint(result)\n",
                "tests": "from main import right_2\n\n\ndef test_right_2_1():\n    assert right_2('Hello') == 'loHel'\n\n\ndef test_right_2_2():\n    assert right_2('java') == 'vaja'\n\n\ndef test_right_2_3():\n    assert right_2('Hi') == 'Hi'\n\n\ndef test_right_2_4():\n    assert right_2('code') == 'deco'\n\n\ndef test_right_2_5():\n    assert right_2('cat') == 'atc'\n\n\ndef test_right_2_6():\n    assert right_2('12345') == '45123'\n\n\n",
                "solution": ""
            },
            {
                "name": "the_end",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a string length 1 from its front, unless <b>front</b> is false, in which case return a string length 1 from its back. The string will be non-empty.\n\n```\nthe_end(\"Hello\", true) -> \"H\"\nthe_end(\"Hello\", false) -> \"o\"\nthe_end(\"oh\", true) -> \"o\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p162477) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def the_end(string: str, front: bool) -> str:\n    pass\n\n\nresult = the_end('Hello', True)\nprint(result)\n",
                "tests": "from main import the_end\n\n\ndef test_the_end_1():\n    assert the_end('Hello', True) == 'H'\n\n\ndef test_the_end_2():\n    assert the_end('Hello', False) == 'o'\n\n\ndef test_the_end_3():\n    assert the_end('oh', True) == 'o'\n\n\ndef test_the_end_4():\n    assert the_end('oh', False) == 'h'\n\n\ndef test_the_end_5():\n    assert the_end('x', True) == 'x'\n\n\ndef test_the_end_6():\n    assert the_end('x', False) == 'x'\n\n\ndef test_the_end_7():\n    assert the_end('java', True) == 'j'\n\n\ndef test_the_end_8():\n    assert the_end('chocolate', False) == 'e'\n\n\ndef test_the_end_9():\n    assert the_end('1234', True) == '1'\n\n\ndef test_the_end_10():\n    assert the_end('code', False) == 'e'\n\n\n",
                "solution": ""
            },
            {
                "name": "without_end_2",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a version without both the first and last char of the string. The string may be any length, including 0.\n\n```\nwithout_end_2(\"Hello\") -> \"ell\"\nwithout_end_2(\"abc\") -> \"b\"\nwithout_end_2(\"ab\") -> \"\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p174254) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def without_end_2(string: str) -> str:\n    pass\n\n\nresult = without_end_2('Hello')\nprint(result)\n",
                "tests": "from main import without_end_2\n\n\ndef test_without_end_2_1():\n    assert without_end_2('Hello') == 'ell'\n\n\ndef test_without_end_2_2():\n    assert without_end_2('abc') == 'b'\n\n\ndef test_without_end_2_3():\n    assert without_end_2('ab') == ''\n\n\ndef test_without_end_2_4():\n    assert without_end_2('a') == ''\n\n\ndef test_without_end_2_5():\n    assert without_end_2('') == ''\n\n\ndef test_without_end_2_6():\n    assert without_end_2('coldy') == 'old'\n\n\ndef test_without_end_2_7():\n    assert without_end_2('java code') == 'ava cod'\n\n\n",
                "solution": ""
            },
            {
                "name": "middle_two",
                "topic": "",
                "requirements": [],
                "description": "Given a string of even length, return a string made of the middle two chars, so the string \"string\" yields \"ri\". The string length will be at least 2.\n\n```\nmiddle_two(\"string\") -> \"ri\"\nmiddle_two(\"code\") -> \"od\"\nmiddle_two(\"Practice\") -> \"ct\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p137729) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def middle_two(string: str) -> str:\n    pass\n\n\nresult = middle_two('string')\nprint(result)\n",
                "tests": "from main import middle_two\n\n\ndef test_middle_two_1():\n    assert middle_two('string') == 'ri'\n\n\ndef test_middle_two_2():\n    assert middle_two('code') == 'od'\n\n\ndef test_middle_two_3():\n    assert middle_two('Practice') == 'ct'\n\n\ndef test_middle_two_4():\n    assert middle_two('ab') == 'ab'\n\n\ndef test_middle_two_5():\n    assert middle_two('0123456789') == '45'\n\n\n",
                "solution": ""
            },
            {
                "name": "ends_ly",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return true if it ends in \"ly\".\n\n```\nends_ly(\"oddly\") -> true\nends_ly(\"y\") -> false\nends_ly(\"oddy\") -> false\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p103895) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def ends_ly(string: str) -> bool:\n    pass\n\n\nresult = ends_ly('oddly')\nprint(result)\n",
                "tests": "from main import ends_ly\n\n\ndef test_ends_ly_1():\n    assert ends_ly('oddly') == True\n\n\ndef test_ends_ly_2():\n    assert ends_ly('y') == False\n\n\ndef test_ends_ly_3():\n    assert ends_ly('oddy') == False\n\n\ndef test_ends_ly_4():\n    assert ends_ly('oddl') == False\n\n\ndef test_ends_ly_5():\n    assert ends_ly('olydd') == False\n\n\ndef test_ends_ly_6():\n    assert ends_ly('ly') == True\n\n\ndef test_ends_ly_7():\n    assert ends_ly('') == False\n\n\ndef test_ends_ly_8():\n    assert ends_ly('falsey') == False\n\n\ndef test_ends_ly_9():\n    assert ends_ly('evenly') == True\n\n\n",
                "solution": ""
            },
            {
                "name": "n_twice",
                "topic": "",
                "requirements": [],
                "description": "Given a string and an int n, return a string made of the first and last n chars from the string. The string length will be at least n.\n\n```\nn_twice(\"Hello\", 2) -> \"Helo\"\nn_twice(\"Chocolate\", 3) -> \"Choate\"\nn_twice(\"Chocolate\", 1) -> \"Ce\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p174148) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def n_twice(string: str, n: int) -> str:\n    pass\n\n\nresult = n_twice('Hello', 2)\nprint(result)\n",
                "tests": "from main import n_twice\n\n\ndef test_n_twice_1():\n    assert n_twice('Hello', 2) == 'Helo'\n\n\ndef test_n_twice_2():\n    assert n_twice('Chocolate', 3) == 'Choate'\n\n\ndef test_n_twice_3():\n    assert n_twice('Chocolate', 1) == 'Ce'\n\n\ndef test_n_twice_4():\n    assert n_twice('Chocolate', 0) == ''\n\n\ndef test_n_twice_5():\n    assert n_twice('Hello', 4) == 'Hellello'\n\n\ndef test_n_twice_6():\n    assert n_twice('Code', 4) == 'CodeCode'\n\n\ndef test_n_twice_7():\n    assert n_twice('Code', 2) == 'Code'\n\n\n",
                "solution": ""
            },
            {
                "name": "two_char",
                "topic": "",
                "requirements": [],
                "description": "Given a string and an index, return a string length 2 starting at the given index. If the index is too big or too small to define a string length 2, use the first 2 chars. The string length will be at least 2.\n\n```\ntwo_char(\"java\", 0) -> \"ja\"\ntwo_char(\"java\", 2) -> \"va\"\ntwo_char(\"java\", 3) -> \"ja\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p144623) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def two_char(string: str, index: int) -> str:\n    pass\n\n\nresult = two_char('java', 0)\nprint(result)\n",
                "tests": "from main import two_char\n\n\ndef test_two_char_1():\n    assert two_char('java', 0) == 'ja'\n\n\ndef test_two_char_2():\n    assert two_char('java', 2) == 'va'\n\n\ndef test_two_char_3():\n    assert two_char('java', 3) == 'ja'\n\n\ndef test_two_char_4():\n    assert two_char('java', 4) == 'ja'\n\n\ndef test_two_char_5():\n    assert two_char('java', -1) == 'ja'\n\n\ndef test_two_char_6():\n    assert two_char('Hello', 0) == 'He'\n\n\ndef test_two_char_7():\n    assert two_char('Hello', 1) == 'el'\n\n\ndef test_two_char_8():\n    assert two_char('Hello', 99) == 'He'\n\n\ndef test_two_char_9():\n    assert two_char('Hello', 3) == 'lo'\n\n\ndef test_two_char_10():\n    assert two_char('Hello', 4) == 'He'\n\n\ndef test_two_char_11():\n    assert two_char('Hello', 5) == 'He'\n\n\ndef test_two_char_12():\n    assert two_char('Hello', -7) == 'He'\n\n\ndef test_two_char_13():\n    assert two_char('Hello', 6) == 'He'\n\n\ndef test_two_char_14():\n    assert two_char('Hello', -1) == 'He'\n\n\ndef test_two_char_15():\n    assert two_char('yay', 0) == 'ya'\n\n\n",
                "solution": ""
            },
            {
                "name": "middle_three",
                "topic": "",
                "requirements": [],
                "description": "Given a string of odd length, return the string length 3 from its middle, so \"Candy\" yields \"and\". The string length will be at least 3.\n\n```\nmiddle_three(\"Candy\") -> \"and\"\nmiddle_three(\"and\") -> \"and\"\nmiddle_three(\"solving\") -> \"lvi\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p115863) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def middle_three(string: str) -> str:\n    pass\n\n\nresult = middle_three('Candy')\nprint(result)\n",
                "tests": "from main import middle_three\n\n\ndef test_middle_three_1():\n    assert middle_three('Candy') == 'and'\n\n\ndef test_middle_three_2():\n    assert middle_three('and') == 'and'\n\n\ndef test_middle_three_3():\n    assert middle_three('solving') == 'lvi'\n\n\ndef test_middle_three_4():\n    assert middle_three('Hi yet Hi') == 'yet'\n\n\ndef test_middle_three_5():\n    assert middle_three('java yet java') == 'yet'\n\n\ndef test_middle_three_6():\n    assert middle_three('Chocolate') == 'col'\n\n\ndef test_middle_three_7():\n    assert middle_three('XabcxyzabcX') == 'xyz'\n\n\n",
                "solution": ""
            },
            {
                "name": "has_bad",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return true if \"bad\" appears starting at index 0 or 1 in the string, such as with \"badxxx\" or \"xbadxx\" but not \"xxbadxx\". The string may be any length, including 0. Note: use .equals() to compare 2 strings.\n\n```\nhas_bad(\"badxx\") -> true\nhas_bad(\"xbadxx\") -> true\nhas_bad(\"xxbadxx\") -> false\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p139075) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def has_bad(string: str) -> bool:\n    pass\n\n\nresult = has_bad('badxx')\nprint(result)\n",
                "tests": "from main import has_bad\n\n\ndef test_has_bad_1():\n    assert has_bad('badxx') == True\n\n\ndef test_has_bad_2():\n    assert has_bad('xbadxx') == True\n\n\ndef test_has_bad_3():\n    assert has_bad('xxbadxx') == False\n\n\ndef test_has_bad_4():\n    assert has_bad('code') == False\n\n\ndef test_has_bad_5():\n    assert has_bad('bad') == True\n\n\ndef test_has_bad_6():\n    assert has_bad('ba') == False\n\n\ndef test_has_bad_7():\n    assert has_bad('xba') == False\n\n\ndef test_has_bad_8():\n    assert has_bad('xbad') == True\n\n\ndef test_has_bad_9():\n    assert has_bad('') == False\n\n\ndef test_has_bad_10():\n    assert has_bad('badyy') == True\n\n\n",
                "solution": ""
            },
            {
                "name": "at_first",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a string length 2 made of its first 2 chars. If the string length is less than 2, use '@' for the missing chars.\n\n```\nat_first(\"hello\") -> \"he\"\nat_first(\"hi\") -> \"hi\"\nat_first(\"h\") -> \"h@\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p139076) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def at_first(string: str) -> str:\n    pass\n\n\nresult = at_first('hello')\nprint(result)\n",
                "tests": "from main import at_first\n\n\ndef test_at_first_1():\n    assert at_first('hello') == 'he'\n\n\ndef test_at_first_2():\n    assert at_first('hi') == 'hi'\n\n\ndef test_at_first_3():\n    assert at_first('h') == 'h@'\n\n\ndef test_at_first_4():\n    assert at_first('') == '@@'\n\n\ndef test_at_first_5():\n    assert at_first('kitten') == 'ki'\n\n\ndef test_at_first_6():\n    assert at_first('java') == 'ja'\n\n\ndef test_at_first_7():\n    assert at_first('j') == 'j@'\n\n\n",
                "solution": ""
            },
            {
                "name": "last_chars",
                "topic": "",
                "requirements": [],
                "description": "Given 2 strings, a and b, return a new string made of the first char of a and the last char of b, so \"yo\" and \"java\" yields \"ya\". If either string is length 0, use '@' for its missing char.\n\n```\nlast_chars(\"last\", \"chars\") -> \"ls\"\nlast_chars(\"yo\", \"java\") -> \"ya\"\nlast_chars(\"hi\", \"\") -> \"h@\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p138183) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def last_chars(a: str, b: str) -> str:\n    pass\n\n\nresult = last_chars('last', 'chars')\nprint(result)\n",
                "tests": "from main import last_chars\n\n\ndef test_last_chars_1():\n    assert last_chars('last', 'chars') == 'ls'\n\n\ndef test_last_chars_2():\n    assert last_chars('yo', 'java') == 'ya'\n\n\ndef test_last_chars_3():\n    assert last_chars('hi', '') == 'h@'\n\n\ndef test_last_chars_4():\n    assert last_chars('', 'hello') == '@o'\n\n\ndef test_last_chars_5():\n    assert last_chars('', '') == '@@'\n\n\ndef test_last_chars_6():\n    assert last_chars('kitten', 'hi') == 'ki'\n\n\ndef test_last_chars_7():\n    assert last_chars('k', 'zip') == 'kp'\n\n\ndef test_last_chars_8():\n    assert last_chars('kitten', '') == 'k@'\n\n\ndef test_last_chars_9():\n    assert last_chars('kitten', 'zip') == 'kp'\n\n\n",
                "solution": ""
            },
            {
                "name": "con_cat",
                "topic": "",
                "requirements": [],
                "description": "Given two strings, append them together (known as \"concatenation\") and return the result. However, if the concatenation creates a double-char, then omit one of the chars, so \"abc\" and \"cat\" yields \"abcat\".\n\n```\ncon_cat(\"abc\", \"cat\") -> \"abcat\"\ncon_cat(\"dog\", \"cat\") -> \"dogcat\"\ncon_cat(\"abc\", \"\") -> \"abc\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p132118) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def con_cat(a: str, b: str) -> str:\n    pass\n\n\nresult = con_cat('abc', 'cat')\nprint(result)\n",
                "tests": "from main import con_cat\n\n\ndef test_con_cat_1():\n    assert con_cat('abc', 'cat') == 'abcat'\n\n\ndef test_con_cat_2():\n    assert con_cat('dog', 'cat') == 'dogcat'\n\n\ndef test_con_cat_3():\n    assert con_cat('abc', '') == 'abc'\n\n\ndef test_con_cat_4():\n    assert con_cat('', 'cat') == 'cat'\n\n\ndef test_con_cat_5():\n    assert con_cat('pig', 'g') == 'pig'\n\n\ndef test_con_cat_6():\n    assert con_cat('pig', 'doggy') == 'pigdoggy'\n\n\n",
                "solution": ""
            },
            {
                "name": "last_two",
                "topic": "",
                "requirements": [],
                "description": "Given a string of any length, return a new string where the last 2 chars, if present, are swapped, so \"coding\" yields \"codign\".\n\n```\nlast_two(\"coding\") -> \"codign\"\nlast_two(\"cat\") -> \"cta\"\nlast_two(\"ab\") -> \"ba\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p194786) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def last_two(string: str) -> str:\n    pass\n\n\nresult = last_two('coding')\nprint(result)\n",
                "tests": "from main import last_two\n\n\ndef test_last_two_1():\n    assert last_two('coding') == 'codign'\n\n\ndef test_last_two_2():\n    assert last_two('cat') == 'cta'\n\n\ndef test_last_two_3():\n    assert last_two('ab') == 'ba'\n\n\ndef test_last_two_4():\n    assert last_two('a') == 'a'\n\n\ndef test_last_two_5():\n    assert last_two('') == ''\n\n\n",
                "solution": ""
            },
            {
                "name": "see_color",
                "topic": "",
                "requirements": [],
                "description": "Given a string, if the string begins with \"red\" or \"blue\" return that color string, otherwise return the empty string.\n\n```\nsee_color(\"redxx\") -> \"red\"\nsee_color(\"xxred\") -> \"\"\nsee_color(\"blueTimes\") -> \"blue\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p199216) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def see_color(string: str) -> str:\n    pass\n\n\nresult = see_color('redxx')\nprint(result)\n",
                "tests": "from main import see_color\n\n\ndef test_see_color_1():\n    assert see_color('redxx') == 'red'\n\n\ndef test_see_color_2():\n    assert see_color('xxred') == ''\n\n\ndef test_see_color_3():\n    assert see_color('blueTimes') == 'blue'\n\n\ndef test_see_color_4():\n    assert see_color('NoColor') == ''\n\n\ndef test_see_color_5():\n    assert see_color('red') == 'red'\n\n\ndef test_see_color_6():\n    assert see_color('re') == ''\n\n\ndef test_see_color_7():\n    assert see_color('blu') == ''\n\n\ndef test_see_color_8():\n    assert see_color('blue') == 'blue'\n\n\ndef test_see_color_9():\n    assert see_color('a') == ''\n\n\ndef test_see_color_10():\n    assert see_color('') == ''\n\n\ndef test_see_color_11():\n    assert see_color('xyzred') == ''\n\n\n",
                "solution": ""
            },
            {
                "name": "front_again",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return true if the first 2 chars in the string also appear at the end of the string, such as with \"edited\".\n\n```\nfront_again(\"edited\") -> true\nfront_again(\"edit\") -> false\nfront_again(\"ed\") -> true\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p196652) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def front_again(string: str) -> bool:\n    pass\n\n\nresult = front_again('edited')\nprint(result)\n",
                "tests": "from main import front_again\n\n\ndef test_front_again_1():\n    assert front_again('edited') == True\n\n\ndef test_front_again_2():\n    assert front_again('edit') == False\n\n\ndef test_front_again_3():\n    assert front_again('ed') == True\n\n\ndef test_front_again_4():\n    assert front_again('jj') == True\n\n\ndef test_front_again_5():\n    assert front_again('jjj') == True\n\n\ndef test_front_again_6():\n    assert front_again('jjjj') == True\n\n\ndef test_front_again_7():\n    assert front_again('jjjk') == False\n\n\ndef test_front_again_8():\n    assert front_again('x') == False\n\n\ndef test_front_again_9():\n    assert front_again('') == False\n\n\ndef test_front_again_10():\n    assert front_again('java') == False\n\n\ndef test_front_again_11():\n    assert front_again('javaja') == True\n\n\n",
                "solution": ""
            },
            {
                "name": "min_cat",
                "topic": "",
                "requirements": [],
                "description": "Given two strings, append them together (known as \"concatenation\") and return the result. However, if the strings are different lengths, omit chars from the longer string so it is the same length as the shorter string. So \"Hello\" and \"Hi\" yield \"loHi\". The strings may be any length.\n\n```\nmin_cat(\"Hello\", \"Hi\") -> \"loHi\"\nmin_cat(\"Hello\", \"java\") -> \"ellojava\"\nmin_cat(\"java\", \"Hello\") -> \"javaello\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p105745) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def min_cat(a: str, b: str) -> str:\n    pass\n\n\nresult = min_cat('Hello', 'Hi')\nprint(result)\n",
                "tests": "from main import min_cat\n\n\ndef test_min_cat_1():\n    assert min_cat('Hello', 'Hi') == 'loHi'\n\n\ndef test_min_cat_2():\n    assert min_cat('Hello', 'java') == 'ellojava'\n\n\ndef test_min_cat_3():\n    assert min_cat('java', 'Hello') == 'javaello'\n\n\ndef test_min_cat_4():\n    assert min_cat('abc', 'x') == 'cx'\n\n\ndef test_min_cat_5():\n    assert min_cat('x', 'abc') == 'xc'\n\n\ndef test_min_cat_6():\n    assert min_cat('abc', '') == ''\n\n\n",
                "solution": ""
            },
            {
                "name": "extra_front",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a new string made of 3 copies of the first 2 chars of the original string. The string may be any length. If there are fewer than 2 chars, use whatever is there.\n\n```\nextra_front(\"Hello\") -> \"HeHeHe\"\nextra_front(\"ab\") -> \"ababab\"\nextra_front(\"H\") -> \"HHH\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p172063) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def extra_front(string: str) -> str:\n    pass\n\n\nresult = extra_front('Hello')\nprint(result)\n",
                "tests": "from main import extra_front\n\n\ndef test_extra_front_1():\n    assert extra_front('Hello') == 'HeHeHe'\n\n\ndef test_extra_front_2():\n    assert extra_front('ab') == 'ababab'\n\n\ndef test_extra_front_3():\n    assert extra_front('H') == 'HHH'\n\n\ndef test_extra_front_4():\n    assert extra_front('') == ''\n\n\ndef test_extra_front_5():\n    assert extra_front('Candy') == 'CaCaCa'\n\n\ndef test_extra_front_6():\n    assert extra_front('Code') == 'CoCoCo'\n\n\n",
                "solution": ""
            },
            {
                "name": "without_2",
                "topic": "",
                "requirements": [],
                "description": "Given a string, if a length 2 substring appears at both its beginning and end, return a string without the substring at the beginning, so \"HelloHe\" yields \"lloHe\". The substring may overlap with itself, so \"Hi\" yields \"\". Otherwise, return the original string unchanged.\n\n```\nwithout_2(\"HelloHe\") -> \"lloHe\"\nwithout_2(\"HelloHi\") -> \"HelloHi\"\nwithout_2(\"Hi\") -> \"\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p142247) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def without_2(string: str) -> str:\n    pass\n\n\nresult = without_2('HelloHe')\nprint(result)\n",
                "tests": "from main import without_2\n\n\ndef test_without_2_1():\n    assert without_2('HelloHe') == 'lloHe'\n\n\ndef test_without_2_2():\n    assert without_2('HelloHi') == 'HelloHi'\n\n\ndef test_without_2_3():\n    assert without_2('Hi') == ''\n\n\ndef test_without_2_4():\n    assert without_2('Chocolate') == 'Chocolate'\n\n\ndef test_without_2_5():\n    assert without_2('xxx') == 'x'\n\n\ndef test_without_2_6():\n    assert without_2('xx') == ''\n\n\ndef test_without_2_7():\n    assert without_2('x') == 'x'\n\n\ndef test_without_2_8():\n    assert without_2('') == ''\n\n\ndef test_without_2_9():\n    assert without_2('Fruits') == 'Fruits'\n\n\n",
                "solution": ""
            },
            {
                "name": "de_front",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a version without the first 2 chars. Except keep the first char if it is 'a' and keep the second char if it is 'b'. The string may be any length. Harder than it looks.\n\n```\nde_front(\"Hello\") -> \"llo\"\nde_front(\"java\") -> \"va\"\nde_front(\"away\") -> \"aay\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p110141) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def de_front(string: str) -> str:\n    pass\n\n\nresult = de_front('Hello')\nprint(result)\n",
                "tests": "from main import de_front\n\n\ndef test_de_front_1():\n    assert de_front('Hello') == 'llo'\n\n\ndef test_de_front_2():\n    assert de_front('java') == 'va'\n\n\ndef test_de_front_3():\n    assert de_front('away') == 'aay'\n\n\ndef test_de_front_4():\n    assert de_front('axy') == 'ay'\n\n\ndef test_de_front_5():\n    assert de_front('abc') == 'abc'\n\n\ndef test_de_front_6():\n    assert de_front('xby') == 'by'\n\n\ndef test_de_front_7():\n    assert de_front('ab') == 'ab'\n\n\ndef test_de_front_8():\n    assert de_front('ax') == 'a'\n\n\ndef test_de_front_9():\n    assert de_front('axb') == 'ab'\n\n\ndef test_de_front_10():\n    assert de_front('aaa') == 'aa'\n\n\ndef test_de_front_11():\n    assert de_front('xbc') == 'bc'\n\n\ndef test_de_front_12():\n    assert de_front('bbb') == 'bb'\n\n\ndef test_de_front_13():\n    assert de_front('bazz') == 'zz'\n\n\ndef test_de_front_14():\n    assert de_front('ba') == ''\n\n\ndef test_de_front_15():\n    assert de_front('abxyz') == 'abxyz'\n\n\ndef test_de_front_16():\n    assert de_front('hi') == ''\n\n\ndef test_de_front_17():\n    assert de_front('his') == 's'\n\n\ndef test_de_front_18():\n    assert de_front('xz') == ''\n\n\ndef test_de_front_19():\n    assert de_front('zzz') == 'z'\n\n\n",
                "solution": ""
            },
            {
                "name": "start_word",
                "topic": "",
                "requirements": [],
                "description": "Given a string and a second \"word\" string, we'll say that the word matches the string if it appears at the front of the string, except its first char does not need to match exactly. On a match, return the front of the string, or otherwise return the empty string. So, so with the string \"hippo\" the word \"hi\" returns \"hi\" and \"xip\" returns \"hip\". The word will be at least length 1.\n\n```\nstart_word(\"hippo\", \"hi\") -> \"hi\"\nstart_word(\"hippo\", \"xip\") -> \"hip\"\nstart_word(\"hippo\", \"i\") -> \"h\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p141494) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def start_word(string: str, word: str) -> str:\n    pass\n\n\nresult = start_word('hippo', 'hi')\nprint(result)\n",
                "tests": "from main import start_word\n\n\ndef test_start_word_1():\n    assert start_word('hippo', 'hi') == 'hi'\n\n\ndef test_start_word_2():\n    assert start_word('hippo', 'xip') == 'hip'\n\n\ndef test_start_word_3():\n    assert start_word('hippo', 'i') == 'h'\n\n\ndef test_start_word_4():\n    assert start_word('hippo', 'ix') == ''\n\n\ndef test_start_word_5():\n    assert start_word('h', 'ix') == ''\n\n\ndef test_start_word_6():\n    assert start_word('', 'i') == ''\n\n\ndef test_start_word_7():\n    assert start_word('hip', 'zi') == 'hi'\n\n\ndef test_start_word_8():\n    assert start_word('hip', 'zip') == 'hip'\n\n\ndef test_start_word_9():\n    assert start_word('hip', 'zig') == ''\n\n\ndef test_start_word_10():\n    assert start_word('h', 'z') == 'h'\n\n\ndef test_start_word_11():\n    assert start_word('hippo', 'xippo') == 'hippo'\n\n\ndef test_start_word_12():\n    assert start_word('hippo', 'xyz') == ''\n\n\ndef test_start_word_13():\n    assert start_word('hippo', 'hip') == 'hip'\n\n\ndef test_start_word_14():\n    assert start_word('kitten', 'cit') == 'kit'\n\n\ndef test_start_word_15():\n    assert start_word('kit', 'cit') == 'kit'\n\n\n",
                "solution": ""
            },
            {
                "name": "without_x",
                "topic": "",
                "requirements": [],
                "description": "Given a string, if the first or last chars are 'x', return the string without those 'x' chars, and otherwise return the string unchanged.\n\n```\nwithout_x(\"xHix\") -> \"Hi\"\nwithout_x(\"xHi\") -> \"Hi\"\nwithout_x(\"Hxix\") -> \"Hxi\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p151940) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def without_x(string: str) -> str:\n    pass\n\n\nresult = without_x('xHix')\nprint(result)\n",
                "tests": "from main import without_x\n\n\ndef test_without_x_1():\n    assert without_x('xHix') == 'Hi'\n\n\ndef test_without_x_2():\n    assert without_x('xHi') == 'Hi'\n\n\ndef test_without_x_3():\n    assert without_x('Hxix') == 'Hxi'\n\n\ndef test_without_x_4():\n    assert without_x('Hi') == 'Hi'\n\n\ndef test_without_x_5():\n    assert without_x('xxHi') == 'xHi'\n\n\ndef test_without_x_6():\n    assert without_x('Hix') == 'Hi'\n\n\ndef test_without_x_7():\n    assert without_x('xaxbx') == 'axb'\n\n\ndef test_without_x_8():\n    assert without_x('xx') == ''\n\n\ndef test_without_x_9():\n    assert without_x('x') == ''\n\n\ndef test_without_x_10():\n    assert without_x('') == ''\n\n\ndef test_without_x_11():\n    assert without_x('Hello') == 'Hello'\n\n\ndef test_without_x_12():\n    assert without_x('Hexllo') == 'Hexllo'\n\n\n",
                "solution": ""
            },
            {
                "name": "without_x_2",
                "topic": "",
                "requirements": [],
                "description": "Given a string, if one or both of the first 2 chars is 'x', return the string without those 'x' chars, and otherwise return the string unchanged. This is a little harder than it looks.\n\n```\nwithout_x_2(\"xHi\") -> \"Hi\"\nwithout_x_2(\"Hxi\") -> \"Hi\"\nwithout_x_2(\"Hi\") -> \"Hi\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p151359) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def without_x_2(string: str) -> str:\n    pass\n\n\nresult = without_x_2('xHi')\nprint(result)\n",
                "tests": "from main import without_x_2\n\n\ndef test_without_x_2_1():\n    assert without_x_2('xHi') == 'Hi'\n\n\ndef test_without_x_2_2():\n    assert without_x_2('Hxi') == 'Hi'\n\n\ndef test_without_x_2_3():\n    assert without_x_2('Hi') == 'Hi'\n\n\ndef test_without_x_2_4():\n    assert without_x_2('xxHi') == 'Hi'\n\n\ndef test_without_x_2_5():\n    assert without_x_2('Hix') == 'Hix'\n\n\ndef test_without_x_2_6():\n    assert without_x_2('xaxb') == 'axb'\n\n\ndef test_without_x_2_7():\n    assert without_x_2('xx') == ''\n\n\ndef test_without_x_2_8():\n    assert without_x_2('x') == ''\n\n\ndef test_without_x_2_9():\n    assert without_x_2('') == ''\n\n\ndef test_without_x_2_10():\n    assert without_x_2('Hello') == 'Hello'\n\n\ndef test_without_x_2_11():\n    assert without_x_2('Hexllo') == 'Hexllo'\n\n\ndef test_without_x_2_12():\n    assert without_x_2('xHxllo') == 'Hxllo'\n\n\n",
                "solution": ""
            }
        ],
        "String-2": [
            {
                "name": "double_char",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a string where for every char in the original, there are two chars.\n\n```\ndouble_char(\"The\") -> \"TThhee\"\ndouble_char(\"AAbb\") -> \"AAAAbbbb\"\ndouble_char(\"Hi-There\") -> \"HHii--TThheerree\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p165312) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def double_char(string: str) -> str:\n    pass\n\n\nresult = double_char('The')\nprint(result)",
                "tests": "from main import double_char\n\n\ndef test_double_char_1():\n    assert double_char('The') == 'TThhee'\n\n\ndef test_double_char_2():\n    assert double_char('AAbb') == 'AAAAbbbb'\n\n\ndef test_double_char_3():\n    assert double_char('Hi-There') == 'HHii--TThheerree'\n\n\ndef test_double_char_4():\n    assert double_char('Word!') == 'WWoorrdd!!'\n\n\ndef test_double_char_5():\n    assert double_char('!!') == '!!!!'\n\n\ndef test_double_char_6():\n    assert double_char('') == ''\n\n\ndef test_double_char_7():\n    assert double_char('a') == 'aa'\n\n\ndef test_double_char_8():\n    assert double_char('.') == '..'\n\n\ndef test_double_char_9():\n    assert double_char('aa') == 'aaaa'",
                "solution": "def double_char(string: str) -> str:\n\n    new_string = \"\"\n    for c in string:\n        new_string += c + c\n\n    return new_string"
            },
            {
                "name": "count_hi",
                "topic": "",
                "requirements": [],
                "description": "Return the number of times that the string \"hi\" appears anywhere in the given string.\n\n```\ncount_hi(\"abc hi ho\") -> 1\ncount_hi(\"ABChi hi\") -> 2\ncount_hi(\"hihi\") -> 2\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p147448) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def count_hi(string: str) -> int:\n    pass\n\n\nresult = count_hi('abc hi ho')\nprint(result)\n",
                "tests": "from main import count_hi\n\n\ndef test_count_hi_1():\n    assert count_hi('abc hi ho') == 1\n\n\ndef test_count_hi_2():\n    assert count_hi('ABChi hi') == 2\n\n\ndef test_count_hi_3():\n    assert count_hi('hihi') == 2\n\n\ndef test_count_hi_4():\n    assert count_hi('hiHIhi') == 2\n\n\ndef test_count_hi_5():\n    assert count_hi('') == 0\n\n\ndef test_count_hi_6():\n    assert count_hi('h') == 0\n\n\ndef test_count_hi_7():\n    assert count_hi('hi') == 1\n\n\ndef test_count_hi_8():\n    assert count_hi('Hi is no HI on ahI') == 0\n\n\ndef test_count_hi_9():\n    assert count_hi('hiho not HOHIhi') == 2\n\n\n",
                "solution": ""
            },
            {
                "name": "cat_dog",
                "topic": "",
                "requirements": [],
                "description": "Return true if the string \"cat\" and \"dog\" appear the same number of times in the given string.\n\n```\ncat_dog(\"catdog\") -> true\ncat_dog(\"catcat\") -> false\ncat_dog(\"1cat1cadodog\") -> true\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p111624) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def cat_dog(string: str) -> bool:\n    pass\n\n\nresult = cat_dog('catdog')\nprint(result)\n",
                "tests": "from main import cat_dog\n\n\ndef test_cat_dog_1():\n    assert cat_dog('catdog') == True\n\n\ndef test_cat_dog_2():\n    assert cat_dog('catcat') == False\n\n\ndef test_cat_dog_3():\n    assert cat_dog('1cat1cadodog') == True\n\n\ndef test_cat_dog_4():\n    assert cat_dog('catxxdogxxxdog') == False\n\n\ndef test_cat_dog_5():\n    assert cat_dog('catxdogxdogxcat') == True\n\n\ndef test_cat_dog_6():\n    assert cat_dog('catxdogxdogxca') == False\n\n\ndef test_cat_dog_7():\n    assert cat_dog('dogdogcat') == False\n\n\ndef test_cat_dog_8():\n    assert cat_dog('dogogcat') == True\n\n\ndef test_cat_dog_9():\n    assert cat_dog('dog') == False\n\n\ndef test_cat_dog_10():\n    assert cat_dog('cat') == False\n\n\ndef test_cat_dog_11():\n    assert cat_dog('ca') == True\n\n\ndef test_cat_dog_12():\n    assert cat_dog('c') == True\n\n\ndef test_cat_dog_13():\n    assert cat_dog('') == True\n\n\n",
                "solution": ""
            },
            {
                "name": "count_code",
                "topic": "",
                "requirements": [],
                "description": "Return the number of times that the string \"code\" appears anywhere in the given string, except we'll accept any letter for the 'd', so \"cope\" and \"cooe\" count.\n\n```\ncount_code(\"aaacodebbb\") -> 1\ncount_code(\"codexxcode\") -> 2\ncount_code(\"cozexxcope\") -> 2\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p123614) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def count_code(string: str) -> int:\n    pass\n\n\nresult = count_code('aaacodebbb')\nprint(result)\n",
                "tests": "from main import count_code\n\n\ndef test_count_code_1():\n    assert count_code('aaacodebbb') == 1\n\n\ndef test_count_code_2():\n    assert count_code('codexxcode') == 2\n\n\ndef test_count_code_3():\n    assert count_code('cozexxcope') == 2\n\n\ndef test_count_code_4():\n    assert count_code('cozfxxcope') == 1\n\n\ndef test_count_code_5():\n    assert count_code('xxcozeyycop') == 1\n\n\ndef test_count_code_6():\n    assert count_code('cozcop') == 0\n\n\ndef test_count_code_7():\n    assert count_code('abcxyz') == 0\n\n\ndef test_count_code_8():\n    assert count_code('code') == 1\n\n\ndef test_count_code_9():\n    assert count_code('ode') == 0\n\n\ndef test_count_code_10():\n    assert count_code('c') == 0\n\n\ndef test_count_code_11():\n    assert count_code('') == 0\n\n\ndef test_count_code_12():\n    assert count_code('AAcodeBBcoleCCccoreDD') == 3\n\n\ndef test_count_code_13():\n    assert count_code('AAcodeBBcoleCCccorfDD') == 2\n\n\ndef test_count_code_14():\n    assert count_code('coAcodeBcoleccoreDD') == 3\n\n\n",
                "solution": ""
            },
            {
                "name": "end_other",
                "topic": "",
                "requirements": [],
                "description": "Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be \"case sensitive\"). Note:  str.toLowerCase() returns the lowercase version of a string.\n\n```\nend_other(\"Hiabc\", \"abc\") -> true\nend_other(\"AbC\", \"HiaBc\") -> true\nend_other(\"abc\", \"abXabc\") -> true\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p126880) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def end_other(a: str, b: str) -> bool:\n    pass\n\n\nresult = end_other('Hiabc', 'abc')\nprint(result)\n",
                "tests": "from main import end_other\n\n\ndef test_end_other_1():\n    assert end_other('Hiabc', 'abc') == True\n\n\ndef test_end_other_2():\n    assert end_other('AbC', 'HiaBc') == True\n\n\ndef test_end_other_3():\n    assert end_other('abc', 'abXabc') == True\n\n\ndef test_end_other_4():\n    assert end_other('Hiabc', 'abcd') == False\n\n\ndef test_end_other_5():\n    assert end_other('Hiabc', 'bc') == True\n\n\ndef test_end_other_6():\n    assert end_other('Hiabcx', 'bc') == False\n\n\ndef test_end_other_7():\n    assert end_other('abc', 'abc') == True\n\n\ndef test_end_other_8():\n    assert end_other('xyz', '12xyz') == True\n\n\ndef test_end_other_9():\n    assert end_other('yz', '12xz') == False\n\n\ndef test_end_other_10():\n    assert end_other('Z', '12xz') == True\n\n\ndef test_end_other_11():\n    assert end_other('12', '12') == True\n\n\ndef test_end_other_12():\n    assert end_other('abcXYZ', 'abcDEF') == False\n\n\ndef test_end_other_13():\n    assert end_other('ab', 'ab12') == False\n\n\ndef test_end_other_14():\n    assert end_other('ab', '12ab') == True\n\n\n",
                "solution": ""
            },
            {
                "name": "xyz_there",
                "topic": "",
                "requirements": [],
                "description": "Return true if the given string contains an appearance of \"xyz\" where the xyz is not directly preceeded by a period (.). So \"xxyz\" counts but \"x.xyz\" does not.\n\n```\nxyz_there(\"abcxyz\") -> true\nxyz_there(\"abc.xyz\") -> false\nxyz_there(\"xyz.abc\") -> true\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p136594) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def xyz_there(string: str) -> bool:\n    pass\n\n\nresult = xyz_there('abcxyz')\nprint(result)\n",
                "tests": "from main import xyz_there\n\n\ndef test_xyz_there_1():\n    assert xyz_there('abcxyz') == True\n\n\ndef test_xyz_there_2():\n    assert xyz_there('abc.xyz') == False\n\n\ndef test_xyz_there_3():\n    assert xyz_there('xyz.abc') == True\n\n\ndef test_xyz_there_4():\n    assert xyz_there('abcxy') == False\n\n\ndef test_xyz_there_5():\n    assert xyz_there('xyz') == True\n\n\ndef test_xyz_there_6():\n    assert xyz_there('xy') == False\n\n\ndef test_xyz_there_7():\n    assert xyz_there('x') == False\n\n\ndef test_xyz_there_8():\n    assert xyz_there('') == False\n\n\ndef test_xyz_there_9():\n    assert xyz_there('abc.xyzxyz') == True\n\n\ndef test_xyz_there_10():\n    assert xyz_there('abc.xxyz') == True\n\n\ndef test_xyz_there_11():\n    assert xyz_there('.xyz') == False\n\n\ndef test_xyz_there_12():\n    assert xyz_there('12.xyz') == False\n\n\ndef test_xyz_there_13():\n    assert xyz_there('12xyz') == True\n\n\ndef test_xyz_there_14():\n    assert xyz_there('1.xyz.xyz2.xyz') == False\n\n\n",
                "solution": ""
            },
            {
                "name": "bob_there",
                "topic": "",
                "requirements": [],
                "description": "Return true if the given string contains a \"bob\" string, but where the middle 'o' char can be any char.\n\n```\nbob_there(\"abcbob\") -> true\nbob_there(\"b9b\") -> true\nbob_there(\"bac\") -> false\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p175762) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def bob_there(string: str) -> bool:\n    pass\n\n\nresult = bob_there('abcbob')\nprint(result)\n",
                "tests": "from main import bob_there\n\n\ndef test_bob_there_1():\n    assert bob_there('abcbob') == True\n\n\ndef test_bob_there_2():\n    assert bob_there('b9b') == True\n\n\ndef test_bob_there_3():\n    assert bob_there('bac') == False\n\n\ndef test_bob_there_4():\n    assert bob_there('bbb') == True\n\n\ndef test_bob_there_5():\n    assert bob_there('abcdefb') == False\n\n\ndef test_bob_there_6():\n    assert bob_there('123abcbcdbabxyz') == True\n\n\ndef test_bob_there_7():\n    assert bob_there('b12') == False\n\n\ndef test_bob_there_8():\n    assert bob_there('b1b') == True\n\n\ndef test_bob_there_9():\n    assert bob_there('b12b1b') == True\n\n\ndef test_bob_there_10():\n    assert bob_there('bbc') == False\n\n\ndef test_bob_there_11():\n    assert bob_there('bbb') == True\n\n\ndef test_bob_there_12():\n    assert bob_there('bb') == False\n\n\ndef test_bob_there_13():\n    assert bob_there('b') == False\n\n\n",
                "solution": ""
            },
            {
                "name": "xy_balance",
                "topic": "",
                "requirements": [],
                "description": "We'll say that a String is xy-balanced if for all the 'x' chars in the string, there exists a 'y' char somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.\n\n```\nxy_balance(\"aaxbby\") -> true\nxy_balance(\"aaxbb\") -> false\nxy_balance(\"yaaxbb\") -> false\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p134250) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def xy_balance(string: str) -> bool:\n    pass\n\n\nresult = xy_balance('aaxbby')\nprint(result)\n",
                "tests": "from main import xy_balance\n\n\ndef test_xy_balance_1():\n    assert xy_balance('aaxbby') == True\n\n\ndef test_xy_balance_2():\n    assert xy_balance('aaxbb') == False\n\n\ndef test_xy_balance_3():\n    assert xy_balance('yaaxbb') == False\n\n\ndef test_xy_balance_4():\n    assert xy_balance('yaaxbby') == True\n\n\ndef test_xy_balance_5():\n    assert xy_balance('xaxxbby') == True\n\n\ndef test_xy_balance_6():\n    assert xy_balance('xaxxbbyx') == False\n\n\ndef test_xy_balance_7():\n    assert xy_balance('xxbxy') == True\n\n\ndef test_xy_balance_8():\n    assert xy_balance('xxbx') == False\n\n\ndef test_xy_balance_9():\n    assert xy_balance('bbb') == True\n\n\ndef test_xy_balance_10():\n    assert xy_balance('bxbb') == False\n\n\ndef test_xy_balance_11():\n    assert xy_balance('bxyb') == True\n\n\ndef test_xy_balance_12():\n    assert xy_balance('xy') == True\n\n\ndef test_xy_balance_13():\n    assert xy_balance('y') == True\n\n\ndef test_xy_balance_14():\n    assert xy_balance('x') == False\n\n\ndef test_xy_balance_15():\n    assert xy_balance('') == True\n\n\ndef test_xy_balance_16():\n    assert xy_balance('yxyxyxyx') == False\n\n\ndef test_xy_balance_17():\n    assert xy_balance('yxyxyxyxy') == True\n\n\ndef test_xy_balance_18():\n    assert xy_balance('12xabxxydxyxyzz') == True\n\n\n",
                "solution": ""
            },
            {
                "name": "mix_string",
                "topic": "",
                "requirements": [],
                "description": "Given two strings, <b>a</b> and <b>b</b>, create a bigger string made of the first char of a, the first char of b, the second char of a, the second char of b, and so on. Any leftover chars go at the end of the result.\n\n```\nmix_string(\"abc\", \"xyz\") -> \"axbycz\"\nmix_string(\"Hi\", \"There\") -> \"HTihere\"\nmix_string(\"xxxx\", \"There\") -> \"xTxhxexre\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p125185) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def mix_string(a: str, b: str) -> str:\n    pass\n\n\nresult = mix_string('abc', 'xyz')\nprint(result)\n",
                "tests": "from main import mix_string\n\n\ndef test_mix_string_1():\n    assert mix_string('abc', 'xyz') == 'axbycz'\n\n\ndef test_mix_string_2():\n    assert mix_string('Hi', 'There') == 'HTihere'\n\n\ndef test_mix_string_3():\n    assert mix_string('xxxx', 'There') == 'xTxhxexre'\n\n\ndef test_mix_string_4():\n    assert mix_string('xxx', 'X') == 'xXxx'\n\n\ndef test_mix_string_5():\n    assert mix_string('2/', '27 around') == '22/7 around'\n\n\ndef test_mix_string_6():\n    assert mix_string('', 'Hello') == 'Hello'\n\n\ndef test_mix_string_7():\n    assert mix_string('Abc', '') == 'Abc'\n\n\ndef test_mix_string_8():\n    assert mix_string('', '') == ''\n\n\ndef test_mix_string_9():\n    assert mix_string('a', 'b') == 'ab'\n\n\ndef test_mix_string_10():\n    assert mix_string('ax', 'b') == 'abx'\n\n\ndef test_mix_string_11():\n    assert mix_string('a', 'bx') == 'abx'\n\n\ndef test_mix_string_12():\n    assert mix_string('So', 'Long') == 'SLoong'\n\n\ndef test_mix_string_13():\n    assert mix_string('Long', 'So') == 'LSoong'\n\n\n",
                "solution": ""
            },
            {
                "name": "repeat_end",
                "topic": "",
                "requirements": [],
                "description": "Given a string and an int n, return a string made of n repetitions of the last n characters of the string. You may assume that n is between 0 and the length of the string, inclusive.\n\n```\nrepeat_end(\"Hello\", 3) -> \"llollollo\"\nrepeat_end(\"Hello\", 2) -> \"lolo\"\nrepeat_end(\"Hello\", 1) -> \"o\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p152339) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def repeat_end(string: str, n: int) -> str:\n    pass\n\n\nresult = repeat_end('Hello', 3)\nprint(result)\n",
                "tests": "from main import repeat_end\n\n\ndef test_repeat_end_1():\n    assert repeat_end('Hello', 3) == 'llollollo'\n\n\ndef test_repeat_end_2():\n    assert repeat_end('Hello', 2) == 'lolo'\n\n\ndef test_repeat_end_3():\n    assert repeat_end('Hello', 1) == 'o'\n\n\ndef test_repeat_end_4():\n    assert repeat_end('Hello', 0) == ''\n\n\ndef test_repeat_end_5():\n    assert repeat_end('abc', 3) == 'abcabcabc'\n\n\ndef test_repeat_end_6():\n    assert repeat_end('1234', 2) == '3434'\n\n\ndef test_repeat_end_7():\n    assert repeat_end('1234', 3) == '234234234'\n\n\ndef test_repeat_end_8():\n    assert repeat_end('', 0) == ''\n\n\n",
                "solution": ""
            },
            {
                "name": "repeat_front",
                "topic": "",
                "requirements": [
                    "substrings and slicing",
                    "loop with a counter variable",
                    "string building and filtering"
                ],
                "description": "Given a string and an int n, return a string made of the first n characters of the string, followed by the first n-1 characters of the string, and so on. You may assume that n is between 0 and the length of the string, inclusive (i.e. n &gt;= 0 and n &lt;= str.length()).\n\n```\nrepeat_front(\"Chocolate\", 4) -> \"ChocChoChC\"\nrepeat_front(\"Chocolate\", 3) -> \"ChoChC\"\nrepeat_front(\"Ice Cream\", 2) -> \"IcI\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p128796) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def repeat_front(string: str, n: int) -> str:\n    pass\n\n\nresult = repeat_front('Chocolate', 4)\nprint(result)\n",
                "tests": "from main import repeat_front\n\n\ndef test_repeat_front_1():\n    assert repeat_front('Chocolate', 4) == 'ChocChoChC'\n\n\ndef test_repeat_front_2():\n    assert repeat_front('Chocolate', 3) == 'ChoChC'\n\n\ndef test_repeat_front_3():\n    assert repeat_front('Ice Cream', 2) == 'IcI'\n\n\ndef test_repeat_front_4():\n    assert repeat_front('Ice Cream', 1) == 'I'\n\n\ndef test_repeat_front_5():\n    assert repeat_front('Ice Cream', 0) == ''\n\n\ndef test_repeat_front_6():\n    assert repeat_front('xyz', 3) == 'xyzxyx'\n\n\ndef test_repeat_front_7():\n    assert repeat_front('', 0) == ''\n\n\ndef test_repeat_front_8():\n    assert repeat_front('Java', 4) == 'JavaJavJaJ'\n\n\ndef test_repeat_front_9():\n    assert repeat_front('Java', 1) == 'J'\n\n\n",
                "solution": ""
            },
            {
                "name": "repeat_separator",
                "topic": "",
                "requirements": [],
                "description": "Given two strings, <b>word</b> and a separator <b>sep</b>, return a big string made of <b>count</b> occurrences of the word, separated by the separator string.\n\n```\nrepeat_separator(\"Word\", \"X\", 3) -> \"WordXWordXWord\"\nrepeat_separator(\"This\", \"And\", 2) -> \"ThisAndThis\"\nrepeat_separator(\"This\", \"And\", 1) -> \"This\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p109637) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def repeat_separator(word: str, sep: str, count: int) -> str:\n    pass\n\n\nresult = repeat_separator('Word', 'X', 3)\nprint(result)\n",
                "tests": "from main import repeat_separator\n\n\ndef test_repeat_separator_1():\n    assert repeat_separator('Word', 'X', 3) == 'WordXWordXWord'\n\n\ndef test_repeat_separator_2():\n    assert repeat_separator('This', 'And', 2) == 'ThisAndThis'\n\n\ndef test_repeat_separator_3():\n    assert repeat_separator('This', 'And', 1) == 'This'\n\n\ndef test_repeat_separator_4():\n    assert repeat_separator('Hi', '-n-', 2) == 'Hi-n-Hi'\n\n\ndef test_repeat_separator_5():\n    assert repeat_separator('AAA', '', 1) == 'AAA'\n\n\ndef test_repeat_separator_6():\n    assert repeat_separator('AAA', '', 0) == ''\n\n\ndef test_repeat_separator_7():\n    assert repeat_separator('A', 'B', 5) == 'ABABABABA'\n\n\ndef test_repeat_separator_8():\n    assert repeat_separator('abc', 'XX', 3) == 'abcXXabcXXabc'\n\n\ndef test_repeat_separator_9():\n    assert repeat_separator('abc', 'XX', 2) == 'abcXXabc'\n\n\ndef test_repeat_separator_10():\n    assert repeat_separator('abc', 'XX', 1) == 'abc'\n\n\ndef test_repeat_separator_11():\n    assert repeat_separator('XYZ', 'a', 2) == 'XYZaXYZ'\n\n\n",
                "solution": ""
            },
            {
                "name": "prefix_again",
                "topic": "",
                "requirements": [],
                "description": "Given a string, consider the prefix string made of the first N chars of the string. Does that prefix string appear somewhere else in the string? Assume that the string is not empty and that N is in the range 1..str.length().\n\n```\nprefix_again(\"abXYabc\", 1) -> true\nprefix_again(\"abXYabc\", 2) -> true\nprefix_again(\"abXYabc\", 3) -> false\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p136417) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def prefix_again(string: str, n: int) -> bool:\n    pass\n\n\nresult = prefix_again('abXYabc', 1)\nprint(result)\n",
                "tests": "from main import prefix_again\n\n\ndef test_prefix_again_1():\n    assert prefix_again('abXYabc', 1) == True\n\n\ndef test_prefix_again_2():\n    assert prefix_again('abXYabc', 2) == True\n\n\ndef test_prefix_again_3():\n    assert prefix_again('abXYabc', 3) == False\n\n\ndef test_prefix_again_4():\n    assert prefix_again('xyzxyxyxy', 2) == True\n\n\ndef test_prefix_again_5():\n    assert prefix_again('xyzxyxyxy', 3) == False\n\n\ndef test_prefix_again_6():\n    assert prefix_again('Hi12345Hi6789Hi10', 1) == True\n\n\ndef test_prefix_again_7():\n    assert prefix_again('Hi12345Hi6789Hi10', 2) == True\n\n\ndef test_prefix_again_8():\n    assert prefix_again('Hi12345Hi6789Hi10', 3) == True\n\n\ndef test_prefix_again_9():\n    assert prefix_again('Hi12345Hi6789Hi10', 4) == False\n\n\ndef test_prefix_again_10():\n    assert prefix_again('a', 1) == False\n\n\ndef test_prefix_again_11():\n    assert prefix_again('aa', 1) == True\n\n\ndef test_prefix_again_12():\n    assert prefix_again('ab', 1) == False\n\n\n",
                "solution": ""
            },
            {
                "name": "xyz_middle",
                "topic": "",
                "requirements": [],
                "description": "Given a string, does \"xyz\" appear in the middle of the string? To define middle, we'll say that the number of chars to the left and right of the \"xyz\" must differ by at most one. This problem is harder than it looks.\n\n```\nxyz_middle(\"AAxyzBB\") -> true\nxyz_middle(\"AxyzBB\") -> true\nxyz_middle(\"AxyzBBB\") -> false\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p159772) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def xyz_middle(string: str) -> bool:\n    pass\n\n\nresult = xyz_middle('AAxyzBB')\nprint(result)\n",
                "tests": "from main import xyz_middle\n\n\ndef test_xyz_middle_1():\n    assert xyz_middle('AAxyzBB') == True\n\n\ndef test_xyz_middle_2():\n    assert xyz_middle('AxyzBB') == True\n\n\ndef test_xyz_middle_3():\n    assert xyz_middle('AxyzBBB') == False\n\n\ndef test_xyz_middle_4():\n    assert xyz_middle('AxyzBBBB') == False\n\n\ndef test_xyz_middle_5():\n    assert xyz_middle('AAAxyzB') == False\n\n\ndef test_xyz_middle_6():\n    assert xyz_middle('AAAxyzBB') == True\n\n\ndef test_xyz_middle_7():\n    assert xyz_middle('AAAAxyzBB') == False\n\n\ndef test_xyz_middle_8():\n    assert xyz_middle('AAAAAxyzBBB') == False\n\n\ndef test_xyz_middle_9():\n    assert xyz_middle('1x345xyz12x4') == True\n\n\ndef test_xyz_middle_10():\n    assert xyz_middle('xyzAxyzBBB') == True\n\n\ndef test_xyz_middle_11():\n    assert xyz_middle('xyzAxyzBxyz') == True\n\n\ndef test_xyz_middle_12():\n    assert xyz_middle('xyzxyzAxyzBxyzxyz') == True\n\n\ndef test_xyz_middle_13():\n    assert xyz_middle('xyzxyzxyzBxyzxyz') == True\n\n\ndef test_xyz_middle_14():\n    assert xyz_middle('xyzxyzAxyzxyzxyz') == True\n\n\ndef test_xyz_middle_15():\n    assert xyz_middle('xyzxyzAxyzxyzxy') == False\n\n\ndef test_xyz_middle_16():\n    assert xyz_middle('AxyzxyzBB') == False\n\n\ndef test_xyz_middle_17():\n    assert xyz_middle('') == False\n\n\ndef test_xyz_middle_18():\n    assert xyz_middle('x') == False\n\n\ndef test_xyz_middle_19():\n    assert xyz_middle('xy') == False\n\n\ndef test_xyz_middle_20():\n    assert xyz_middle('xyz') == True\n\n\ndef test_xyz_middle_21():\n    assert xyz_middle('xyzz') == True\n\n\n",
                "solution": ""
            },
            {
                "name": "get_sandwich",
                "topic": "",
                "requirements": [],
                "description": "A sandwich is two pieces of bread with something in between. Return the string that is between the first and last appearance of \"bread\" in the given string, or return the empty string \"\" if there are not two pieces of bread.\n\n```\nget_sandwich(\"breadjambread\") -> \"jam\"\nget_sandwich(\"xxbreadjambreadyy\") -> \"jam\"\nget_sandwich(\"xxbreadyy\") -> \"\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p129952) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def get_sandwich(string: str) -> str:\n    pass\n\n\nresult = get_sandwich('breadjambread')\nprint(result)\n",
                "tests": "from main import get_sandwich\n\n\ndef test_get_sandwich_1():\n    assert get_sandwich('breadjambread') == 'jam'\n\n\ndef test_get_sandwich_2():\n    assert get_sandwich('xxbreadjambreadyy') == 'jam'\n\n\ndef test_get_sandwich_3():\n    assert get_sandwich('xxbreadyy') == ''\n\n\ndef test_get_sandwich_4():\n    assert get_sandwich('xxbreadbreadjambreadyy') == 'breadjam'\n\n\ndef test_get_sandwich_5():\n    assert get_sandwich('breadAbread') == 'A'\n\n\ndef test_get_sandwich_6():\n    assert get_sandwich('breadbread') == ''\n\n\ndef test_get_sandwich_7():\n    assert get_sandwich('abcbreaz') == ''\n\n\ndef test_get_sandwich_8():\n    assert get_sandwich('xyz') == ''\n\n\ndef test_get_sandwich_9():\n    assert get_sandwich('') == ''\n\n\ndef test_get_sandwich_10():\n    assert get_sandwich('breadbreaxbread') == 'breax'\n\n\ndef test_get_sandwich_11():\n    assert get_sandwich('breaxbreadybread') == 'y'\n\n\ndef test_get_sandwich_12():\n    assert get_sandwich('breadbreadbreadbread') == 'breadbread'\n\n\n",
                "solution": ""
            },
            {
                "name": "same_star_char",
                "topic": "",
                "requirements": [],
                "description": "Returns true if for every '*' (star) in the string, if there are chars both immediately before and after the star, they are the same.\n\n```\nsame_star_char(\"xy*yzz\") -> true\nsame_star_char(\"xy*zzz\") -> false\nsame_star_char(\"*xa*az\") -> true\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p194491) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def same_star_char(string: str) -> bool:\n    pass\n\n\nresult = same_star_char('xy*yzz')\nprint(result)\n",
                "tests": "from main import same_star_char\n\n\ndef test_same_star_char_1():\n    assert same_star_char('xy*yzz') == True\n\n\ndef test_same_star_char_2():\n    assert same_star_char('xy*zzz') == False\n\n\ndef test_same_star_char_3():\n    assert same_star_char('*xa*az') == True\n\n\ndef test_same_star_char_4():\n    assert same_star_char('*xa*bz') == False\n\n\ndef test_same_star_char_5():\n    assert same_star_char('*xa*a*') == True\n\n\ndef test_same_star_char_6():\n    assert same_star_char('') == True\n\n\ndef test_same_star_char_7():\n    assert same_star_char('*xa*a*a') == True\n\n\ndef test_same_star_char_8():\n    assert same_star_char('*xa*a*b') == False\n\n\ndef test_same_star_char_9():\n    assert same_star_char('*12*2*2') == True\n\n\ndef test_same_star_char_10():\n    assert same_star_char('12*2*3*') == False\n\n\ndef test_same_star_char_11():\n    assert same_star_char('abcDEF') == True\n\n\ndef test_same_star_char_12():\n    assert same_star_char('XY*YYYY*Z*') == False\n\n\ndef test_same_star_char_13():\n    assert same_star_char('XY*YYYY*Y*') == True\n\n\ndef test_same_star_char_14():\n    assert same_star_char('12*2*3*') == False\n\n\ndef test_same_star_char_15():\n    assert same_star_char('*') == True\n\n\ndef test_same_star_char_16():\n    assert same_star_char('**') == True\n\n\n",
                "solution": ""
            },
            {
                "name": "one_two",
                "topic": "",
                "requirements": [],
                "description": "Given a string, compute a new string by moving the first char to come after the next two chars, so \"abc\" yields \"bca\". Repeat this process for each subsequent group of 3 chars, so \"abcdef\" yields \"bcaefd\". Ignore any group of fewer than 3 chars at the end.\n\n```\none_two(\"abc\") -> \"bca\"\none_two(\"tca\") -> \"cat\"\none_two(\"tcagdo\") -> \"catdog\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p122943) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def one_two(string: str) -> str:\n    pass\n\n\nresult = one_two('abc')\nprint(result)\n",
                "tests": "from main import one_two\n\n\ndef test_one_two_1():\n    assert one_two('abc') == 'bca'\n\n\ndef test_one_two_2():\n    assert one_two('tca') == 'cat'\n\n\ndef test_one_two_3():\n    assert one_two('tcagdo') == 'catdog'\n\n\ndef test_one_two_4():\n    assert one_two('chocolate') == 'hocolctea'\n\n\ndef test_one_two_5():\n    assert one_two('1234567890') == '231564897'\n\n\ndef test_one_two_6():\n    assert one_two('xabxabxabxabxabxabxab') == 'abxabxabxabxabxabxabx'\n\n\ndef test_one_two_7():\n    assert one_two('abcdefx') == 'bcaefd'\n\n\ndef test_one_two_8():\n    assert one_two('abcdefxy') == 'bcaefd'\n\n\ndef test_one_two_9():\n    assert one_two('abcdefxyz') == 'bcaefdyzx'\n\n\ndef test_one_two_10():\n    assert one_two('') == ''\n\n\ndef test_one_two_11():\n    assert one_two('x') == ''\n\n\ndef test_one_two_12():\n    assert one_two('xy') == ''\n\n\ndef test_one_two_13():\n    assert one_two('xyz') == 'yzx'\n\n\ndef test_one_two_14():\n    assert one_two('abcdefghijklkmnopqrstuvwxyz1234567890') == 'bcaefdhigkljmnkpqostrvwuyzx231564897'\n\n\ndef test_one_two_15():\n    assert one_two('abcdefghijklkmnopqrstuvwxyz123456789') == 'bcaefdhigkljmnkpqostrvwuyzx231564897'\n\n\ndef test_one_two_16():\n    assert one_two('abcdefghijklkmnopqrstuvwxyz12345678') == 'bcaefdhigkljmnkpqostrvwuyzx231564'\n\n\n",
                "solution": ""
            },
            {
                "name": "zip_zap",
                "topic": "",
                "requirements": [],
                "description": "Look for patterns like \"zip\" and \"zap\" in the string -- length-3, starting with 'z' and ending with 'p'. Return a string where for all such words, the middle letter is gone, so \"zipXzap\" yields \"zpXzp\".\n\n```\nzip_zap(\"zipXzap\") -> \"zpXzp\"\nzip_zap(\"zopzop\") -> \"zpzp\"\nzip_zap(\"zzzopzop\") -> \"zzzpzp\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p180759) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def zip_zap(string: str) -> str:\n    pass\n\n\nresult = zip_zap('zipXzap')\nprint(result)\n",
                "tests": "from main import zip_zap\n\n\ndef test_zip_zap_1():\n    assert zip_zap('zipXzap') == 'zpXzp'\n\n\ndef test_zip_zap_2():\n    assert zip_zap('zopzop') == 'zpzp'\n\n\ndef test_zip_zap_3():\n    assert zip_zap('zzzopzop') == 'zzzpzp'\n\n\ndef test_zip_zap_4():\n    assert zip_zap('zibzap') == 'zibzp'\n\n\ndef test_zip_zap_5():\n    assert zip_zap('zip') == 'zp'\n\n\ndef test_zip_zap_6():\n    assert zip_zap('zi') == 'zi'\n\n\ndef test_zip_zap_7():\n    assert zip_zap('z') == 'z'\n\n\ndef test_zip_zap_8():\n    assert zip_zap('') == ''\n\n\ndef test_zip_zap_9():\n    assert zip_zap('zzp') == 'zp'\n\n\ndef test_zip_zap_10():\n    assert zip_zap('abcppp') == 'abcppp'\n\n\ndef test_zip_zap_11():\n    assert zip_zap('azbcppp') == 'azbcppp'\n\n\ndef test_zip_zap_12():\n    assert zip_zap('azbcpzpp') == 'azbcpzp'\n\n\n",
                "solution": ""
            },
            {
                "name": "star_out",
                "topic": "",
                "requirements": [],
                "description": "Return a version of the given string, where for every star (*) in the string the star and the chars immediately to its left and right are gone. So \"ab*cd\" yields \"ad\" and \"ab**cd\" also yields \"ad\".\n\n```\nstar_out(\"ab*cd\") -> \"ad\"\nstar_out(\"ab**cd\") -> \"ad\"\nstar_out(\"sm*eilly\") -> \"silly\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p139564) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def star_out(string: str) -> str:\n    pass\n\n\nresult = star_out('ab*cd')\nprint(result)\n",
                "tests": "from main import star_out\n\n\ndef test_star_out_1():\n    assert star_out('ab*cd') == 'ad'\n\n\ndef test_star_out_2():\n    assert star_out('ab**cd') == 'ad'\n\n\ndef test_star_out_3():\n    assert star_out('sm*eilly') == 'silly'\n\n\ndef test_star_out_4():\n    assert star_out('sm*eil*ly') == 'siy'\n\n\ndef test_star_out_5():\n    assert star_out('sm**eil*ly') == 'siy'\n\n\ndef test_star_out_6():\n    assert star_out('sm***eil*ly') == 'siy'\n\n\ndef test_star_out_7():\n    assert star_out('stringy*') == 'string'\n\n\ndef test_star_out_8():\n    assert star_out('*stringy') == 'tringy'\n\n\ndef test_star_out_9():\n    assert star_out('*str*in*gy') == 'ty'\n\n\ndef test_star_out_10():\n    assert star_out('abc') == 'abc'\n\n\ndef test_star_out_11():\n    assert star_out('a*bc') == 'c'\n\n\ndef test_star_out_12():\n    assert star_out('ab') == 'ab'\n\n\ndef test_star_out_13():\n    assert star_out('a*b') == ''\n\n\ndef test_star_out_14():\n    assert star_out('a') == 'a'\n\n\ndef test_star_out_15():\n    assert star_out('a*') == ''\n\n\ndef test_star_out_16():\n    assert star_out('*a') == ''\n\n\ndef test_star_out_17():\n    assert star_out('*') == ''\n\n\ndef test_star_out_18():\n    assert star_out('') == ''\n\n\n",
                "solution": ""
            },
            {
                "name": "plus_out",
                "topic": "",
                "requirements": [],
                "description": "Given a string and a non-empty <b>word</b> string, return a version of the original String where all chars have been replaced by pluses (\"+\"), except for appearances of the word string which are preserved unchanged.\n\n```\nplus_out(\"12xy34\", \"xy\") -> \"++xy++\"\nplus_out(\"12xy34\", \"1\") -> \"1+++++\"\nplus_out(\"12xy34xyabcxy\", \"xy\") -> \"++xy++xy+++xy\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p170829) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def plus_out(string: str, word: str) -> str:\n    pass\n\n\nresult = plus_out('12xy34', 'xy')\nprint(result)\n",
                "tests": "from main import plus_out\n\n\ndef test_plus_out_1():\n    assert plus_out('12xy34', 'xy') == '++xy++'\n\n\ndef test_plus_out_2():\n    assert plus_out('12xy34', '1') == '1+++++'\n\n\ndef test_plus_out_3():\n    assert plus_out('12xy34xyabcxy', 'xy') == '++xy++xy+++xy'\n\n\ndef test_plus_out_4():\n    assert plus_out('abXYabcXYZ', 'ab') == 'ab++ab++++'\n\n\ndef test_plus_out_5():\n    assert plus_out('abXYabcXYZ', 'abc') == '++++abc+++'\n\n\ndef test_plus_out_6():\n    assert plus_out('abXYabcXYZ', 'XY') == '++XY+++XY+'\n\n\ndef test_plus_out_7():\n    assert plus_out('abXYxyzXYZ', 'XYZ') == '+++++++XYZ'\n\n\ndef test_plus_out_8():\n    assert plus_out('--++ab', '++') == '++++++'\n\n\ndef test_plus_out_9():\n    assert plus_out('aaxxxxbb', 'xx') == '++xxxx++'\n\n\ndef test_plus_out_10():\n    assert plus_out('123123', '3') == '++3++3'\n\n\n",
                "solution": ""
            },
            {
                "name": "word_ends",
                "topic": "",
                "requirements": [],
                "description": "Given a string and a non-empty <b>word</b> string, return a string made of each char just before and just after every appearance of the word in the string. Ignore cases where there is no char before or after the word, and a char may be included twice if it is between two words.\n\n```\nword_ends(\"abcXY123XYijk\", \"XY\") -> \"c13i\"\nword_ends(\"XY123XY\", \"XY\") -> \"13\"\nword_ends(\"XY1XY\", \"XY\") -> \"11\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p147538) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def word_ends(string: str, word: str) -> str:\n    pass\n\n\nresult = word_ends('abcXY123XYijk', 'XY')\nprint(result)\n",
                "tests": "from main import word_ends\n\n\ndef test_word_ends_1():\n    assert word_ends('abcXY123XYijk', 'XY') == 'c13i'\n\n\ndef test_word_ends_2():\n    assert word_ends('XY123XY', 'XY') == '13'\n\n\ndef test_word_ends_3():\n    assert word_ends('XY1XY', 'XY') == '11'\n\n\ndef test_word_ends_4():\n    assert word_ends('XYXY', 'XY') == 'XY'\n\n\ndef test_word_ends_5():\n    assert word_ends('XY', 'XY') == ''\n\n\ndef test_word_ends_6():\n    assert word_ends('Hi', 'XY') == ''\n\n\ndef test_word_ends_7():\n    assert word_ends('', 'XY') == ''\n\n\ndef test_word_ends_8():\n    assert word_ends('abc1xyz1i1j', '1') == 'cxziij'\n\n\ndef test_word_ends_9():\n    assert word_ends('abc1xyz1', '1') == 'cxz'\n\n\ndef test_word_ends_10():\n    assert word_ends('abc1xyz11', '1') == 'cxz11'\n\n\ndef test_word_ends_11():\n    assert word_ends('abc1xyz1abc', 'abc') == '11'\n\n\ndef test_word_ends_12():\n    assert word_ends('abc1xyz1abc', 'b') == 'acac'\n\n\ndef test_word_ends_13():\n    assert word_ends('abc1abc1abc', 'abc') == '1111'\n\n\n",
                "solution": ""
            }
        ],
        "Warmup-1": [
            {
                "name": "sleep_in",
                "topic": "",
                "requirements": [],
                "description": "The parameter weekday is true if it is a weekday, and the parameter vacation is true if we are on vacation. We sleep in if it is not a weekday or we're on vacation. Return true if we sleep in.\n\n```\nsleep_in(false, false) -> true\nsleep_in(true, false) -> false\nsleep_in(false, true) -> true\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p187868) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def sleep_in(weekday: bool, vacation: bool) -> bool:\n    pass\n\n\nresult = sleep_in(False, False)\nprint(result)\n",
                "tests": "from main import sleep_in\n\n\ndef test_sleep_in_1():\n    assert sleep_in(False, False) == True\n\n\ndef test_sleep_in_2():\n    assert sleep_in(True, False) == False\n\n\ndef test_sleep_in_3():\n    assert sleep_in(False, True) == True\n\n\ndef test_sleep_in_4():\n    assert sleep_in(True, True) == True\n\n\n",
                "solution": ""
            },
            {
                "name": "monkey_trouble",
                "topic": "",
                "requirements": [],
                "description": "We have two monkeys, a and b, and the parameters aSmile and bSmile indicate if each is smiling. We are in trouble if they are both smiling or if neither of them is smiling. Return true if we are in trouble.\n\n```\nmonkey_trouble(true, true) -> true\nmonkey_trouble(false, false) -> true\nmonkey_trouble(true, false) -> false\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p181646) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def monkey_trouble(a_smile: bool, b_smile: bool) -> bool:\n    pass\n\n\nresult = monkey_trouble(True, True)\nprint(result)\n",
                "tests": "from main import monkey_trouble\n\n\ndef test_monkey_trouble_1():\n    assert monkey_trouble(True, True) == True\n\n\ndef test_monkey_trouble_2():\n    assert monkey_trouble(False, False) == True\n\n\ndef test_monkey_trouble_3():\n    assert monkey_trouble(True, False) == False\n\n\ndef test_monkey_trouble_4():\n    assert monkey_trouble(False, True) == False\n\n\n",
                "solution": ""
            },
            {
                "name": "sum_double",
                "topic": "",
                "requirements": [],
                "description": "Given two int values, return their sum. Unless the two values are the same, then return double their sum.\n\n```\nsum_double(1, 2) -> 3\nsum_double(3, 2) -> 5\nsum_double(2, 2) -> 8\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p154485) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def sum_double(a: int, b: int) -> int:\n    pass\n\n\nresult = sum_double(1, 2)\nprint(result)\n",
                "tests": "from main import sum_double\n\n\ndef test_sum_double_1():\n    assert sum_double(1, 2) == 3\n\n\ndef test_sum_double_2():\n    assert sum_double(3, 2) == 5\n\n\ndef test_sum_double_3():\n    assert sum_double(2, 2) == 8\n\n\ndef test_sum_double_4():\n    assert sum_double(-1, 0) == -1\n\n\ndef test_sum_double_5():\n    assert sum_double(3, 3) == 12\n\n\ndef test_sum_double_6():\n    assert sum_double(0, 0) == 0\n\n\ndef test_sum_double_7():\n    assert sum_double(0, 1) == 1\n\n\ndef test_sum_double_8():\n    assert sum_double(3, 4) == 7\n\n\n",
                "solution": ""
            },
            {
                "name": "diff_21",
                "topic": "",
                "requirements": [],
                "description": "Given an int n, return the absolute difference between n and 21, except return double the absolute difference if n is over 21.\n\n```\ndiff_21(19) -> 2\ndiff_21(10) -> 11\ndiff_21(21) -> 0\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p116624) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def diff_21(n: int) -> int:\n    pass\n\n\nresult = diff_21(19)\nprint(result)\n",
                "tests": "from main import diff_21\n\n\ndef test_diff_21_1():\n    assert diff_21(19) == 2\n\n\ndef test_diff_21_2():\n    assert diff_21(10) == 11\n\n\ndef test_diff_21_3():\n    assert diff_21(21) == 0\n\n\ndef test_diff_21_4():\n    assert diff_21(22) == 2\n\n\ndef test_diff_21_5():\n    assert diff_21(25) == 8\n\n\ndef test_diff_21_6():\n    assert diff_21(30) == 18\n\n\ndef test_diff_21_7():\n    assert diff_21(0) == 21\n\n\ndef test_diff_21_8():\n    assert diff_21(1) == 20\n\n\ndef test_diff_21_9():\n    assert diff_21(2) == 19\n\n\ndef test_diff_21_10():\n    assert diff_21(-1) == 22\n\n\ndef test_diff_21_11():\n    assert diff_21(-2) == 23\n\n\ndef test_diff_21_12():\n    assert diff_21(50) == 58\n\n\n",
                "solution": ""
            },
            {
                "name": "parrot_trouble",
                "topic": "",
                "requirements": [],
                "description": "We have a loud talking parrot. The \"hour\" parameter is the current hour time in the range 0..23. We are in trouble if the parrot is talking and the hour is before 7 or after 20. Return true if we are in trouble.\n\n```\nparrot_trouble(true, 6) -> true\nparrot_trouble(true, 7) -> false\nparrot_trouble(false, 6) -> false\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p140449) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def parrot_trouble(talking: bool, hour: int) -> bool:\n    pass\n\n\nresult = parrot_trouble(True, 6)\nprint(result)\n",
                "tests": "from main import parrot_trouble\n\n\ndef test_parrot_trouble_1():\n    assert parrot_trouble(True, 6) == True\n\n\ndef test_parrot_trouble_2():\n    assert parrot_trouble(True, 7) == False\n\n\ndef test_parrot_trouble_3():\n    assert parrot_trouble(False, 6) == False\n\n\ndef test_parrot_trouble_4():\n    assert parrot_trouble(True, 21) == True\n\n\ndef test_parrot_trouble_5():\n    assert parrot_trouble(False, 21) == False\n\n\ndef test_parrot_trouble_6():\n    assert parrot_trouble(False, 20) == False\n\n\ndef test_parrot_trouble_7():\n    assert parrot_trouble(True, 23) == True\n\n\ndef test_parrot_trouble_8():\n    assert parrot_trouble(False, 23) == False\n\n\ndef test_parrot_trouble_9():\n    assert parrot_trouble(True, 20) == False\n\n\ndef test_parrot_trouble_10():\n    assert parrot_trouble(False, 12) == False\n\n\n",
                "solution": ""
            },
            {
                "name": "makes_10",
                "topic": "",
                "requirements": [],
                "description": "Given 2 ints, a and b, return true if one if them is 10 or if their sum is 10.\n\n```\nmakes_10(9, 10) -> true\nmakes_10(9, 9) -> false\nmakes_10(1, 9) -> true\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p182873) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def makes_10(a: int, b: int) -> bool:\n    pass\n\n\nresult = makes_10(9, 10)\nprint(result)\n",
                "tests": "from main import makes_10\n\n\ndef test_makes_10_1():\n    assert makes_10(9, 10) == True\n\n\ndef test_makes_10_2():\n    assert makes_10(9, 9) == False\n\n\ndef test_makes_10_3():\n    assert makes_10(1, 9) == True\n\n\ndef test_makes_10_4():\n    assert makes_10(10, 1) == True\n\n\ndef test_makes_10_5():\n    assert makes_10(10, 10) == True\n\n\ndef test_makes_10_6():\n    assert makes_10(8, 2) == True\n\n\ndef test_makes_10_7():\n    assert makes_10(8, 3) == False\n\n\ndef test_makes_10_8():\n    assert makes_10(10, 42) == True\n\n\ndef test_makes_10_9():\n    assert makes_10(12, -2) == True\n\n\n",
                "solution": ""
            },
            {
                "name": "near_hundred",
                "topic": "",
                "requirements": [],
                "description": "Given an int n, return true if it is within 10 of 100 or 200. Note: Math.abs(num) computes the absolute value of a number.\n\n```\nnear_hundred(93) -> true\nnear_hundred(90) -> true\nnear_hundred(89) -> false\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p184004) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def near_hundred(n: int) -> bool:\n    pass\n\n\nresult = near_hundred(93)\nprint(result)\n",
                "tests": "from main import near_hundred\n\n\ndef test_near_hundred_1():\n    assert near_hundred(93) == True\n\n\ndef test_near_hundred_2():\n    assert near_hundred(90) == True\n\n\ndef test_near_hundred_3():\n    assert near_hundred(89) == False\n\n\ndef test_near_hundred_4():\n    assert near_hundred(110) == True\n\n\ndef test_near_hundred_5():\n    assert near_hundred(111) == False\n\n\ndef test_near_hundred_6():\n    assert near_hundred(121) == False\n\n\ndef test_near_hundred_7():\n    assert near_hundred(-101) == False\n\n\ndef test_near_hundred_8():\n    assert near_hundred(-209) == False\n\n\ndef test_near_hundred_9():\n    assert near_hundred(190) == True\n\n\ndef test_near_hundred_10():\n    assert near_hundred(209) == True\n\n\ndef test_near_hundred_11():\n    assert near_hundred(0) == False\n\n\ndef test_near_hundred_12():\n    assert near_hundred(5) == False\n\n\ndef test_near_hundred_13():\n    assert near_hundred(-50) == False\n\n\ndef test_near_hundred_14():\n    assert near_hundred(191) == True\n\n\ndef test_near_hundred_15():\n    assert near_hundred(189) == False\n\n\ndef test_near_hundred_16():\n    assert near_hundred(200) == True\n\n\ndef test_near_hundred_17():\n    assert near_hundred(210) == True\n\n\ndef test_near_hundred_18():\n    assert near_hundred(211) == False\n\n\ndef test_near_hundred_19():\n    assert near_hundred(290) == False\n\n\n",
                "solution": ""
            },
            {
                "name": "pos_neg",
                "topic": "",
                "requirements": [],
                "description": "Given 2 int values, return true if one is negative and one is positive. Except if the parameter \"negative\" is true, then return true only if both are negative.\n\n```\npos_neg(1, -1, false) -> true\npos_neg(-1, 1, false) -> true\npos_neg(-4, -5, true) -> true\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p159227) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def pos_neg(a: int, b: int, negative: bool) -> bool:\n    pass\n\n\nresult = pos_neg(1, -1, False)\nprint(result)\n",
                "tests": "from main import pos_neg\n\n\ndef test_pos_neg_1():\n    assert pos_neg(1, -1, False) == True\n\n\ndef test_pos_neg_2():\n    assert pos_neg(-1, 1, False) == True\n\n\ndef test_pos_neg_3():\n    assert pos_neg(-4, -5, True) == True\n\n\ndef test_pos_neg_4():\n    assert pos_neg(-4, -5, False) == False\n\n\ndef test_pos_neg_5():\n    assert pos_neg(-4, 5, False) == True\n\n\ndef test_pos_neg_6():\n    assert pos_neg(-4, 5, True) == False\n\n\ndef test_pos_neg_7():\n    assert pos_neg(1, 1, False) == False\n\n\ndef test_pos_neg_8():\n    assert pos_neg(-1, -1, False) == False\n\n\ndef test_pos_neg_9():\n    assert pos_neg(1, -1, True) == False\n\n\ndef test_pos_neg_10():\n    assert pos_neg(-1, 1, True) == False\n\n\ndef test_pos_neg_11():\n    assert pos_neg(1, 1, True) == False\n\n\ndef test_pos_neg_12():\n    assert pos_neg(-1, -1, True) == True\n\n\ndef test_pos_neg_13():\n    assert pos_neg(5, -5, False) == True\n\n\ndef test_pos_neg_14():\n    assert pos_neg(-6, 6, False) == True\n\n\ndef test_pos_neg_15():\n    assert pos_neg(-5, -6, False) == False\n\n\ndef test_pos_neg_16():\n    assert pos_neg(-2, -1, False) == False\n\n\ndef test_pos_neg_17():\n    assert pos_neg(1, 2, False) == False\n\n\ndef test_pos_neg_18():\n    assert pos_neg(-5, 6, True) == False\n\n\ndef test_pos_neg_19():\n    assert pos_neg(-5, -5, True) == True\n\n\n",
                "solution": ""
            },
            {
                "name": "not_string",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a new string where \"not \" has been added to the front. However, if the string already begins with \"not\", return the string unchanged. Note: use .equals() to compare 2 strings.\n\n```\nnot_string(\"candy\") -> \"not candy\"\nnot_string(\"x\") -> \"not x\"\nnot_string(\"not bad\") -> \"not bad\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p191914) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def not_string(string: str) -> str:\n    pass\n\n\nresult = not_string('candy')\nprint(result)\n",
                "tests": "from main import not_string\n\n\ndef test_not_string_1():\n    assert not_string('candy') == 'not candy'\n\n\ndef test_not_string_2():\n    assert not_string('x') == 'not x'\n\n\ndef test_not_string_3():\n    assert not_string('not bad') == 'not bad'\n\n\ndef test_not_string_4():\n    assert not_string('bad') == 'not bad'\n\n\ndef test_not_string_5():\n    assert not_string('not') == 'not'\n\n\ndef test_not_string_6():\n    assert not_string('is not') == 'not is not'\n\n\ndef test_not_string_7():\n    assert not_string('no') == 'not no'\n\n\n",
                "solution": ""
            },
            {
                "name": "missing_char",
                "topic": "",
                "requirements": [],
                "description": "Given a non-empty string and an int n, return a new string where the char at index n has been removed. The value of n will be a valid index of a char in the original string (i.e. n will be in the range 0..str.length()-1 inclusive).\n\n```\nmissing_char(\"kitten\", 1) -> \"ktten\"\nmissing_char(\"kitten\", 0) -> \"itten\"\nmissing_char(\"kitten\", 4) -> \"kittn\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p190570) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def missing_char(string: str, n: int) -> str:\n    pass\n\n\nresult = missing_char('kitten', 1)\nprint(result)\n",
                "tests": "from main import missing_char\n\n\ndef test_missing_char_1():\n    assert missing_char('kitten', 1) == 'ktten'\n\n\ndef test_missing_char_2():\n    assert missing_char('kitten', 0) == 'itten'\n\n\ndef test_missing_char_3():\n    assert missing_char('kitten', 4) == 'kittn'\n\n\ndef test_missing_char_4():\n    assert missing_char('Hi', 0) == 'i'\n\n\ndef test_missing_char_5():\n    assert missing_char('Hi', 1) == 'H'\n\n\ndef test_missing_char_6():\n    assert missing_char('code', 0) == 'ode'\n\n\ndef test_missing_char_7():\n    assert missing_char('code', 1) == 'cde'\n\n\ndef test_missing_char_8():\n    assert missing_char('code', 2) == 'coe'\n\n\ndef test_missing_char_9():\n    assert missing_char('code', 3) == 'cod'\n\n\ndef test_missing_char_10():\n    assert missing_char('chocolate', 8) == 'chocolat'\n\n\n",
                "solution": ""
            },
            {
                "name": "front_back",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a new string where the first and last chars have been exchanged.\n\n```\nfront_back(\"code\") -> \"eodc\"\nfront_back(\"a\") -> \"a\"\nfront_back(\"ab\") -> \"ba\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p123384) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def front_back(string: str) -> str:\n    pass\n\n\nresult = front_back('code')\nprint(result)",
                "tests": "from main import front_back\n\n\ndef test_front_back_1():\n    assert front_back('code') == 'eodc'\n\n\ndef test_front_back_2():\n    assert front_back('a') == 'a'\n\n\ndef test_front_back_3():\n    assert front_back('ab') == 'ba'\n\n\ndef test_front_back_4():\n    assert front_back('abc') == 'cba'\n\n\ndef test_front_back_5():\n    assert front_back('') == ''\n\n\ndef test_front_back_6():\n    assert front_back('Chocolate') == 'ehocolatC'\n\n\ndef test_front_back_7():\n    assert front_back('aavJ') == 'Java'\n\n\ndef test_front_back_8():\n    assert front_back('hello') == 'oellh'",
                "solution": "def repeat_front(string: str, n: int) -> str:\n    new_string = \"\"\n    slice_size = n\n    while slice_size > 0:\n        new_string += string[0:slice_size]\n        slice_size -= 1\n\n    return new_string"
            },
            {
                "name": "front_3",
                "topic": "",
                "requirements": [],
                "description": "Given a string, we'll say that the front is the first 3 chars of the string. If the string length is less than 3, the front is whatever is there. Return a new string which is 3 copies of the front.\n\n```\nfront_3(\"Java\") -> \"JavJavJav\"\nfront_3(\"Chocolate\") -> \"ChoChoCho\"\nfront_3(\"abc\") -> \"abcabcabc\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p136351) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def front_3(string: str) -> str:\n    pass\n\n\nresult = front_3('Java')\nprint(result)\n",
                "tests": "from main import front_3\n\n\ndef test_front_3_1():\n    assert front_3('Java') == 'JavJavJav'\n\n\ndef test_front_3_2():\n    assert front_3('Chocolate') == 'ChoChoCho'\n\n\ndef test_front_3_3():\n    assert front_3('abc') == 'abcabcabc'\n\n\ndef test_front_3_4():\n    assert front_3('abcXYZ') == 'abcabcabc'\n\n\ndef test_front_3_5():\n    assert front_3('ab') == 'ababab'\n\n\ndef test_front_3_6():\n    assert front_3('a') == 'aaa'\n\n\ndef test_front_3_7():\n    assert front_3('') == ''\n\n\n",
                "solution": ""
            },
            {
                "name": "back_around",
                "topic": "",
                "requirements": [],
                "description": "Given a string, take the last char and return a new string with the last char added at the front and back, so \"cat\" yields \"tcatt\". The original string will be length 1 or more.\n\n```\nback_around(\"cat\") -> \"tcatt\"\nback_around(\"Hello\") -> \"oHelloo\"\nback_around(\"a\") -> \"aaa\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p161642) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def back_around(string: str) -> str:\n    pass\n\n\nresult = back_around('cat')\nprint(result)\n",
                "tests": "from main import back_around\n\n\ndef test_back_around_1():\n    assert back_around('cat') == 'tcatt'\n\n\ndef test_back_around_2():\n    assert back_around('Hello') == 'oHelloo'\n\n\ndef test_back_around_3():\n    assert back_around('a') == 'aaa'\n\n\ndef test_back_around_4():\n    assert back_around('abc') == 'cabcc'\n\n\ndef test_back_around_5():\n    assert back_around('read') == 'dreadd'\n\n\ndef test_back_around_6():\n    assert back_around('boo') == 'obooo'\n\n\n",
                "solution": ""
            },
            {
                "name": "or_35",
                "topic": "",
                "requirements": [],
                "description": "Return true if the given non-negative number is a multiple of 3 or a multiple of 5. Use the % \"mod\" operator -- see <a href=/doc/practice/mod-introduction.html>Introduction to Mod</a>\n\n```\nor_35(3) -> true\nor_35(10) -> true\nor_35(8) -> false\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p112564) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def or_35(n: int) -> bool:\n    pass\n\n\nresult = or_35(3)\nprint(result)\n",
                "tests": "from main import or_35\n\n\ndef test_or_35_1():\n    assert or_35(3) == True\n\n\ndef test_or_35_2():\n    assert or_35(10) == True\n\n\ndef test_or_35_3():\n    assert or_35(8) == False\n\n\ndef test_or_35_4():\n    assert or_35(15) == True\n\n\ndef test_or_35_5():\n    assert or_35(5) == True\n\n\ndef test_or_35_6():\n    assert or_35(9) == True\n\n\ndef test_or_35_7():\n    assert or_35(4) == False\n\n\ndef test_or_35_8():\n    assert or_35(7) == False\n\n\ndef test_or_35_9():\n    assert or_35(6) == True\n\n\ndef test_or_35_10():\n    assert or_35(17) == False\n\n\ndef test_or_35_11():\n    assert or_35(18) == True\n\n\ndef test_or_35_12():\n    assert or_35(29) == False\n\n\ndef test_or_35_13():\n    assert or_35(20) == True\n\n\ndef test_or_35_14():\n    assert or_35(21) == True\n\n\ndef test_or_35_15():\n    assert or_35(22) == False\n\n\ndef test_or_35_16():\n    assert or_35(45) == True\n\n\ndef test_or_35_17():\n    assert or_35(99) == True\n\n\ndef test_or_35_18():\n    assert or_35(100) == True\n\n\ndef test_or_35_19():\n    assert or_35(101) == False\n\n\ndef test_or_35_20():\n    assert or_35(121) == False\n\n\ndef test_or_35_21():\n    assert or_35(122) == False\n\n\ndef test_or_35_22():\n    assert or_35(123) == True\n\n\n",
                "solution": ""
            },
            {
                "name": "front_22",
                "topic": "",
                "requirements": [],
                "description": "Given a string, take the first 2 chars and return the string with the 2 chars added at both the front and back, so \"kitten\" yields\"kikittenki\". If the string length is less than 2, use whatever chars are there.\n\n```\nfront_22(\"kitten\") -> \"kikittenki\"\nfront_22(\"Ha\") -> \"HaHaHa\"\nfront_22(\"abc\") -> \"ababcab\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p183592) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def front_22(string: str) -> str:\n    pass\n\n\nresult = front_22('kitten')\nprint(result)\n",
                "tests": "from main import front_22\n\n\ndef test_front_22_1():\n    assert front_22('kitten') == 'kikittenki'\n\n\ndef test_front_22_2():\n    assert front_22('Ha') == 'HaHaHa'\n\n\ndef test_front_22_3():\n    assert front_22('abc') == 'ababcab'\n\n\ndef test_front_22_4():\n    assert front_22('ab') == 'ababab'\n\n\ndef test_front_22_5():\n    assert front_22('a') == 'aaa'\n\n\ndef test_front_22_6():\n    assert front_22('') == ''\n\n\ndef test_front_22_7():\n    assert front_22('Logic') == 'LoLogicLo'\n\n\n",
                "solution": ""
            },
            {
                "name": "start_hi",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return true if the string starts with \"hi\" and false otherwise.\n\n```\nstart_hi(\"hi there\") -> true\nstart_hi(\"hi\") -> true\nstart_hi(\"hello hi\") -> false\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p191022) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def start_hi(string: str) -> bool:\n    pass\n\n\nresult = start_hi('hi there')\nprint(result)\n",
                "tests": "from main import start_hi\n\n\ndef test_start_hi_1():\n    assert start_hi('hi there') == True\n\n\ndef test_start_hi_2():\n    assert start_hi('hi') == True\n\n\ndef test_start_hi_3():\n    assert start_hi('hello hi') == False\n\n\ndef test_start_hi_4():\n    assert start_hi('he') == False\n\n\ndef test_start_hi_5():\n    assert start_hi('h') == False\n\n\ndef test_start_hi_6():\n    assert start_hi('') == False\n\n\ndef test_start_hi_7():\n    assert start_hi('ho hi') == False\n\n\ndef test_start_hi_8():\n    assert start_hi('hi ho') == True\n\n\n",
                "solution": ""
            },
            {
                "name": "icy_hot",
                "topic": "",
                "requirements": [],
                "description": "Given two temperatures, return true if one is less than 0 and the other is greater than 100.\n\n```\nicy_hot(120, -1) -> true\nicy_hot(-1, 120) -> true\nicy_hot(2, 120) -> false\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p192082) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def icy_hot(temp_1: int, temp_2: int) -> bool:\n    pass\n\n\nresult = icy_hot(120, -1)\nprint(result)\n",
                "tests": "from main import icy_hot\n\n\ndef test_icy_hot_1():\n    assert icy_hot(120, -1) == True\n\n\ndef test_icy_hot_2():\n    assert icy_hot(-1, 120) == True\n\n\ndef test_icy_hot_3():\n    assert icy_hot(2, 120) == False\n\n\ndef test_icy_hot_4():\n    assert icy_hot(-1, 100) == False\n\n\ndef test_icy_hot_5():\n    assert icy_hot(-2, -2) == False\n\n\ndef test_icy_hot_6():\n    assert icy_hot(120, 120) == False\n\n\n",
                "solution": ""
            },
            {
                "name": "in_1020",
                "topic": "",
                "requirements": [],
                "description": "Given 2 int values, return true if either of them is in the range 10..20 inclusive.\n\n```\nin_1020(12, 99) -> true\nin_1020(21, 12) -> true\nin_1020(8, 99) -> false\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p144535) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def in_1020(a: int, b: int) -> bool:\n    pass\n\n\nresult = in_1020(12, 99)\nprint(result)\n",
                "tests": "from main import in_1020\n\n\ndef test_in_1020_1():\n    assert in_1020(12, 99) == True\n\n\ndef test_in_1020_2():\n    assert in_1020(21, 12) == True\n\n\ndef test_in_1020_3():\n    assert in_1020(8, 99) == False\n\n\ndef test_in_1020_4():\n    assert in_1020(99, 10) == True\n\n\ndef test_in_1020_5():\n    assert in_1020(20, 20) == True\n\n\ndef test_in_1020_6():\n    assert in_1020(21, 21) == False\n\n\ndef test_in_1020_7():\n    assert in_1020(9, 9) == False\n\n\n",
                "solution": ""
            },
            {
                "name": "has_teen",
                "topic": "",
                "requirements": [],
                "description": "We'll say that a number is \"teen\" if it is in the range 13..19 inclusive. Given 3 int values, return true if 1 or more of them are teen.\n\n```\nhas_teen(13, 20, 10) -> true\nhas_teen(20, 19, 10) -> true\nhas_teen(20, 10, 13) -> true\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p178986) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def has_teen(a: int, b: int, c: int) -> bool:\n    pass\n\n\nresult = has_teen(13, 20, 10)\nprint(result)\n",
                "tests": "from main import has_teen\n\n\ndef test_has_teen_1():\n    assert has_teen(13, 20, 10) == True\n\n\ndef test_has_teen_2():\n    assert has_teen(20, 19, 10) == True\n\n\ndef test_has_teen_3():\n    assert has_teen(20, 10, 13) == True\n\n\ndef test_has_teen_4():\n    assert has_teen(1, 20, 12) == False\n\n\ndef test_has_teen_5():\n    assert has_teen(19, 20, 12) == True\n\n\ndef test_has_teen_6():\n    assert has_teen(12, 20, 19) == True\n\n\ndef test_has_teen_7():\n    assert has_teen(12, 9, 20) == False\n\n\ndef test_has_teen_8():\n    assert has_teen(12, 18, 20) == True\n\n\ndef test_has_teen_9():\n    assert has_teen(14, 2, 20) == True\n\n\ndef test_has_teen_10():\n    assert has_teen(4, 2, 20) == False\n\n\ndef test_has_teen_11():\n    assert has_teen(11, 22, 22) == False\n\n\n",
                "solution": ""
            },
            {
                "name": "lone_teen",
                "topic": "",
                "requirements": [],
                "description": "We'll say that a number is \"teen\" if it is in the range 13..19 inclusive. Given 2 int values, return true if one or the other is teen, but not both.\n\n```\nlone_teen(13, 99) -> true\nlone_teen(21, 19) -> true\nlone_teen(13, 13) -> false\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p165701) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def lone_teen(a: int, b: int) -> bool:\n    pass\n\n\nresult = lone_teen(13, 99)\nprint(result)\n",
                "tests": "from main import lone_teen\n\n\ndef test_lone_teen_1():\n    assert lone_teen(13, 99) == True\n\n\ndef test_lone_teen_2():\n    assert lone_teen(21, 19) == True\n\n\ndef test_lone_teen_3():\n    assert lone_teen(13, 13) == False\n\n\ndef test_lone_teen_4():\n    assert lone_teen(14, 20) == True\n\n\ndef test_lone_teen_5():\n    assert lone_teen(20, 15) == True\n\n\ndef test_lone_teen_6():\n    assert lone_teen(16, 17) == False\n\n\ndef test_lone_teen_7():\n    assert lone_teen(16, 9) == True\n\n\ndef test_lone_teen_8():\n    assert lone_teen(16, 18) == False\n\n\ndef test_lone_teen_9():\n    assert lone_teen(13, 19) == False\n\n\ndef test_lone_teen_10():\n    assert lone_teen(13, 20) == True\n\n\ndef test_lone_teen_11():\n    assert lone_teen(6, 18) == True\n\n\ndef test_lone_teen_12():\n    assert lone_teen(99, 13) == True\n\n\ndef test_lone_teen_13():\n    assert lone_teen(99, 99) == False\n\n\n",
                "solution": ""
            },
            {
                "name": "del_del",
                "topic": "",
                "requirements": [],
                "description": "Given a string, if the string \"del\" appears starting at index 1, return a string where that \"del\" has been deleted. Otherwise, return the string unchanged.\n\n```\ndel_del(\"adelbc\") -> \"abc\"\ndel_del(\"adelHello\") -> \"aHello\"\ndel_del(\"adedbc\") -> \"adedbc\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p100905) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def del_del(string: str) -> str:\n    pass\n\n\nresult = del_del('adelbc')\nprint(result)\n",
                "tests": "from main import del_del\n\n\ndef test_del_del_1():\n    assert del_del('adelbc') == 'abc'\n\n\ndef test_del_del_2():\n    assert del_del('adelHello') == 'aHello'\n\n\ndef test_del_del_3():\n    assert del_del('adedbc') == 'adedbc'\n\n\ndef test_del_del_4():\n    assert del_del('abcdel') == 'abcdel'\n\n\ndef test_del_del_5():\n    assert del_del('add') == 'add'\n\n\ndef test_del_del_6():\n    assert del_del('ad') == 'ad'\n\n\ndef test_del_del_7():\n    assert del_del('a') == 'a'\n\n\ndef test_del_del_8():\n    assert del_del('') == ''\n\n\ndef test_del_del_9():\n    assert del_del('del') == 'del'\n\n\ndef test_del_del_10():\n    assert del_del('adel') == 'a'\n\n\ndef test_del_del_11():\n    assert del_del('aadelbb') == 'aadelbb'\n\n\n",
                "solution": ""
            },
            {
                "name": "mix_start",
                "topic": "",
                "requirements": [],
                "description": "Return true if the given string begins with \"mix\", except the 'm' can be anything, so \"pix\", \"9ix\" .. all count.\n\n```\nmix_start(\"mix snacks\") -> true\nmix_start(\"pix snacks\") -> true\nmix_start(\"piz snacks\") -> false\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p151713) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def mix_start(string: str) -> bool:\n    pass\n\n\nresult = mix_start('mix snacks')\nprint(result)\n",
                "tests": "from main import mix_start\n\n\ndef test_mix_start_1():\n    assert mix_start('mix snacks') == True\n\n\ndef test_mix_start_2():\n    assert mix_start('pix snacks') == True\n\n\ndef test_mix_start_3():\n    assert mix_start('piz snacks') == False\n\n\ndef test_mix_start_4():\n    assert mix_start('nix') == True\n\n\ndef test_mix_start_5():\n    assert mix_start('ni') == False\n\n\ndef test_mix_start_6():\n    assert mix_start('n') == False\n\n\ndef test_mix_start_7():\n    assert mix_start('') == False\n\n\n",
                "solution": ""
            },
            {
                "name": "start_oz",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a string made of the first 2 chars (if present), however include first char only if it is 'o' and include the second only if it is 'z', so \"ozymandias\" yields \"oz\".\n\n```\nstart_oz(\"ozymandias\") -> \"oz\"\nstart_oz(\"bzoo\") -> \"z\"\nstart_oz(\"oxx\") -> \"o\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p199720) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def start_oz(string: str) -> str:\n    pass\n\n\nresult = start_oz('ozymandias')\nprint(result)\n",
                "tests": "from main import start_oz\n\n\ndef test_start_oz_1():\n    assert start_oz('ozymandias') == 'oz'\n\n\ndef test_start_oz_2():\n    assert start_oz('bzoo') == 'z'\n\n\ndef test_start_oz_3():\n    assert start_oz('oxx') == 'o'\n\n\ndef test_start_oz_4():\n    assert start_oz('oz') == 'oz'\n\n\ndef test_start_oz_5():\n    assert start_oz('ounce') == 'o'\n\n\ndef test_start_oz_6():\n    assert start_oz('o') == 'o'\n\n\ndef test_start_oz_7():\n    assert start_oz('abc') == ''\n\n\ndef test_start_oz_8():\n    assert start_oz('') == ''\n\n\ndef test_start_oz_9():\n    assert start_oz('zoo') == ''\n\n\ndef test_start_oz_10():\n    assert start_oz('aztec') == 'z'\n\n\ndef test_start_oz_11():\n    assert start_oz('zzzz') == 'z'\n\n\ndef test_start_oz_12():\n    assert start_oz('oznic') == 'oz'\n\n\n",
                "solution": ""
            },
            {
                "name": "int_max",
                "topic": "",
                "requirements": [],
                "description": "Given three int values, a b c, return the largest.\n\n```\nint_max(1, 2, 3) -> 3\nint_max(1, 3, 2) -> 3\nint_max(3, 2, 1) -> 3\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p101887) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def int_max(a: int, b: int, c: int) -> int:\n    pass\n\n\nresult = int_max(1, 2, 3)\nprint(result)\n",
                "tests": "from main import int_max\n\n\ndef test_int_max_1():\n    assert int_max(1, 2, 3) == 3\n\n\ndef test_int_max_2():\n    assert int_max(1, 3, 2) == 3\n\n\ndef test_int_max_3():\n    assert int_max(3, 2, 1) == 3\n\n\ndef test_int_max_4():\n    assert int_max(9, 3, 3) == 9\n\n\ndef test_int_max_5():\n    assert int_max(3, 9, 3) == 9\n\n\ndef test_int_max_6():\n    assert int_max(3, 3, 9) == 9\n\n\ndef test_int_max_7():\n    assert int_max(8, 2, 3) == 8\n\n\ndef test_int_max_8():\n    assert int_max(-3, -1, -2) == -1\n\n\ndef test_int_max_9():\n    assert int_max(6, 2, 5) == 6\n\n\ndef test_int_max_10():\n    assert int_max(5, 6, 2) == 6\n\n\ndef test_int_max_11():\n    assert int_max(5, 2, 6) == 6\n\n\n",
                "solution": ""
            },
            {
                "name": "close_10",
                "topic": "",
                "requirements": [],
                "description": "Given 2 int values, return whichever value is nearest to the value 10, or return 0 in the event of a tie. Note that Math.abs(n) returns the absolute value of a number.\n\n```\nclose_10(8, 13) -> 8\nclose_10(13, 8) -> 8\nclose_10(13, 7) -> 0\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p172021) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def close_10(a: int, b: int) -> int:\n    pass\n\n\nresult = close_10(8, 13)\nprint(result)\n",
                "tests": "from main import close_10\n\n\ndef test_close_10_1():\n    assert close_10(8, 13) == 8\n\n\ndef test_close_10_2():\n    assert close_10(13, 8) == 8\n\n\ndef test_close_10_3():\n    assert close_10(13, 7) == 0\n\n\ndef test_close_10_4():\n    assert close_10(7, 13) == 0\n\n\ndef test_close_10_5():\n    assert close_10(9, 13) == 9\n\n\ndef test_close_10_6():\n    assert close_10(13, 8) == 8\n\n\ndef test_close_10_7():\n    assert close_10(10, 12) == 10\n\n\ndef test_close_10_8():\n    assert close_10(11, 10) == 10\n\n\ndef test_close_10_9():\n    assert close_10(5, 21) == 5\n\n\ndef test_close_10_10():\n    assert close_10(0, 20) == 0\n\n\ndef test_close_10_11():\n    assert close_10(10, 10) == 0\n\n\n",
                "solution": ""
            },
            {
                "name": "in_3050",
                "topic": "",
                "requirements": [],
                "description": "Given 2 int values, return true if they are both in the range 30..40 inclusive, or they are both in the range 40..50 inclusive.\n\n```\nin_3050(30, 31) -> true\nin_3050(30, 41) -> false\nin_3050(40, 50) -> true\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p132134) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def in_3050(a: int, b: int) -> bool:\n    pass\n\n\nresult = in_3050(30, 31)\nprint(result)\n",
                "tests": "from main import in_3050\n\n\ndef test_in_3050_1():\n    assert in_3050(30, 31) == True\n\n\ndef test_in_3050_2():\n    assert in_3050(30, 41) == False\n\n\ndef test_in_3050_3():\n    assert in_3050(40, 50) == True\n\n\ndef test_in_3050_4():\n    assert in_3050(40, 51) == False\n\n\ndef test_in_3050_5():\n    assert in_3050(39, 50) == False\n\n\ndef test_in_3050_6():\n    assert in_3050(50, 39) == False\n\n\ndef test_in_3050_7():\n    assert in_3050(40, 39) == True\n\n\ndef test_in_3050_8():\n    assert in_3050(49, 48) == True\n\n\ndef test_in_3050_9():\n    assert in_3050(50, 40) == True\n\n\ndef test_in_3050_10():\n    assert in_3050(50, 51) == False\n\n\ndef test_in_3050_11():\n    assert in_3050(35, 36) == True\n\n\ndef test_in_3050_12():\n    assert in_3050(35, 45) == False\n\n\n",
                "solution": ""
            },
            {
                "name": "max_1020",
                "topic": "",
                "requirements": [],
                "description": "Given 2 positive int values, return the larger value that is in the range 10..20 inclusive, or return 0 if neither is in that range.\n\n```\nmax_1020(11, 19) -> 19\nmax_1020(19, 11) -> 19\nmax_1020(11, 9) -> 11\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p177372) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def max_1020(a: int, b: int) -> int:\n    pass\n\n\nresult = max_1020(11, 19)\nprint(result)\n",
                "tests": "from main import max_1020\n\n\ndef test_max_1020_1():\n    assert max_1020(11, 19) == 19\n\n\ndef test_max_1020_2():\n    assert max_1020(19, 11) == 19\n\n\ndef test_max_1020_3():\n    assert max_1020(11, 9) == 11\n\n\ndef test_max_1020_4():\n    assert max_1020(9, 21) == 0\n\n\ndef test_max_1020_5():\n    assert max_1020(10, 21) == 10\n\n\ndef test_max_1020_6():\n    assert max_1020(21, 10) == 10\n\n\ndef test_max_1020_7():\n    assert max_1020(9, 11) == 11\n\n\ndef test_max_1020_8():\n    assert max_1020(23, 10) == 10\n\n\ndef test_max_1020_9():\n    assert max_1020(20, 10) == 20\n\n\ndef test_max_1020_10():\n    assert max_1020(7, 20) == 20\n\n\ndef test_max_1020_11():\n    assert max_1020(17, 16) == 17\n\n\n",
                "solution": ""
            },
            {
                "name": "string_e",
                "topic": "",
                "requirements": [],
                "description": "Return true if the given string contains between 1 and 3 'e' chars.\n\n```\nstring_e(\"Hello\") -> true\nstring_e(\"Heelle\") -> true\nstring_e(\"Heelele\") -> false\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p173784) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def string_e(string: str) -> bool:\n    pass\n\n\nresult = string_e('Hello')\nprint(result)\n",
                "tests": "from main import string_e\n\n\ndef test_string_e_1():\n    assert string_e('Hello') == True\n\n\ndef test_string_e_2():\n    assert string_e('Heelle') == True\n\n\ndef test_string_e_3():\n    assert string_e('Heelele') == False\n\n\ndef test_string_e_4():\n    assert string_e('Hll') == False\n\n\ndef test_string_e_5():\n    assert string_e('e') == True\n\n\ndef test_string_e_6():\n    assert string_e('') == False\n\n\n",
                "solution": ""
            },
            {
                "name": "last_digit",
                "topic": "",
                "requirements": [],
                "description": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57. Note that the % \"mod\" operator computes remainders, so 17 % 10 is 7.\n\n```\nlast_digit(7, 17) -> true\nlast_digit(6, 17) -> false\nlast_digit(3, 113) -> true\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p125339) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def last_digit(a: int, b: int) -> bool:\n    pass\n\n\nresult = last_digit(7, 17)\nprint(result)\n",
                "tests": "from main import last_digit\n\n\ndef test_last_digit_1():\n    assert last_digit(7, 17) == True\n\n\ndef test_last_digit_2():\n    assert last_digit(6, 17) == False\n\n\ndef test_last_digit_3():\n    assert last_digit(3, 113) == True\n\n\ndef test_last_digit_4():\n    assert last_digit(114, 113) == False\n\n\ndef test_last_digit_5():\n    assert last_digit(114, 4) == True\n\n\ndef test_last_digit_6():\n    assert last_digit(10, 0) == True\n\n\ndef test_last_digit_7():\n    assert last_digit(11, 0) == False\n\n\n",
                "solution": ""
            },
            {
                "name": "end_up",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a new string where the last 3 chars are now in upper case. If the string has less than 3 chars, uppercase whatever is there. Note that str.toUpperCase() returns the uppercase version of a string.\n\n```\nend_up(\"Hello\") -> \"HeLLO\"\nend_up(\"hi there\") -> \"hi thERE\"\nend_up(\"hi\") -> \"HI\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p125268) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def end_up(string: str) -> str:\n    pass\n\n\nresult = end_up('Hello')\nprint(result)\n",
                "tests": "from main import end_up\n\n\ndef test_end_up_1():\n    assert end_up('Hello') == 'HeLLO'\n\n\ndef test_end_up_2():\n    assert end_up('hi there') == 'hi thERE'\n\n\ndef test_end_up_3():\n    assert end_up('hi') == 'HI'\n\n\ndef test_end_up_4():\n    assert end_up('woo hoo') == 'woo HOO'\n\n\ndef test_end_up_5():\n    assert end_up('xyz12') == 'xyZ12'\n\n\ndef test_end_up_6():\n    assert end_up('x') == 'X'\n\n\ndef test_end_up_7():\n    assert end_up('') == ''\n\n\n",
                "solution": ""
            },
            {
                "name": "every_nth",
                "topic": "",
                "requirements": [],
                "description": "Given a non-empty string and an int N, return the string made starting with char 0, and then every Nth char of the string. So if N is 3, use char 0, 3, 6, ... and so on. N is 1 or more.\n\n```\nevery_nth(\"Miracle\", 2) -> \"Mrce\"\nevery_nth(\"abcdefg\", 2) -> \"aceg\"\nevery_nth(\"abcdefg\", 3) -> \"adg\"\n```\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p196441) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "def every_nth(string: str, n: int) -> str:\n    pass\n\n\nresult = every_nth('Miracle', 2)\nprint(result)\n",
                "tests": "from main import every_nth\n\n\ndef test_every_nth_1():\n    assert every_nth('Miracle', 2) == 'Mrce'\n\n\ndef test_every_nth_2():\n    assert every_nth('abcdefg', 2) == 'aceg'\n\n\ndef test_every_nth_3():\n    assert every_nth('abcdefg', 3) == 'adg'\n\n\ndef test_every_nth_4():\n    assert every_nth('Chocolate', 3) == 'Cca'\n\n\ndef test_every_nth_5():\n    assert every_nth('Chocolates', 3) == 'Ccas'\n\n\ndef test_every_nth_6():\n    assert every_nth('Chocolates', 4) == 'Coe'\n\n\ndef test_every_nth_7():\n    assert every_nth('Chocolates', 100) == 'C'\n\n\n",
                "solution": ""
            }
        ]
    },
    "Codingbat (Input/Output)": {
        "chapter_list": [
            "Warmup-1",
            "String-1",
            "String-2"
        ],
        "String-1": [
            {
                "name": "hello_name",
                "topic": "",
                "requirements": [],
                "description": "Get a name from the user, e.g. \"Bob\", then output a greeting of the form \"Hello Bob!\".\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p171896) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Bob') == 'Hello Bob!'\n\n\ndef test_2(captured_output):\n    assert captured_output('Alice') == 'Hello Alice!'\n\n\ndef test_3(captured_output):\n    assert captured_output('X') == 'Hello X!'\n\n\ndef test_4(captured_output):\n    assert captured_output('Dolly') == 'Hello Dolly!'\n\n\ndef test_5(captured_output):\n    assert captured_output('Alpha') == 'Hello Alpha!'\n\n\ndef test_6(captured_output):\n    assert captured_output('Omega') == 'Hello Omega!'\n\n\ndef test_7(captured_output):\n    assert captured_output('Goodbye') == 'Hello Goodbye!'\n\n\ndef test_8(captured_output):\n    assert captured_output('ho ho ho') == 'Hello ho ho ho!'\n\n\ndef test_9(captured_output):\n    assert captured_output('xyz!') == 'Hello xyz!!'\n\n\ndef test_10(captured_output):\n    assert captured_output('Hello') == 'Hello Hello!'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Bob"
                        ],
                        "Hello Bob!"
                    ],
                    [
                        [
                            "Alice"
                        ],
                        "Hello Alice!"
                    ],
                    [
                        [
                            "X"
                        ],
                        "Hello X!"
                    ],
                    [
                        [
                            "Dolly"
                        ],
                        "Hello Dolly!"
                    ],
                    [
                        [
                            "Alpha"
                        ],
                        "Hello Alpha!"
                    ],
                    [
                        [
                            "Omega"
                        ],
                        "Hello Omega!"
                    ],
                    [
                        [
                            "Goodbye"
                        ],
                        "Hello Goodbye!"
                    ],
                    [
                        [
                            "ho ho ho"
                        ],
                        "Hello ho ho ho!"
                    ],
                    [
                        [
                            "xyz!"
                        ],
                        "Hello xyz!!"
                    ],
                    [
                        [
                            "Hello"
                        ],
                        "Hello Hello!"
                    ]
                ]
            },
            {
                "name": "make_abba",
                "topic": "",
                "requirements": [],
                "description": "Get two strings strings from the user, then output the result of putting them together in the order abba, e.g. `\"Hi\"` and `\"Bye\"` results in `\"HiByeByeHi\"`.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p161056) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Hi\\nBye') == 'HiByeByeHi'\n\n\ndef test_2(captured_output):\n    assert captured_output('Yo\\nAlice') == 'YoAliceAliceYo'\n\n\ndef test_3(captured_output):\n    assert captured_output('What\\nUp') == 'WhatUpUpWhat'\n\n\ndef test_4(captured_output):\n    assert captured_output('aaa\\nbbb') == 'aaabbbbbbaaa'\n\n\ndef test_5(captured_output):\n    assert captured_output('x\\ny') == 'xyyx'\n\n\ndef test_6(captured_output):\n    assert captured_output('x\\n') == 'xx'\n\n\ndef test_7(captured_output):\n    assert captured_output('\\ny') == 'yy'\n\n\ndef test_8(captured_output):\n    assert captured_output('Bo\\nYa') == 'BoYaYaBo'\n\n\ndef test_9(captured_output):\n    assert captured_output('Ya\\nYa') == 'YaYaYaYa'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Hi",
                            "Bye"
                        ],
                        "HiByeByeHi"
                    ],
                    [
                        [
                            "Yo",
                            "Alice"
                        ],
                        "YoAliceAliceYo"
                    ],
                    [
                        [
                            "What",
                            "Up"
                        ],
                        "WhatUpUpWhat"
                    ],
                    [
                        [
                            "aaa",
                            "bbb"
                        ],
                        "aaabbbbbbaaa"
                    ],
                    [
                        [
                            "x",
                            "y"
                        ],
                        "xyyx"
                    ],
                    [
                        [
                            "x",
                            ""
                        ],
                        "xx"
                    ],
                    [
                        [
                            "",
                            "y"
                        ],
                        "yy"
                    ],
                    [
                        [
                            "Bo",
                            "Ya"
                        ],
                        "BoYaYaBo"
                    ],
                    [
                        [
                            "Ya",
                            "Ya"
                        ],
                        "YaYaYaYa"
                    ]
                ]
            },
            {
                "name": "make_tags",
                "topic": "",
                "requirements": [],
                "description": "The web is built with HTML strings like \"&lt;i&gt;Yay&lt;/i&gt;\" which draws Yay as italic text. In this example, the \"i\" tag makes &lt;i&gt; and &lt;/i&gt; which surround the word \"Yay\". Ask the user for a tag string, then ask the user for a word string. Print out the HTML string with tags around the word, e.g. \"&lt;i&gt;Yay&lt;/i&gt;\".\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p147483) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('i\\nYay') == '<i>Yay</i>'\n\n\ndef test_2(captured_output):\n    assert captured_output('i\\nHello') == '<i>Hello</i>'\n\n\ndef test_3(captured_output):\n    assert captured_output('cite\\nYay') == '<cite>Yay</cite>'\n\n\ndef test_4(captured_output):\n    assert captured_output('address\\nhere') == '<address>here</address>'\n\n\ndef test_5(captured_output):\n    assert captured_output('body\\nHeart') == '<body>Heart</body>'\n\n\ndef test_6(captured_output):\n    assert captured_output('i\\ni') == '<i>i</i>'\n\n\ndef test_7(captured_output):\n    assert captured_output('i\\n') == '<i></i>'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "i",
                            "Yay"
                        ],
                        "<i>Yay</i>"
                    ],
                    [
                        [
                            "i",
                            "Hello"
                        ],
                        "<i>Hello</i>"
                    ],
                    [
                        [
                            "cite",
                            "Yay"
                        ],
                        "<cite>Yay</cite>"
                    ],
                    [
                        [
                            "address",
                            "here"
                        ],
                        "<address>here</address>"
                    ],
                    [
                        [
                            "body",
                            "Heart"
                        ],
                        "<body>Heart</body>"
                    ],
                    [
                        [
                            "i",
                            "i"
                        ],
                        "<i>i</i>"
                    ],
                    [
                        [
                            "i",
                            ""
                        ],
                        "<i></i>"
                    ]
                ]
            },
            {
                "name": "make_out_word",
                "topic": "",
                "requirements": [],
                "description": "Ask the user for an \"out\" string of length 4, such as \"&lt;&lt;&gt;&gt;\", then ask the uer for a word, print out a new string where the word is in the middle of the out string, e.g. \"&lt;&lt;word&gt;&gt;\". Note: use `str[i:j]` to extract the String starting at index `i` and going up to but not including index `j`.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p184030) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('<<>>\\nYay') == '<<Yay>>'\n\n\ndef test_2(captured_output):\n    assert captured_output('<<>>\\nWooHoo') == '<<WooHoo>>'\n\n\ndef test_3(captured_output):\n    assert captured_output('[[]]\\nword') == '[[word]]'\n\n\ndef test_4(captured_output):\n    assert captured_output('HHoo\\nHello') == 'HHHellooo'\n\n\ndef test_5(captured_output):\n    assert captured_output('abyz\\nYAY') == 'abYAYyz'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "<<>>",
                            "Yay"
                        ],
                        "<<Yay>>"
                    ],
                    [
                        [
                            "<<>>",
                            "WooHoo"
                        ],
                        "<<WooHoo>>"
                    ],
                    [
                        [
                            "[[]]",
                            "word"
                        ],
                        "[[word]]"
                    ],
                    [
                        [
                            "HHoo",
                            "Hello"
                        ],
                        "HHHellooo"
                    ],
                    [
                        [
                            "abyz",
                            "YAY"
                        ],
                        "abYAYyz"
                    ]
                ]
            },
            {
                "name": "extra_end",
                "topic": "",
                "requirements": [],
                "description": "Take a string as input, print out a new string made of 3 copies of the last 2 chars of the original string. The string length will be at least 2.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p108853) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Hello') == 'lololo'\n\n\ndef test_2(captured_output):\n    assert captured_output('ab') == 'ababab'\n\n\ndef test_3(captured_output):\n    assert captured_output('Hi') == 'HiHiHi'\n\n\ndef test_4(captured_output):\n    assert captured_output('Candy') == 'dydydy'\n\n\ndef test_5(captured_output):\n    assert captured_output('Code') == 'dedede'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Hello"
                        ],
                        "lololo"
                    ],
                    [
                        [
                            "ab"
                        ],
                        "ababab"
                    ],
                    [
                        [
                            "Hi"
                        ],
                        "HiHiHi"
                    ],
                    [
                        [
                            "Candy"
                        ],
                        "dydydy"
                    ],
                    [
                        [
                            "Code"
                        ],
                        "dedede"
                    ]
                ]
            },
            {
                "name": "first_two",
                "topic": "",
                "requirements": [],
                "description": "Take a string as input, print out the string made of its first two chars, so the String `\"Hello\"` yields `\"He\"`. If the string is shorter than length 2, return whatever there is, so `\"X\"` yields `\"X\"`, and the empty string `\"\"` yields the empty string `\"\"`. Note that `len()` returns the length of a string.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p163411) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Hello') == 'He'\n\n\ndef test_2(captured_output):\n    assert captured_output('abcdefg') == 'ab'\n\n\ndef test_3(captured_output):\n    assert captured_output('ab') == 'ab'\n\n\ndef test_4(captured_output):\n    assert captured_output('a') == 'a'\n\n\ndef test_5(captured_output):\n    assert captured_output('') == ''\n\n\ndef test_6(captured_output):\n    assert captured_output('Kitten') == 'Ki'\n\n\ndef test_7(captured_output):\n    assert captured_output('hi') == 'hi'\n\n\ndef test_8(captured_output):\n    assert captured_output('hiya') == 'hi'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Hello"
                        ],
                        "He"
                    ],
                    [
                        [
                            "abcdefg"
                        ],
                        "ab"
                    ],
                    [
                        [
                            "ab"
                        ],
                        "ab"
                    ],
                    [
                        [
                            "a"
                        ],
                        "a"
                    ],
                    [
                        [
                            ""
                        ],
                        ""
                    ],
                    [
                        [
                            "Kitten"
                        ],
                        "Ki"
                    ],
                    [
                        [
                            "hi"
                        ],
                        "hi"
                    ],
                    [
                        [
                            "hiya"
                        ],
                        "hi"
                    ]
                ]
            },
            {
                "name": "first_half",
                "topic": "",
                "requirements": [],
                "description": "Given a string of even length, return the first half. So the string \"WooHoo\" yields \"Woo\".\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p172267) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('WooHoo') == 'Woo'\n\n\ndef test_2(captured_output):\n    assert captured_output('HelloThere') == 'Hello'\n\n\ndef test_3(captured_output):\n    assert captured_output('abcdef') == 'abc'\n\n\ndef test_4(captured_output):\n    assert captured_output('ab') == 'a'\n\n\ndef test_5(captured_output):\n    assert captured_output('') == ''\n\n\ndef test_6(captured_output):\n    assert captured_output('0123456789') == '01234'\n\n\ndef test_7(captured_output):\n    assert captured_output('kitten') == 'kit'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "WooHoo"
                        ],
                        "Woo"
                    ],
                    [
                        [
                            "HelloThere"
                        ],
                        "Hello"
                    ],
                    [
                        [
                            "abcdef"
                        ],
                        "abc"
                    ],
                    [
                        [
                            "ab"
                        ],
                        "a"
                    ],
                    [
                        [
                            ""
                        ],
                        ""
                    ],
                    [
                        [
                            "0123456789"
                        ],
                        "01234"
                    ],
                    [
                        [
                            "kitten"
                        ],
                        "kit"
                    ]
                ]
            },
            {
                "name": "without_end",
                "topic": "",
                "requirements": [],
                "description": "Given a string, print out a version without the first and last char, so \"Hello\" yields \"ell\". The string length will be at least 2.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p130896) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Hello') == 'ell'\n\n\ndef test_2(captured_output):\n    assert captured_output('java') == 'av'\n\n\ndef test_3(captured_output):\n    assert captured_output('coding') == 'odin'\n\n\ndef test_4(captured_output):\n    assert captured_output('code') == 'od'\n\n\ndef test_5(captured_output):\n    assert captured_output('ab') == ''\n\n\ndef test_6(captured_output):\n    assert captured_output('Chocolate!') == 'hocolate'\n\n\ndef test_7(captured_output):\n    assert captured_output('kitten') == 'itte'\n\n\ndef test_8(captured_output):\n    assert captured_output('woohoo') == 'ooho'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Hello"
                        ],
                        "ell"
                    ],
                    [
                        [
                            "java"
                        ],
                        "av"
                    ],
                    [
                        [
                            "coding"
                        ],
                        "odin"
                    ],
                    [
                        [
                            "code"
                        ],
                        "od"
                    ],
                    [
                        [
                            "ab"
                        ],
                        ""
                    ],
                    [
                        [
                            "Chocolate!"
                        ],
                        "hocolate"
                    ],
                    [
                        [
                            "kitten"
                        ],
                        "itte"
                    ],
                    [
                        [
                            "woohoo"
                        ],
                        "ooho"
                    ]
                ]
            },
            {
                "name": "combo_string",
                "topic": "",
                "requirements": [],
                "description": "Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0).\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p168564) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Hello\\nhi') == 'hiHellohi'\n\n\ndef test_2(captured_output):\n    assert captured_output('hi\\nHello') == 'hiHellohi'\n\n\ndef test_3(captured_output):\n    assert captured_output('aaa\\nb') == 'baaab'\n\n\ndef test_4(captured_output):\n    assert captured_output('b\\naaa') == 'baaab'\n\n\ndef test_5(captured_output):\n    assert captured_output('aaa\\n') == 'aaa'\n\n\ndef test_6(captured_output):\n    assert captured_output('\\nbb') == 'bb'\n\n\ndef test_7(captured_output):\n    assert captured_output('aaa\\n1234') == 'aaa1234aaa'\n\n\ndef test_8(captured_output):\n    assert captured_output('aaa\\nbb') == 'bbaaabb'\n\n\ndef test_9(captured_output):\n    assert captured_output('a\\nbb') == 'abba'\n\n\ndef test_10(captured_output):\n    assert captured_output('bb\\na') == 'abba'\n\n\ndef test_11(captured_output):\n    assert captured_output('xyz\\nab') == 'abxyzab'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Hello",
                            "hi"
                        ],
                        "hiHellohi"
                    ],
                    [
                        [
                            "hi",
                            "Hello"
                        ],
                        "hiHellohi"
                    ],
                    [
                        [
                            "aaa",
                            "b"
                        ],
                        "baaab"
                    ],
                    [
                        [
                            "b",
                            "aaa"
                        ],
                        "baaab"
                    ],
                    [
                        [
                            "aaa",
                            ""
                        ],
                        "aaa"
                    ],
                    [
                        [
                            "",
                            "bb"
                        ],
                        "bb"
                    ],
                    [
                        [
                            "aaa",
                            "1234"
                        ],
                        "aaa1234aaa"
                    ],
                    [
                        [
                            "aaa",
                            "bb"
                        ],
                        "bbaaabb"
                    ],
                    [
                        [
                            "a",
                            "bb"
                        ],
                        "abba"
                    ],
                    [
                        [
                            "bb",
                            "a"
                        ],
                        "abba"
                    ],
                    [
                        [
                            "xyz",
                            "ab"
                        ],
                        "abxyzab"
                    ]
                ]
            },
            {
                "name": "non_start",
                "topic": "",
                "requirements": [],
                "description": "Given 2 strings, return their concatenation, except omit the first char of each. The strings will be at least length 1.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p143825) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Hello\\nThere') == 'ellohere'\n\n\ndef test_2(captured_output):\n    assert captured_output('java\\ncode') == 'avaode'\n\n\ndef test_3(captured_output):\n    assert captured_output('shotl\\njava') == 'hotlava'\n\n\ndef test_4(captured_output):\n    assert captured_output('ab\\nxy') == 'by'\n\n\ndef test_5(captured_output):\n    assert captured_output('ab\\nx') == 'b'\n\n\ndef test_6(captured_output):\n    assert captured_output('x\\nac') == 'c'\n\n\ndef test_7(captured_output):\n    assert captured_output('a\\nx') == ''\n\n\ndef test_8(captured_output):\n    assert captured_output('kit\\nkat') == 'itat'\n\n\ndef test_9(captured_output):\n    assert captured_output('mart\\ndart') == 'artart'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Hello",
                            "There"
                        ],
                        "ellohere"
                    ],
                    [
                        [
                            "java",
                            "code"
                        ],
                        "avaode"
                    ],
                    [
                        [
                            "shotl",
                            "java"
                        ],
                        "hotlava"
                    ],
                    [
                        [
                            "ab",
                            "xy"
                        ],
                        "by"
                    ],
                    [
                        [
                            "ab",
                            "x"
                        ],
                        "b"
                    ],
                    [
                        [
                            "x",
                            "ac"
                        ],
                        "c"
                    ],
                    [
                        [
                            "a",
                            "x"
                        ],
                        ""
                    ],
                    [
                        [
                            "kit",
                            "kat"
                        ],
                        "itat"
                    ],
                    [
                        [
                            "mart",
                            "dart"
                        ],
                        "artart"
                    ]
                ]
            },
            {
                "name": "left_2",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a \"rotated left 2\" version where the first 2 chars are moved to the end. The string length will be at least 2.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p197720) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Hello') == 'lloHe'\n\n\ndef test_2(captured_output):\n    assert captured_output('java') == 'vaja'\n\n\ndef test_3(captured_output):\n    assert captured_output('Hi') == 'Hi'\n\n\ndef test_4(captured_output):\n    assert captured_output('code') == 'deco'\n\n\ndef test_5(captured_output):\n    assert captured_output('cat') == 'tca'\n\n\ndef test_6(captured_output):\n    assert captured_output('12345') == '34512'\n\n\ndef test_7(captured_output):\n    assert captured_output('Chocolate') == 'ocolateCh'\n\n\ndef test_8(captured_output):\n    assert captured_output('bricks') == 'icksbr'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Hello"
                        ],
                        "lloHe"
                    ],
                    [
                        [
                            "java"
                        ],
                        "vaja"
                    ],
                    [
                        [
                            "Hi"
                        ],
                        "Hi"
                    ],
                    [
                        [
                            "code"
                        ],
                        "deco"
                    ],
                    [
                        [
                            "cat"
                        ],
                        "tca"
                    ],
                    [
                        [
                            "12345"
                        ],
                        "34512"
                    ],
                    [
                        [
                            "Chocolate"
                        ],
                        "ocolateCh"
                    ],
                    [
                        [
                            "bricks"
                        ],
                        "icksbr"
                    ]
                ]
            },
            {
                "name": "right_2",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a \"rotated right 2\" version where the last 2 chars are moved to the start. The string length will be at least 2.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p130781) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Hello') == 'loHel'\n\n\ndef test_2(captured_output):\n    assert captured_output('java') == 'vaja'\n\n\ndef test_3(captured_output):\n    assert captured_output('Hi') == 'Hi'\n\n\ndef test_4(captured_output):\n    assert captured_output('code') == 'deco'\n\n\ndef test_5(captured_output):\n    assert captured_output('cat') == 'atc'\n\n\ndef test_6(captured_output):\n    assert captured_output('12345') == '45123'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Hello"
                        ],
                        "loHel"
                    ],
                    [
                        [
                            "java"
                        ],
                        "vaja"
                    ],
                    [
                        [
                            "Hi"
                        ],
                        "Hi"
                    ],
                    [
                        [
                            "code"
                        ],
                        "deco"
                    ],
                    [
                        [
                            "cat"
                        ],
                        "atc"
                    ],
                    [
                        [
                            "12345"
                        ],
                        "45123"
                    ]
                ]
            },
            {
                "name": "the_end",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a string length 1 from its front, unless <b>front</b> is false, in which case return a string length 1 from its back. The string will be non-empty.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p162477) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Hello\\nTrue') == 'H'\n\n\ndef test_2(captured_output):\n    assert captured_output('Hello\\nFalse') == 'o'\n\n\ndef test_3(captured_output):\n    assert captured_output('oh\\nTrue') == 'o'\n\n\ndef test_4(captured_output):\n    assert captured_output('oh\\nFalse') == 'h'\n\n\ndef test_5(captured_output):\n    assert captured_output('x\\nTrue') == 'x'\n\n\ndef test_6(captured_output):\n    assert captured_output('x\\nFalse') == 'x'\n\n\ndef test_7(captured_output):\n    assert captured_output('java\\nTrue') == 'j'\n\n\ndef test_8(captured_output):\n    assert captured_output('chocolate\\nFalse') == 'e'\n\n\ndef test_9(captured_output):\n    assert captured_output('1234\\nTrue') == '1'\n\n\ndef test_10(captured_output):\n    assert captured_output('code\\nFalse') == 'e'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Hello",
                            true
                        ],
                        "H"
                    ],
                    [
                        [
                            "Hello",
                            false
                        ],
                        "o"
                    ],
                    [
                        [
                            "oh",
                            true
                        ],
                        "o"
                    ],
                    [
                        [
                            "oh",
                            false
                        ],
                        "h"
                    ],
                    [
                        [
                            "x",
                            true
                        ],
                        "x"
                    ],
                    [
                        [
                            "x",
                            false
                        ],
                        "x"
                    ],
                    [
                        [
                            "java",
                            true
                        ],
                        "j"
                    ],
                    [
                        [
                            "chocolate",
                            false
                        ],
                        "e"
                    ],
                    [
                        [
                            "1234",
                            true
                        ],
                        "1"
                    ],
                    [
                        [
                            "code",
                            false
                        ],
                        "e"
                    ]
                ]
            },
            {
                "name": "withou_end_2",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a version without both the first and last char of the string. The string may be any length, including 0.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p174254) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Hello') == 'ell'\n\n\ndef test_2(captured_output):\n    assert captured_output('abc') == 'b'\n\n\ndef test_3(captured_output):\n    assert captured_output('ab') == ''\n\n\ndef test_4(captured_output):\n    assert captured_output('a') == ''\n\n\ndef test_5(captured_output):\n    assert captured_output('') == ''\n\n\ndef test_6(captured_output):\n    assert captured_output('coldy') == 'old'\n\n\ndef test_7(captured_output):\n    assert captured_output('java code') == 'ava cod'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Hello"
                        ],
                        "ell"
                    ],
                    [
                        [
                            "abc"
                        ],
                        "b"
                    ],
                    [
                        [
                            "ab"
                        ],
                        ""
                    ],
                    [
                        [
                            "a"
                        ],
                        ""
                    ],
                    [
                        [
                            ""
                        ],
                        ""
                    ],
                    [
                        [
                            "coldy"
                        ],
                        "old"
                    ],
                    [
                        [
                            "java code"
                        ],
                        "ava cod"
                    ]
                ]
            },
            {
                "name": "middle_two",
                "topic": "",
                "requirements": [],
                "description": "Given a string of even length, return a string made of the middle two chars, so the string \"string\" yields \"ri\". The string length will be at least 2.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p137729) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('string') == 'ri'\n\n\ndef test_2(captured_output):\n    assert captured_output('code') == 'od'\n\n\ndef test_3(captured_output):\n    assert captured_output('Practice') == 'ct'\n\n\ndef test_4(captured_output):\n    assert captured_output('ab') == 'ab'\n\n\ndef test_5(captured_output):\n    assert captured_output('0123456789') == '45'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "string"
                        ],
                        "ri"
                    ],
                    [
                        [
                            "code"
                        ],
                        "od"
                    ],
                    [
                        [
                            "Practice"
                        ],
                        "ct"
                    ],
                    [
                        [
                            "ab"
                        ],
                        "ab"
                    ],
                    [
                        [
                            "0123456789"
                        ],
                        "45"
                    ]
                ]
            },
            {
                "name": "ends_ly",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return true if it ends in \"ly\".\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p103895) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('oddly') == True\n\n\ndef test_2(captured_output):\n    assert captured_output('y') == False\n\n\ndef test_3(captured_output):\n    assert captured_output('oddy') == False\n\n\ndef test_4(captured_output):\n    assert captured_output('oddl') == False\n\n\ndef test_5(captured_output):\n    assert captured_output('olydd') == False\n\n\ndef test_6(captured_output):\n    assert captured_output('ly') == True\n\n\ndef test_7(captured_output):\n    assert captured_output('') == False\n\n\ndef test_8(captured_output):\n    assert captured_output('falsey') == False\n\n\ndef test_9(captured_output):\n    assert captured_output('evenly') == True",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "oddly"
                        ],
                        true
                    ],
                    [
                        [
                            "y"
                        ],
                        false
                    ],
                    [
                        [
                            "oddy"
                        ],
                        false
                    ],
                    [
                        [
                            "oddl"
                        ],
                        false
                    ],
                    [
                        [
                            "olydd"
                        ],
                        false
                    ],
                    [
                        [
                            "ly"
                        ],
                        true
                    ],
                    [
                        [
                            ""
                        ],
                        false
                    ],
                    [
                        [
                            "falsey"
                        ],
                        false
                    ],
                    [
                        [
                            "evenly"
                        ],
                        true
                    ]
                ]
            },
            {
                "name": "n_twice",
                "topic": "",
                "requirements": [],
                "description": "Given a string and an int n, return a string made of the first and last n chars from the string. The string length will be at least n.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p174148) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Hello\\n2') == 'Helo'\n\n\ndef test_2(captured_output):\n    assert captured_output('Chocolate\\n3') == 'Choate'\n\n\ndef test_3(captured_output):\n    assert captured_output('Chocolate\\n1') == 'Ce'\n\n\ndef test_4(captured_output):\n    assert captured_output('Chocolate\\n0') == ''\n\n\ndef test_5(captured_output):\n    assert captured_output('Hello\\n4') == 'Hellello'\n\n\ndef test_6(captured_output):\n    assert captured_output('Code\\n4') == 'CodeCode'\n\n\ndef test_7(captured_output):\n    assert captured_output('Code\\n2') == 'Code'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Hello",
                            2
                        ],
                        "Helo"
                    ],
                    [
                        [
                            "Chocolate",
                            3
                        ],
                        "Choate"
                    ],
                    [
                        [
                            "Chocolate",
                            1
                        ],
                        "Ce"
                    ],
                    [
                        [
                            "Chocolate",
                            0
                        ],
                        ""
                    ],
                    [
                        [
                            "Hello",
                            4
                        ],
                        "Hellello"
                    ],
                    [
                        [
                            "Code",
                            4
                        ],
                        "CodeCode"
                    ],
                    [
                        [
                            "Code",
                            2
                        ],
                        "Code"
                    ]
                ]
            },
            {
                "name": "two_char",
                "topic": "",
                "requirements": [],
                "description": "Given a string and an index, return a string length 2 starting at the given index. If the index is too big or too small to define a string length 2, use the first 2 chars. The string length will be at least 2.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p144623) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('java\\n0') == 'ja'\n\n\ndef test_2(captured_output):\n    assert captured_output('java\\n2') == 'va'\n\n\ndef test_3(captured_output):\n    assert captured_output('java\\n3') == 'ja'\n\n\ndef test_4(captured_output):\n    assert captured_output('java\\n4') == 'ja'\n\n\ndef test_5(captured_output):\n    assert captured_output('java\\n-1') == 'ja'\n\n\ndef test_6(captured_output):\n    assert captured_output('Hello\\n0') == 'He'\n\n\ndef test_7(captured_output):\n    assert captured_output('Hello\\n1') == 'el'\n\n\ndef test_8(captured_output):\n    assert captured_output('Hello\\n99') == 'He'\n\n\ndef test_9(captured_output):\n    assert captured_output('Hello\\n3') == 'lo'\n\n\ndef test_10(captured_output):\n    assert captured_output('Hello\\n4') == 'He'\n\n\ndef test_11(captured_output):\n    assert captured_output('Hello\\n5') == 'He'\n\n\ndef test_12(captured_output):\n    assert captured_output('Hello\\n-7') == 'He'\n\n\ndef test_13(captured_output):\n    assert captured_output('Hello\\n6') == 'He'\n\n\ndef test_14(captured_output):\n    assert captured_output('Hello\\n-1') == 'He'\n\n\ndef test_15(captured_output):\n    assert captured_output('yay\\n0') == 'ya'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "java",
                            0
                        ],
                        "ja"
                    ],
                    [
                        [
                            "java",
                            2
                        ],
                        "va"
                    ],
                    [
                        [
                            "java",
                            3
                        ],
                        "ja"
                    ],
                    [
                        [
                            "java",
                            4
                        ],
                        "ja"
                    ],
                    [
                        [
                            "java",
                            -1
                        ],
                        "ja"
                    ],
                    [
                        [
                            "Hello",
                            0
                        ],
                        "He"
                    ],
                    [
                        [
                            "Hello",
                            1
                        ],
                        "el"
                    ],
                    [
                        [
                            "Hello",
                            99
                        ],
                        "He"
                    ],
                    [
                        [
                            "Hello",
                            3
                        ],
                        "lo"
                    ],
                    [
                        [
                            "Hello",
                            4
                        ],
                        "He"
                    ],
                    [
                        [
                            "Hello",
                            5
                        ],
                        "He"
                    ],
                    [
                        [
                            "Hello",
                            -7
                        ],
                        "He"
                    ],
                    [
                        [
                            "Hello",
                            6
                        ],
                        "He"
                    ],
                    [
                        [
                            "Hello",
                            -1
                        ],
                        "He"
                    ],
                    [
                        [
                            "yay",
                            0
                        ],
                        "ya"
                    ]
                ]
            },
            {
                "name": "middle_three",
                "topic": "",
                "requirements": [],
                "description": "Given a string of odd length, return the string length 3 from its middle, so \"Candy\" yields \"and\". The string length will be at least 3.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p115863) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Candy') == 'and'\n\n\ndef test_2(captured_output):\n    assert captured_output('and') == 'and'\n\n\ndef test_3(captured_output):\n    assert captured_output('solving') == 'lvi'\n\n\ndef test_4(captured_output):\n    assert captured_output('Hi yet Hi') == 'yet'\n\n\ndef test_5(captured_output):\n    assert captured_output('java yet java') == 'yet'\n\n\ndef test_6(captured_output):\n    assert captured_output('Chocolate') == 'col'\n\n\ndef test_7(captured_output):\n    assert captured_output('XabcxyzabcX') == 'xyz'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Candy"
                        ],
                        "and"
                    ],
                    [
                        [
                            "and"
                        ],
                        "and"
                    ],
                    [
                        [
                            "solving"
                        ],
                        "lvi"
                    ],
                    [
                        [
                            "Hi yet Hi"
                        ],
                        "yet"
                    ],
                    [
                        [
                            "java yet java"
                        ],
                        "yet"
                    ],
                    [
                        [
                            "Chocolate"
                        ],
                        "col"
                    ],
                    [
                        [
                            "XabcxyzabcX"
                        ],
                        "xyz"
                    ]
                ]
            },
            {
                "name": "has_bad",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return true if \"bad\" appears starting at index 0 or 1 in the string, such as with \"badxxx\" or \"xbadxx\" but not \"xxbadxx\". The string may be any length, including 0. Note: use .equals() to compare 2 strings.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p139075) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('badxx') == True\n\n\ndef test_2(captured_output):\n    assert captured_output('xbadxx') == True\n\n\ndef test_3(captured_output):\n    assert captured_output('xxbadxx') == False\n\n\ndef test_4(captured_output):\n    assert captured_output('code') == False\n\n\ndef test_5(captured_output):\n    assert captured_output('bad') == True\n\n\ndef test_6(captured_output):\n    assert captured_output('ba') == False\n\n\ndef test_7(captured_output):\n    assert captured_output('xba') == False\n\n\ndef test_8(captured_output):\n    assert captured_output('xbad') == True\n\n\ndef test_9(captured_output):\n    assert captured_output('') == False\n\n\ndef test_10(captured_output):\n    assert captured_output('badyy') == True",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "badxx"
                        ],
                        true
                    ],
                    [
                        [
                            "xbadxx"
                        ],
                        true
                    ],
                    [
                        [
                            "xxbadxx"
                        ],
                        false
                    ],
                    [
                        [
                            "code"
                        ],
                        false
                    ],
                    [
                        [
                            "bad"
                        ],
                        true
                    ],
                    [
                        [
                            "ba"
                        ],
                        false
                    ],
                    [
                        [
                            "xba"
                        ],
                        false
                    ],
                    [
                        [
                            "xbad"
                        ],
                        true
                    ],
                    [
                        [
                            ""
                        ],
                        false
                    ],
                    [
                        [
                            "badyy"
                        ],
                        true
                    ]
                ]
            },
            {
                "name": "at_first",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a string length 2 made of its first 2 chars. If the string length is less than 2, use '@' for the missing chars.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p139076) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('hello') == 'he'\n\n\ndef test_2(captured_output):\n    assert captured_output('hi') == 'hi'\n\n\ndef test_3(captured_output):\n    assert captured_output('h') == 'h@'\n\n\ndef test_4(captured_output):\n    assert captured_output('') == '@@'\n\n\ndef test_5(captured_output):\n    assert captured_output('kitten') == 'ki'\n\n\ndef test_6(captured_output):\n    assert captured_output('java') == 'ja'\n\n\ndef test_7(captured_output):\n    assert captured_output('j') == 'j@'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "hello"
                        ],
                        "he"
                    ],
                    [
                        [
                            "hi"
                        ],
                        "hi"
                    ],
                    [
                        [
                            "h"
                        ],
                        "h@"
                    ],
                    [
                        [
                            ""
                        ],
                        "@@"
                    ],
                    [
                        [
                            "kitten"
                        ],
                        "ki"
                    ],
                    [
                        [
                            "java"
                        ],
                        "ja"
                    ],
                    [
                        [
                            "j"
                        ],
                        "j@"
                    ]
                ]
            },
            {
                "name": "last_chars",
                "topic": "",
                "requirements": [],
                "description": "Given 2 strings, a and b, return a new string made of the first char of a and the last char of b, so \"yo\" and \"java\" yields \"ya\". If either string is length 0, use '@' for its missing char.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p138183) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('last\\nchars') == 'ls'\n\n\ndef test_2(captured_output):\n    assert captured_output('yo\\njava') == 'ya'\n\n\ndef test_3(captured_output):\n    assert captured_output('hi\\n') == 'h@'\n\n\ndef test_4(captured_output):\n    assert captured_output('\\nhello') == '@o'\n\n\ndef test_5(captured_output):\n    assert captured_output('\\n') == '@@'\n\n\ndef test_6(captured_output):\n    assert captured_output('kitten\\nhi') == 'ki'\n\n\ndef test_7(captured_output):\n    assert captured_output('k\\nzip') == 'kp'\n\n\ndef test_8(captured_output):\n    assert captured_output('kitten\\n') == 'k@'\n\n\ndef test_9(captured_output):\n    assert captured_output('kitten\\nzip') == 'kp'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "last",
                            "chars"
                        ],
                        "ls"
                    ],
                    [
                        [
                            "yo",
                            "java"
                        ],
                        "ya"
                    ],
                    [
                        [
                            "hi",
                            ""
                        ],
                        "h@"
                    ],
                    [
                        [
                            "",
                            "hello"
                        ],
                        "@o"
                    ],
                    [
                        [
                            "",
                            ""
                        ],
                        "@@"
                    ],
                    [
                        [
                            "kitten",
                            "hi"
                        ],
                        "ki"
                    ],
                    [
                        [
                            "k",
                            "zip"
                        ],
                        "kp"
                    ],
                    [
                        [
                            "kitten",
                            ""
                        ],
                        "k@"
                    ],
                    [
                        [
                            "kitten",
                            "zip"
                        ],
                        "kp"
                    ]
                ]
            },
            {
                "name": "con_cat",
                "topic": "",
                "requirements": [],
                "description": "Given two strings, append them together (known as \"concatenation\") and return the result. However, if the concatenation creates a double-char, then omit one of the chars, so \"abc\" and \"cat\" yields \"abcat\".\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p132118) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('abc\\ncat') == 'abcat'\n\n\ndef test_2(captured_output):\n    assert captured_output('dog\\ncat') == 'dogcat'\n\n\ndef test_3(captured_output):\n    assert captured_output('abc\\n') == 'abc'\n\n\ndef test_4(captured_output):\n    assert captured_output('\\ncat') == 'cat'\n\n\ndef test_5(captured_output):\n    assert captured_output('pig\\ng') == 'pig'\n\n\ndef test_6(captured_output):\n    assert captured_output('pig\\ndoggy') == 'pigdoggy'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "abc",
                            "cat"
                        ],
                        "abcat"
                    ],
                    [
                        [
                            "dog",
                            "cat"
                        ],
                        "dogcat"
                    ],
                    [
                        [
                            "abc",
                            ""
                        ],
                        "abc"
                    ],
                    [
                        [
                            "",
                            "cat"
                        ],
                        "cat"
                    ],
                    [
                        [
                            "pig",
                            "g"
                        ],
                        "pig"
                    ],
                    [
                        [
                            "pig",
                            "doggy"
                        ],
                        "pigdoggy"
                    ]
                ]
            },
            {
                "name": "last_two",
                "topic": "",
                "requirements": [],
                "description": "Given a string of any length, return a new string where the last 2 chars, if present, are swapped, so \"coding\" yields \"codign\".\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p194786) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('coding') == 'codign'\n\n\ndef test_2(captured_output):\n    assert captured_output('cat') == 'cta'\n\n\ndef test_3(captured_output):\n    assert captured_output('ab') == 'ba'\n\n\ndef test_4(captured_output):\n    assert captured_output('a') == 'a'\n\n\ndef test_5(captured_output):\n    assert captured_output('') == ''",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "coding"
                        ],
                        "codign"
                    ],
                    [
                        [
                            "cat"
                        ],
                        "cta"
                    ],
                    [
                        [
                            "ab"
                        ],
                        "ba"
                    ],
                    [
                        [
                            "a"
                        ],
                        "a"
                    ],
                    [
                        [
                            ""
                        ],
                        ""
                    ]
                ]
            },
            {
                "name": "see_color",
                "topic": "",
                "requirements": [],
                "description": "Given a string, if the string begins with \"red\" or \"blue\" return that color string, otherwise return the empty string.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p199216) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('redxx') == 'red'\n\n\ndef test_2(captured_output):\n    assert captured_output('xxred') == ''\n\n\ndef test_3(captured_output):\n    assert captured_output('blueTimes') == 'blue'\n\n\ndef test_4(captured_output):\n    assert captured_output('NoColor') == ''\n\n\ndef test_5(captured_output):\n    assert captured_output('red') == 'red'\n\n\ndef test_6(captured_output):\n    assert captured_output('re') == ''\n\n\ndef test_7(captured_output):\n    assert captured_output('blu') == ''\n\n\ndef test_8(captured_output):\n    assert captured_output('blue') == 'blue'\n\n\ndef test_9(captured_output):\n    assert captured_output('a') == ''\n\n\ndef test_10(captured_output):\n    assert captured_output('') == ''\n\n\ndef test_11(captured_output):\n    assert captured_output('xyzred') == ''",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "redxx"
                        ],
                        "red"
                    ],
                    [
                        [
                            "xxred"
                        ],
                        ""
                    ],
                    [
                        [
                            "blueTimes"
                        ],
                        "blue"
                    ],
                    [
                        [
                            "NoColor"
                        ],
                        ""
                    ],
                    [
                        [
                            "red"
                        ],
                        "red"
                    ],
                    [
                        [
                            "re"
                        ],
                        ""
                    ],
                    [
                        [
                            "blu"
                        ],
                        ""
                    ],
                    [
                        [
                            "blue"
                        ],
                        "blue"
                    ],
                    [
                        [
                            "a"
                        ],
                        ""
                    ],
                    [
                        [
                            ""
                        ],
                        ""
                    ],
                    [
                        [
                            "xyzred"
                        ],
                        ""
                    ]
                ]
            },
            {
                "name": "front_again",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return true if the first 2 chars in the string also appear at the end of the string, such as with \"edited\".\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p196652) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('edited') == True\n\n\ndef test_2(captured_output):\n    assert captured_output('edit') == False\n\n\ndef test_3(captured_output):\n    assert captured_output('ed') == True\n\n\ndef test_4(captured_output):\n    assert captured_output('jj') == True\n\n\ndef test_5(captured_output):\n    assert captured_output('jjj') == True\n\n\ndef test_6(captured_output):\n    assert captured_output('jjjj') == True\n\n\ndef test_7(captured_output):\n    assert captured_output('jjjk') == False\n\n\ndef test_8(captured_output):\n    assert captured_output('x') == False\n\n\ndef test_9(captured_output):\n    assert captured_output('') == False\n\n\ndef test_10(captured_output):\n    assert captured_output('java') == False\n\n\ndef test_11(captured_output):\n    assert captured_output('javaja') == True",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "edited"
                        ],
                        true
                    ],
                    [
                        [
                            "edit"
                        ],
                        false
                    ],
                    [
                        [
                            "ed"
                        ],
                        true
                    ],
                    [
                        [
                            "jj"
                        ],
                        true
                    ],
                    [
                        [
                            "jjj"
                        ],
                        true
                    ],
                    [
                        [
                            "jjjj"
                        ],
                        true
                    ],
                    [
                        [
                            "jjjk"
                        ],
                        false
                    ],
                    [
                        [
                            "x"
                        ],
                        false
                    ],
                    [
                        [
                            ""
                        ],
                        false
                    ],
                    [
                        [
                            "java"
                        ],
                        false
                    ],
                    [
                        [
                            "javaja"
                        ],
                        true
                    ]
                ]
            },
            {
                "name": "min_cat",
                "topic": "",
                "requirements": [],
                "description": "Given two strings, append them together (known as \"concatenation\") and return the result. However, if the strings are different lengths, omit chars from the longer string so it is the same length as the shorter string. So \"Hello\" and \"Hi\" yield \"loHi\". The strings may be any length.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p105745) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Hello\\nHi') == 'loHi'\n\n\ndef test_2(captured_output):\n    assert captured_output('Hello\\njava') == 'ellojava'\n\n\ndef test_3(captured_output):\n    assert captured_output('java\\nHello') == 'javaello'\n\n\ndef test_4(captured_output):\n    assert captured_output('abc\\nx') == 'cx'\n\n\ndef test_5(captured_output):\n    assert captured_output('x\\nabc') == 'xc'\n\n\ndef test_6(captured_output):\n    assert captured_output('abc\\n') == ''",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Hello",
                            "Hi"
                        ],
                        "loHi"
                    ],
                    [
                        [
                            "Hello",
                            "java"
                        ],
                        "ellojava"
                    ],
                    [
                        [
                            "java",
                            "Hello"
                        ],
                        "javaello"
                    ],
                    [
                        [
                            "abc",
                            "x"
                        ],
                        "cx"
                    ],
                    [
                        [
                            "x",
                            "abc"
                        ],
                        "xc"
                    ],
                    [
                        [
                            "abc",
                            ""
                        ],
                        ""
                    ]
                ]
            },
            {
                "name": "extra_front",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a new string made of 3 copies of the first 2 chars of the original string. The string may be any length. If there are fewer than 2 chars, use whatever is there.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p172063) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Hello') == 'HeHeHe'\n\n\ndef test_2(captured_output):\n    assert captured_output('ab') == 'ababab'\n\n\ndef test_3(captured_output):\n    assert captured_output('H') == 'HHH'\n\n\ndef test_4(captured_output):\n    assert captured_output('') == ''\n\n\ndef test_5(captured_output):\n    assert captured_output('Candy') == 'CaCaCa'\n\n\ndef test_6(captured_output):\n    assert captured_output('Code') == 'CoCoCo'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Hello"
                        ],
                        "HeHeHe"
                    ],
                    [
                        [
                            "ab"
                        ],
                        "ababab"
                    ],
                    [
                        [
                            "H"
                        ],
                        "HHH"
                    ],
                    [
                        [
                            ""
                        ],
                        ""
                    ],
                    [
                        [
                            "Candy"
                        ],
                        "CaCaCa"
                    ],
                    [
                        [
                            "Code"
                        ],
                        "CoCoCo"
                    ]
                ]
            },
            {
                "name": "without_2",
                "topic": "",
                "requirements": [],
                "description": "Given a string, if a length 2 substring appears at both its beginning and end, return a string without the substring at the beginning, so \"HelloHe\" yields \"lloHe\". The substring may overlap with itself, so \"Hi\" yields \"\". Otherwise, return the original string unchanged.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p142247) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('HelloHe') == 'lloHe'\n\n\ndef test_2(captured_output):\n    assert captured_output('HelloHi') == 'HelloHi'\n\n\ndef test_3(captured_output):\n    assert captured_output('Hi') == ''\n\n\ndef test_4(captured_output):\n    assert captured_output('Chocolate') == 'Chocolate'\n\n\ndef test_5(captured_output):\n    assert captured_output('xxx') == 'x'\n\n\ndef test_6(captured_output):\n    assert captured_output('xx') == ''\n\n\ndef test_7(captured_output):\n    assert captured_output('x') == 'x'\n\n\ndef test_8(captured_output):\n    assert captured_output('') == ''\n\n\ndef test_9(captured_output):\n    assert captured_output('Fruits') == 'Fruits'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "HelloHe"
                        ],
                        "lloHe"
                    ],
                    [
                        [
                            "HelloHi"
                        ],
                        "HelloHi"
                    ],
                    [
                        [
                            "Hi"
                        ],
                        ""
                    ],
                    [
                        [
                            "Chocolate"
                        ],
                        "Chocolate"
                    ],
                    [
                        [
                            "xxx"
                        ],
                        "x"
                    ],
                    [
                        [
                            "xx"
                        ],
                        ""
                    ],
                    [
                        [
                            "x"
                        ],
                        "x"
                    ],
                    [
                        [
                            ""
                        ],
                        ""
                    ],
                    [
                        [
                            "Fruits"
                        ],
                        "Fruits"
                    ]
                ]
            },
            {
                "name": "de_front",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a version without the first 2 chars. Except keep the first char if it is 'a' and keep the second char if it is 'b'. The string may be any length. Harder than it looks.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p110141) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Hello') == 'llo'\n\n\ndef test_2(captured_output):\n    assert captured_output('java') == 'va'\n\n\ndef test_3(captured_output):\n    assert captured_output('away') == 'aay'\n\n\ndef test_4(captured_output):\n    assert captured_output('axy') == 'ay'\n\n\ndef test_5(captured_output):\n    assert captured_output('abc') == 'abc'\n\n\ndef test_6(captured_output):\n    assert captured_output('xby') == 'by'\n\n\ndef test_7(captured_output):\n    assert captured_output('ab') == 'ab'\n\n\ndef test_8(captured_output):\n    assert captured_output('ax') == 'a'\n\n\ndef test_9(captured_output):\n    assert captured_output('axb') == 'ab'\n\n\ndef test_10(captured_output):\n    assert captured_output('aaa') == 'aa'\n\n\ndef test_11(captured_output):\n    assert captured_output('xbc') == 'bc'\n\n\ndef test_12(captured_output):\n    assert captured_output('bbb') == 'bb'\n\n\ndef test_13(captured_output):\n    assert captured_output('bazz') == 'zz'\n\n\ndef test_14(captured_output):\n    assert captured_output('ba') == ''\n\n\ndef test_15(captured_output):\n    assert captured_output('abxyz') == 'abxyz'\n\n\ndef test_16(captured_output):\n    assert captured_output('hi') == ''\n\n\ndef test_17(captured_output):\n    assert captured_output('his') == 's'\n\n\ndef test_18(captured_output):\n    assert captured_output('xz') == ''\n\n\ndef test_19(captured_output):\n    assert captured_output('zzz') == 'z'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Hello"
                        ],
                        "llo"
                    ],
                    [
                        [
                            "java"
                        ],
                        "va"
                    ],
                    [
                        [
                            "away"
                        ],
                        "aay"
                    ],
                    [
                        [
                            "axy"
                        ],
                        "ay"
                    ],
                    [
                        [
                            "abc"
                        ],
                        "abc"
                    ],
                    [
                        [
                            "xby"
                        ],
                        "by"
                    ],
                    [
                        [
                            "ab"
                        ],
                        "ab"
                    ],
                    [
                        [
                            "ax"
                        ],
                        "a"
                    ],
                    [
                        [
                            "axb"
                        ],
                        "ab"
                    ],
                    [
                        [
                            "aaa"
                        ],
                        "aa"
                    ],
                    [
                        [
                            "xbc"
                        ],
                        "bc"
                    ],
                    [
                        [
                            "bbb"
                        ],
                        "bb"
                    ],
                    [
                        [
                            "bazz"
                        ],
                        "zz"
                    ],
                    [
                        [
                            "ba"
                        ],
                        ""
                    ],
                    [
                        [
                            "abxyz"
                        ],
                        "abxyz"
                    ],
                    [
                        [
                            "hi"
                        ],
                        ""
                    ],
                    [
                        [
                            "his"
                        ],
                        "s"
                    ],
                    [
                        [
                            "xz"
                        ],
                        ""
                    ],
                    [
                        [
                            "zzz"
                        ],
                        "z"
                    ]
                ]
            },
            {
                "name": "start_word",
                "topic": "",
                "requirements": [],
                "description": "Given a string and a second \"word\" string, we'll say that the word matches the string if it appears at the front of the string, except its first char does not need to match exactly. On a match, return the front of the string, or otherwise return the empty string. So, so with the string \"hippo\" the word \"hi\" returns \"hi\" and \"xip\" returns \"hip\". The word will be at least length 1.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p141494) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('hippo\\nhi') == 'hi'\n\n\ndef test_2(captured_output):\n    assert captured_output('hippo\\nxip') == 'hip'\n\n\ndef test_3(captured_output):\n    assert captured_output('hippo\\ni') == 'h'\n\n\ndef test_4(captured_output):\n    assert captured_output('hippo\\nix') == ''\n\n\ndef test_5(captured_output):\n    assert captured_output('h\\nix') == ''\n\n\ndef test_6(captured_output):\n    assert captured_output('\\ni') == ''\n\n\ndef test_7(captured_output):\n    assert captured_output('hip\\nzi') == 'hi'\n\n\ndef test_8(captured_output):\n    assert captured_output('hip\\nzip') == 'hip'\n\n\ndef test_9(captured_output):\n    assert captured_output('hip\\nzig') == ''\n\n\ndef test_10(captured_output):\n    assert captured_output('h\\nz') == 'h'\n\n\ndef test_11(captured_output):\n    assert captured_output('hippo\\nxippo') == 'hippo'\n\n\ndef test_12(captured_output):\n    assert captured_output('hippo\\nxyz') == ''\n\n\ndef test_13(captured_output):\n    assert captured_output('hippo\\nhip') == 'hip'\n\n\ndef test_14(captured_output):\n    assert captured_output('kitten\\ncit') == 'kit'\n\n\ndef test_15(captured_output):\n    assert captured_output('kit\\ncit') == 'kit'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "hippo",
                            "hi"
                        ],
                        "hi"
                    ],
                    [
                        [
                            "hippo",
                            "xip"
                        ],
                        "hip"
                    ],
                    [
                        [
                            "hippo",
                            "i"
                        ],
                        "h"
                    ],
                    [
                        [
                            "hippo",
                            "ix"
                        ],
                        ""
                    ],
                    [
                        [
                            "h",
                            "ix"
                        ],
                        ""
                    ],
                    [
                        [
                            "",
                            "i"
                        ],
                        ""
                    ],
                    [
                        [
                            "hip",
                            "zi"
                        ],
                        "hi"
                    ],
                    [
                        [
                            "hip",
                            "zip"
                        ],
                        "hip"
                    ],
                    [
                        [
                            "hip",
                            "zig"
                        ],
                        ""
                    ],
                    [
                        [
                            "h",
                            "z"
                        ],
                        "h"
                    ],
                    [
                        [
                            "hippo",
                            "xippo"
                        ],
                        "hippo"
                    ],
                    [
                        [
                            "hippo",
                            "xyz"
                        ],
                        ""
                    ],
                    [
                        [
                            "hippo",
                            "hip"
                        ],
                        "hip"
                    ],
                    [
                        [
                            "kitten",
                            "cit"
                        ],
                        "kit"
                    ],
                    [
                        [
                            "kit",
                            "cit"
                        ],
                        "kit"
                    ]
                ]
            },
            {
                "name": "without_x",
                "topic": "",
                "requirements": [],
                "description": "Given a string, if the first or last chars are 'x', return the string without those 'x' chars, and otherwise return the string unchanged.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p151940) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('xHix') == 'Hi'\n\n\ndef test_2(captured_output):\n    assert captured_output('xHi') == 'Hi'\n\n\ndef test_3(captured_output):\n    assert captured_output('Hxix') == 'Hxi'\n\n\ndef test_4(captured_output):\n    assert captured_output('Hi') == 'Hi'\n\n\ndef test_5(captured_output):\n    assert captured_output('xxHi') == 'xHi'\n\n\ndef test_6(captured_output):\n    assert captured_output('Hix') == 'Hi'\n\n\ndef test_7(captured_output):\n    assert captured_output('xaxbx') == 'axb'\n\n\ndef test_8(captured_output):\n    assert captured_output('xx') == ''\n\n\ndef test_9(captured_output):\n    assert captured_output('x') == ''\n\n\ndef test_10(captured_output):\n    assert captured_output('') == ''\n\n\ndef test_11(captured_output):\n    assert captured_output('Hello') == 'Hello'\n\n\ndef test_12(captured_output):\n    assert captured_output('Hexllo') == 'Hexllo'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "xHix"
                        ],
                        "Hi"
                    ],
                    [
                        [
                            "xHi"
                        ],
                        "Hi"
                    ],
                    [
                        [
                            "Hxix"
                        ],
                        "Hxi"
                    ],
                    [
                        [
                            "Hi"
                        ],
                        "Hi"
                    ],
                    [
                        [
                            "xxHi"
                        ],
                        "xHi"
                    ],
                    [
                        [
                            "Hix"
                        ],
                        "Hi"
                    ],
                    [
                        [
                            "xaxbx"
                        ],
                        "axb"
                    ],
                    [
                        [
                            "xx"
                        ],
                        ""
                    ],
                    [
                        [
                            "x"
                        ],
                        ""
                    ],
                    [
                        [
                            ""
                        ],
                        ""
                    ],
                    [
                        [
                            "Hello"
                        ],
                        "Hello"
                    ],
                    [
                        [
                            "Hexllo"
                        ],
                        "Hexllo"
                    ]
                ]
            },
            {
                "name": "without_x_2",
                "topic": "",
                "requirements": [],
                "description": "Given a string, if one or both of the first 2 chars is 'x', return the string without those 'x' chars, and otherwise return the string unchanged. This is a little harder than it looks.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p151359) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('xHi') == 'Hi'\n\n\ndef test_2(captured_output):\n    assert captured_output('Hxi') == 'Hi'\n\n\ndef test_3(captured_output):\n    assert captured_output('Hi') == 'Hi'\n\n\ndef test_4(captured_output):\n    assert captured_output('xxHi') == 'Hi'\n\n\ndef test_5(captured_output):\n    assert captured_output('Hix') == 'Hix'\n\n\ndef test_6(captured_output):\n    assert captured_output('xaxb') == 'axb'\n\n\ndef test_7(captured_output):\n    assert captured_output('xx') == ''\n\n\ndef test_8(captured_output):\n    assert captured_output('x') == ''\n\n\ndef test_9(captured_output):\n    assert captured_output('') == ''\n\n\ndef test_10(captured_output):\n    assert captured_output('Hello') == 'Hello'\n\n\ndef test_11(captured_output):\n    assert captured_output('Hexllo') == 'Hexllo'\n\n\ndef test_12(captured_output):\n    assert captured_output('xHxllo') == 'Hxllo'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "xHi"
                        ],
                        "Hi"
                    ],
                    [
                        [
                            "Hxi"
                        ],
                        "Hi"
                    ],
                    [
                        [
                            "Hi"
                        ],
                        "Hi"
                    ],
                    [
                        [
                            "xxHi"
                        ],
                        "Hi"
                    ],
                    [
                        [
                            "Hix"
                        ],
                        "Hix"
                    ],
                    [
                        [
                            "xaxb"
                        ],
                        "axb"
                    ],
                    [
                        [
                            "xx"
                        ],
                        ""
                    ],
                    [
                        [
                            "x"
                        ],
                        ""
                    ],
                    [
                        [
                            ""
                        ],
                        ""
                    ],
                    [
                        [
                            "Hello"
                        ],
                        "Hello"
                    ],
                    [
                        [
                            "Hexllo"
                        ],
                        "Hexllo"
                    ],
                    [
                        [
                            "xHxllo"
                        ],
                        "Hxllo"
                    ]
                ]
            }
        ],
        "String-2": [
            {
                "name": "double_char",
                "topic": "",
                "requirements": [],
                "description": "Get any string from the user, output a string where for every char in the original, there are two chars.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p165312) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('The') == 'TThhee'\n\n\ndef test_2(captured_output):\n    assert captured_output('AAbb') == 'AAAAbbbb'\n\n\ndef test_3(captured_output):\n    assert captured_output('Hi-There') == 'HHii--TThheerree'\n\n\ndef test_4(captured_output):\n    assert captured_output('Word!') == 'WWoorrdd!!'\n\n\ndef test_5(captured_output):\n    assert captured_output('!!') == '!!!!'\n\n\ndef test_6(captured_output):\n    assert captured_output('') == ''\n\n\ndef test_7(captured_output):\n    assert captured_output('a') == 'aa'\n\n\ndef test_8(captured_output):\n    assert captured_output('.') == '..'\n\n\ndef test_9(captured_output):\n    assert captured_output('aa') == 'aaaa'",
                "solution": "string = input()\n\nnew_string = \"\"\nfor c in string:\n    new_string += c + c\n\nprint(new_string)",
                "tests_io": [
                    [
                        [
                            "The"
                        ],
                        "TThhee"
                    ],
                    [
                        [
                            "AAbb"
                        ],
                        "AAAAbbbb"
                    ],
                    [
                        [
                            "Hi-There"
                        ],
                        "HHii--TThheerree"
                    ],
                    [
                        [
                            "Word!"
                        ],
                        "WWoorrdd!!"
                    ],
                    [
                        [
                            "!!"
                        ],
                        "!!!!"
                    ],
                    [
                        [
                            ""
                        ],
                        ""
                    ],
                    [
                        [
                            "a"
                        ],
                        "aa"
                    ],
                    [
                        [
                            "."
                        ],
                        ".."
                    ],
                    [
                        [
                            "aa"
                        ],
                        "aaaa"
                    ]
                ]
            },
            {
                "name": "count_hi",
                "topic": "",
                "requirements": [],
                "description": "Return the number of times that the string \"hi\" appears anywhere in the given string.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p147448) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('abc hi ho') == 1\n\n\ndef test_2(captured_output):\n    assert captured_output('ABChi hi') == 2\n\n\ndef test_3(captured_output):\n    assert captured_output('hihi') == 2\n\n\ndef test_4(captured_output):\n    assert captured_output('hiHIhi') == 2\n\n\ndef test_5(captured_output):\n    assert captured_output('') == 0\n\n\ndef test_6(captured_output):\n    assert captured_output('h') == 0\n\n\ndef test_7(captured_output):\n    assert captured_output('hi') == 1\n\n\ndef test_8(captured_output):\n    assert captured_output('Hi is no HI on ahI') == 0\n\n\ndef test_9(captured_output):\n    assert captured_output('hiho not HOHIhi') == 2",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "abc hi ho"
                        ],
                        1
                    ],
                    [
                        [
                            "ABChi hi"
                        ],
                        2
                    ],
                    [
                        [
                            "hihi"
                        ],
                        2
                    ],
                    [
                        [
                            "hiHIhi"
                        ],
                        2
                    ],
                    [
                        [
                            ""
                        ],
                        0
                    ],
                    [
                        [
                            "h"
                        ],
                        0
                    ],
                    [
                        [
                            "hi"
                        ],
                        1
                    ],
                    [
                        [
                            "Hi is no HI on ahI"
                        ],
                        0
                    ],
                    [
                        [
                            "hiho not HOHIhi"
                        ],
                        2
                    ]
                ]
            },
            {
                "name": "cat_dog",
                "topic": "",
                "requirements": [],
                "description": "Return true if the string \"cat\" and \"dog\" appear the same number of times in the given string.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p111624) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('catdog') == True\n\n\ndef test_2(captured_output):\n    assert captured_output('catcat') == False\n\n\ndef test_3(captured_output):\n    assert captured_output('1cat1cadodog') == True\n\n\ndef test_4(captured_output):\n    assert captured_output('catxxdogxxxdog') == False\n\n\ndef test_5(captured_output):\n    assert captured_output('catxdogxdogxcat') == True\n\n\ndef test_6(captured_output):\n    assert captured_output('catxdogxdogxca') == False\n\n\ndef test_7(captured_output):\n    assert captured_output('dogdogcat') == False\n\n\ndef test_8(captured_output):\n    assert captured_output('dogogcat') == True\n\n\ndef test_9(captured_output):\n    assert captured_output('dog') == False\n\n\ndef test_10(captured_output):\n    assert captured_output('cat') == False\n\n\ndef test_11(captured_output):\n    assert captured_output('ca') == True\n\n\ndef test_12(captured_output):\n    assert captured_output('c') == True\n\n\ndef test_13(captured_output):\n    assert captured_output('') == True",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "catdog"
                        ],
                        true
                    ],
                    [
                        [
                            "catcat"
                        ],
                        false
                    ],
                    [
                        [
                            "1cat1cadodog"
                        ],
                        true
                    ],
                    [
                        [
                            "catxxdogxxxdog"
                        ],
                        false
                    ],
                    [
                        [
                            "catxdogxdogxcat"
                        ],
                        true
                    ],
                    [
                        [
                            "catxdogxdogxca"
                        ],
                        false
                    ],
                    [
                        [
                            "dogdogcat"
                        ],
                        false
                    ],
                    [
                        [
                            "dogogcat"
                        ],
                        true
                    ],
                    [
                        [
                            "dog"
                        ],
                        false
                    ],
                    [
                        [
                            "cat"
                        ],
                        false
                    ],
                    [
                        [
                            "ca"
                        ],
                        true
                    ],
                    [
                        [
                            "c"
                        ],
                        true
                    ],
                    [
                        [
                            ""
                        ],
                        true
                    ]
                ]
            },
            {
                "name": "count_code",
                "topic": "",
                "requirements": [],
                "description": "Return the number of times that the string \"code\" appears anywhere in the given string, except we'll accept any letter for the 'd', so \"cope\" and \"cooe\" count.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p123614) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('aaacodebbb') == 1\n\n\ndef test_2(captured_output):\n    assert captured_output('codexxcode') == 2\n\n\ndef test_3(captured_output):\n    assert captured_output('cozexxcope') == 2\n\n\ndef test_4(captured_output):\n    assert captured_output('cozfxxcope') == 1\n\n\ndef test_5(captured_output):\n    assert captured_output('xxcozeyycop') == 1\n\n\ndef test_6(captured_output):\n    assert captured_output('cozcop') == 0\n\n\ndef test_7(captured_output):\n    assert captured_output('abcxyz') == 0\n\n\ndef test_8(captured_output):\n    assert captured_output('code') == 1\n\n\ndef test_9(captured_output):\n    assert captured_output('ode') == 0\n\n\ndef test_10(captured_output):\n    assert captured_output('c') == 0\n\n\ndef test_11(captured_output):\n    assert captured_output('') == 0\n\n\ndef test_12(captured_output):\n    assert captured_output('AAcodeBBcoleCCccoreDD') == 3\n\n\ndef test_13(captured_output):\n    assert captured_output('AAcodeBBcoleCCccorfDD') == 2\n\n\ndef test_14(captured_output):\n    assert captured_output('coAcodeBcoleccoreDD') == 3",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "aaacodebbb"
                        ],
                        1
                    ],
                    [
                        [
                            "codexxcode"
                        ],
                        2
                    ],
                    [
                        [
                            "cozexxcope"
                        ],
                        2
                    ],
                    [
                        [
                            "cozfxxcope"
                        ],
                        1
                    ],
                    [
                        [
                            "xxcozeyycop"
                        ],
                        1
                    ],
                    [
                        [
                            "cozcop"
                        ],
                        0
                    ],
                    [
                        [
                            "abcxyz"
                        ],
                        0
                    ],
                    [
                        [
                            "code"
                        ],
                        1
                    ],
                    [
                        [
                            "ode"
                        ],
                        0
                    ],
                    [
                        [
                            "c"
                        ],
                        0
                    ],
                    [
                        [
                            ""
                        ],
                        0
                    ],
                    [
                        [
                            "AAcodeBBcoleCCccoreDD"
                        ],
                        3
                    ],
                    [
                        [
                            "AAcodeBBcoleCCccorfDD"
                        ],
                        2
                    ],
                    [
                        [
                            "coAcodeBcoleccoreDD"
                        ],
                        3
                    ]
                ]
            },
            {
                "name": "end_other",
                "topic": "",
                "requirements": [],
                "description": "Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be \"case sensitive\"). Note:  str.toLowerCase() returns the lowercase version of a string.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p126880) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Hiabc\\nabc') == True\n\n\ndef test_2(captured_output):\n    assert captured_output('AbC\\nHiaBc') == True\n\n\ndef test_3(captured_output):\n    assert captured_output('abc\\nabXabc') == True\n\n\ndef test_4(captured_output):\n    assert captured_output('Hiabc\\nabcd') == False\n\n\ndef test_5(captured_output):\n    assert captured_output('Hiabc\\nbc') == True\n\n\ndef test_6(captured_output):\n    assert captured_output('Hiabcx\\nbc') == False\n\n\ndef test_7(captured_output):\n    assert captured_output('abc\\nabc') == True\n\n\ndef test_8(captured_output):\n    assert captured_output('xyz\\n12xyz') == True\n\n\ndef test_9(captured_output):\n    assert captured_output('yz\\n12xz') == False\n\n\ndef test_10(captured_output):\n    assert captured_output('Z\\n12xz') == True\n\n\ndef test_11(captured_output):\n    assert captured_output('12\\n12') == True\n\n\ndef test_12(captured_output):\n    assert captured_output('abcXYZ\\nabcDEF') == False\n\n\ndef test_13(captured_output):\n    assert captured_output('ab\\nab12') == False\n\n\ndef test_14(captured_output):\n    assert captured_output('ab\\n12ab') == True",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Hiabc",
                            "abc"
                        ],
                        true
                    ],
                    [
                        [
                            "AbC",
                            "HiaBc"
                        ],
                        true
                    ],
                    [
                        [
                            "abc",
                            "abXabc"
                        ],
                        true
                    ],
                    [
                        [
                            "Hiabc",
                            "abcd"
                        ],
                        false
                    ],
                    [
                        [
                            "Hiabc",
                            "bc"
                        ],
                        true
                    ],
                    [
                        [
                            "Hiabcx",
                            "bc"
                        ],
                        false
                    ],
                    [
                        [
                            "abc",
                            "abc"
                        ],
                        true
                    ],
                    [
                        [
                            "xyz",
                            "12xyz"
                        ],
                        true
                    ],
                    [
                        [
                            "yz",
                            "12xz"
                        ],
                        false
                    ],
                    [
                        [
                            "Z",
                            "12xz"
                        ],
                        true
                    ],
                    [
                        [
                            "12",
                            "12"
                        ],
                        true
                    ],
                    [
                        [
                            "abcXYZ",
                            "abcDEF"
                        ],
                        false
                    ],
                    [
                        [
                            "ab",
                            "ab12"
                        ],
                        false
                    ],
                    [
                        [
                            "ab",
                            "12ab"
                        ],
                        true
                    ]
                ]
            },
            {
                "name": "xyz_there",
                "topic": "",
                "requirements": [],
                "description": "Return true if the given string contains an appearance of \"xyz\" where the xyz is not directly preceeded by a period (.). So \"xxyz\" counts but \"x.xyz\" does not.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p136594) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('abcxyz') == True\n\n\ndef test_2(captured_output):\n    assert captured_output('abc.xyz') == False\n\n\ndef test_3(captured_output):\n    assert captured_output('xyz.abc') == True\n\n\ndef test_4(captured_output):\n    assert captured_output('abcxy') == False\n\n\ndef test_5(captured_output):\n    assert captured_output('xyz') == True\n\n\ndef test_6(captured_output):\n    assert captured_output('xy') == False\n\n\ndef test_7(captured_output):\n    assert captured_output('x') == False\n\n\ndef test_8(captured_output):\n    assert captured_output('') == False\n\n\ndef test_9(captured_output):\n    assert captured_output('abc.xyzxyz') == True\n\n\ndef test_10(captured_output):\n    assert captured_output('abc.xxyz') == True\n\n\ndef test_11(captured_output):\n    assert captured_output('.xyz') == False\n\n\ndef test_12(captured_output):\n    assert captured_output('12.xyz') == False\n\n\ndef test_13(captured_output):\n    assert captured_output('12xyz') == True\n\n\ndef test_14(captured_output):\n    assert captured_output('1.xyz.xyz2.xyz') == False",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "abcxyz"
                        ],
                        true
                    ],
                    [
                        [
                            "abc.xyz"
                        ],
                        false
                    ],
                    [
                        [
                            "xyz.abc"
                        ],
                        true
                    ],
                    [
                        [
                            "abcxy"
                        ],
                        false
                    ],
                    [
                        [
                            "xyz"
                        ],
                        true
                    ],
                    [
                        [
                            "xy"
                        ],
                        false
                    ],
                    [
                        [
                            "x"
                        ],
                        false
                    ],
                    [
                        [
                            ""
                        ],
                        false
                    ],
                    [
                        [
                            "abc.xyzxyz"
                        ],
                        true
                    ],
                    [
                        [
                            "abc.xxyz"
                        ],
                        true
                    ],
                    [
                        [
                            ".xyz"
                        ],
                        false
                    ],
                    [
                        [
                            "12.xyz"
                        ],
                        false
                    ],
                    [
                        [
                            "12xyz"
                        ],
                        true
                    ],
                    [
                        [
                            "1.xyz.xyz2.xyz"
                        ],
                        false
                    ]
                ]
            },
            {
                "name": "bob_there",
                "topic": "",
                "requirements": [],
                "description": "Return true if the given string contains a \"bob\" string, but where the middle 'o' char can be any char.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p175762) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('abcbob') == True\n\n\ndef test_2(captured_output):\n    assert captured_output('b9b') == True\n\n\ndef test_3(captured_output):\n    assert captured_output('bac') == False\n\n\ndef test_4(captured_output):\n    assert captured_output('bbb') == True\n\n\ndef test_5(captured_output):\n    assert captured_output('abcdefb') == False\n\n\ndef test_6(captured_output):\n    assert captured_output('123abcbcdbabxyz') == True\n\n\ndef test_7(captured_output):\n    assert captured_output('b12') == False\n\n\ndef test_8(captured_output):\n    assert captured_output('b1b') == True\n\n\ndef test_9(captured_output):\n    assert captured_output('b12b1b') == True\n\n\ndef test_10(captured_output):\n    assert captured_output('bbc') == False\n\n\ndef test_11(captured_output):\n    assert captured_output('bbb') == True\n\n\ndef test_12(captured_output):\n    assert captured_output('bb') == False\n\n\ndef test_13(captured_output):\n    assert captured_output('b') == False",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "abcbob"
                        ],
                        true
                    ],
                    [
                        [
                            "b9b"
                        ],
                        true
                    ],
                    [
                        [
                            "bac"
                        ],
                        false
                    ],
                    [
                        [
                            "bbb"
                        ],
                        true
                    ],
                    [
                        [
                            "abcdefb"
                        ],
                        false
                    ],
                    [
                        [
                            "123abcbcdbabxyz"
                        ],
                        true
                    ],
                    [
                        [
                            "b12"
                        ],
                        false
                    ],
                    [
                        [
                            "b1b"
                        ],
                        true
                    ],
                    [
                        [
                            "b12b1b"
                        ],
                        true
                    ],
                    [
                        [
                            "bbc"
                        ],
                        false
                    ],
                    [
                        [
                            "bbb"
                        ],
                        true
                    ],
                    [
                        [
                            "bb"
                        ],
                        false
                    ],
                    [
                        [
                            "b"
                        ],
                        false
                    ]
                ]
            },
            {
                "name": "xy_balance",
                "topic": "",
                "requirements": [],
                "description": "We'll say that a String is xy-balanced if for all the 'x' chars in the string, there exists a 'y' char somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p134250) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('aaxbby') == True\n\n\ndef test_2(captured_output):\n    assert captured_output('aaxbb') == False\n\n\ndef test_3(captured_output):\n    assert captured_output('yaaxbb') == False\n\n\ndef test_4(captured_output):\n    assert captured_output('yaaxbby') == True\n\n\ndef test_5(captured_output):\n    assert captured_output('xaxxbby') == True\n\n\ndef test_6(captured_output):\n    assert captured_output('xaxxbbyx') == False\n\n\ndef test_7(captured_output):\n    assert captured_output('xxbxy') == True\n\n\ndef test_8(captured_output):\n    assert captured_output('xxbx') == False\n\n\ndef test_9(captured_output):\n    assert captured_output('bbb') == True\n\n\ndef test_10(captured_output):\n    assert captured_output('bxbb') == False\n\n\ndef test_11(captured_output):\n    assert captured_output('bxyb') == True\n\n\ndef test_12(captured_output):\n    assert captured_output('xy') == True\n\n\ndef test_13(captured_output):\n    assert captured_output('y') == True\n\n\ndef test_14(captured_output):\n    assert captured_output('x') == False\n\n\ndef test_15(captured_output):\n    assert captured_output('') == True\n\n\ndef test_16(captured_output):\n    assert captured_output('yxyxyxyx') == False\n\n\ndef test_17(captured_output):\n    assert captured_output('yxyxyxyxy') == True\n\n\ndef test_18(captured_output):\n    assert captured_output('12xabxxydxyxyzz') == True",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "aaxbby"
                        ],
                        true
                    ],
                    [
                        [
                            "aaxbb"
                        ],
                        false
                    ],
                    [
                        [
                            "yaaxbb"
                        ],
                        false
                    ],
                    [
                        [
                            "yaaxbby"
                        ],
                        true
                    ],
                    [
                        [
                            "xaxxbby"
                        ],
                        true
                    ],
                    [
                        [
                            "xaxxbbyx"
                        ],
                        false
                    ],
                    [
                        [
                            "xxbxy"
                        ],
                        true
                    ],
                    [
                        [
                            "xxbx"
                        ],
                        false
                    ],
                    [
                        [
                            "bbb"
                        ],
                        true
                    ],
                    [
                        [
                            "bxbb"
                        ],
                        false
                    ],
                    [
                        [
                            "bxyb"
                        ],
                        true
                    ],
                    [
                        [
                            "xy"
                        ],
                        true
                    ],
                    [
                        [
                            "y"
                        ],
                        true
                    ],
                    [
                        [
                            "x"
                        ],
                        false
                    ],
                    [
                        [
                            ""
                        ],
                        true
                    ],
                    [
                        [
                            "yxyxyxyx"
                        ],
                        false
                    ],
                    [
                        [
                            "yxyxyxyxy"
                        ],
                        true
                    ],
                    [
                        [
                            "12xabxxydxyxyzz"
                        ],
                        true
                    ]
                ]
            },
            {
                "name": "mix_string",
                "topic": "",
                "requirements": [],
                "description": "Given two strings, <b>a</b> and <b>b</b>, create a bigger string made of the first char of a, the first char of b, the second char of a, the second char of b, and so on. Any leftover chars go at the end of the result.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p125185) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('abc\\nxyz') == 'axbycz'\n\n\ndef test_2(captured_output):\n    assert captured_output('Hi\\nThere') == 'HTihere'\n\n\ndef test_3(captured_output):\n    assert captured_output('xxxx\\nThere') == 'xTxhxexre'\n\n\ndef test_4(captured_output):\n    assert captured_output('xxx\\nX') == 'xXxx'\n\n\ndef test_5(captured_output):\n    assert captured_output('2/\\n27 around') == '22/7 around'\n\n\ndef test_6(captured_output):\n    assert captured_output('\\nHello') == 'Hello'\n\n\ndef test_7(captured_output):\n    assert captured_output('Abc\\n') == 'Abc'\n\n\ndef test_8(captured_output):\n    assert captured_output('\\n') == ''\n\n\ndef test_9(captured_output):\n    assert captured_output('a\\nb') == 'ab'\n\n\ndef test_10(captured_output):\n    assert captured_output('ax\\nb') == 'abx'\n\n\ndef test_11(captured_output):\n    assert captured_output('a\\nbx') == 'abx'\n\n\ndef test_12(captured_output):\n    assert captured_output('So\\nLong') == 'SLoong'\n\n\ndef test_13(captured_output):\n    assert captured_output('Long\\nSo') == 'LSoong'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "abc",
                            "xyz"
                        ],
                        "axbycz"
                    ],
                    [
                        [
                            "Hi",
                            "There"
                        ],
                        "HTihere"
                    ],
                    [
                        [
                            "xxxx",
                            "There"
                        ],
                        "xTxhxexre"
                    ],
                    [
                        [
                            "xxx",
                            "X"
                        ],
                        "xXxx"
                    ],
                    [
                        [
                            "2/",
                            "27 around"
                        ],
                        "22/7 around"
                    ],
                    [
                        [
                            "",
                            "Hello"
                        ],
                        "Hello"
                    ],
                    [
                        [
                            "Abc",
                            ""
                        ],
                        "Abc"
                    ],
                    [
                        [
                            "",
                            ""
                        ],
                        ""
                    ],
                    [
                        [
                            "a",
                            "b"
                        ],
                        "ab"
                    ],
                    [
                        [
                            "ax",
                            "b"
                        ],
                        "abx"
                    ],
                    [
                        [
                            "a",
                            "bx"
                        ],
                        "abx"
                    ],
                    [
                        [
                            "So",
                            "Long"
                        ],
                        "SLoong"
                    ],
                    [
                        [
                            "Long",
                            "So"
                        ],
                        "LSoong"
                    ]
                ]
            },
            {
                "name": "repeat_end",
                "topic": "",
                "requirements": [],
                "description": "Given a string and an int n, return a string made of n repetitions of the last n characters of the string. You may assume that n is between 0 and the length of the string, inclusive.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p152339) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Hello\\n3') == 'llollollo'\n\n\ndef test_2(captured_output):\n    assert captured_output('Hello\\n2') == 'lolo'\n\n\ndef test_3(captured_output):\n    assert captured_output('Hello\\n1') == 'o'\n\n\ndef test_4(captured_output):\n    assert captured_output('Hello\\n0') == ''\n\n\ndef test_5(captured_output):\n    assert captured_output('abc\\n3') == 'abcabcabc'\n\n\ndef test_6(captured_output):\n    assert captured_output('1234\\n2') == '3434'\n\n\ndef test_7(captured_output):\n    assert captured_output('1234\\n3') == '234234234'\n\n\ndef test_8(captured_output):\n    assert captured_output('\\n0') == ''",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Hello",
                            3
                        ],
                        "llollollo"
                    ],
                    [
                        [
                            "Hello",
                            2
                        ],
                        "lolo"
                    ],
                    [
                        [
                            "Hello",
                            1
                        ],
                        "o"
                    ],
                    [
                        [
                            "Hello",
                            0
                        ],
                        ""
                    ],
                    [
                        [
                            "abc",
                            3
                        ],
                        "abcabcabc"
                    ],
                    [
                        [
                            "1234",
                            2
                        ],
                        "3434"
                    ],
                    [
                        [
                            "1234",
                            3
                        ],
                        "234234234"
                    ],
                    [
                        [
                            "",
                            0
                        ],
                        ""
                    ]
                ]
            },
            {
                "name": "repeat_front",
                "topic": "",
                "requirements": [
                    "substrings and slicing",
                    "loop with a counter variable",
                    "string building and filtering"
                ],
                "description": "Given a string and an int n, return a string made of the first n characters of the string, followed by the first n-1 characters of the string, and so on. You may assume that n is between 0 and the length of the string, inclusive (i.e. n &gt;= 0 and n &lt;= str.length()).\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p128796) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Chocolate\\n4') == 'ChocChoChC'\n\n\ndef test_2(captured_output):\n    assert captured_output('Chocolate\\n3') == 'ChoChC'\n\n\ndef test_3(captured_output):\n    assert captured_output('Ice Cream\\n2') == 'IcI'\n\n\ndef test_4(captured_output):\n    assert captured_output('Ice Cream\\n1') == 'I'\n\n\ndef test_5(captured_output):\n    assert captured_output('Ice Cream\\n0') == ''\n\n\ndef test_6(captured_output):\n    assert captured_output('xyz\\n3') == 'xyzxyx'\n\n\ndef test_7(captured_output):\n    assert captured_output('\\n0') == ''\n\n\ndef test_8(captured_output):\n    assert captured_output('Java\\n4') == 'JavaJavJaJ'\n\n\ndef test_9(captured_output):\n    assert captured_output('Java\\n1') == 'J'",
                "solution": "string = input()\nn = int(input())\n\nnew_string = \"\"\nslice_size = n\nwhile slice_size > 0:\n    new_string += string[0:slice_size]\n    slice_size -= 1\n\nprint(new_string)",
                "tests_io": [
                    [
                        [
                            "Chocolate",
                            4
                        ],
                        "ChocChoChC"
                    ],
                    [
                        [
                            "Chocolate",
                            3
                        ],
                        "ChoChC"
                    ],
                    [
                        [
                            "Ice Cream",
                            2
                        ],
                        "IcI"
                    ],
                    [
                        [
                            "Ice Cream",
                            1
                        ],
                        "I"
                    ],
                    [
                        [
                            "Ice Cream",
                            0
                        ],
                        ""
                    ],
                    [
                        [
                            "xyz",
                            3
                        ],
                        "xyzxyx"
                    ],
                    [
                        [
                            "",
                            0
                        ],
                        ""
                    ],
                    [
                        [
                            "Java",
                            4
                        ],
                        "JavaJavJaJ"
                    ],
                    [
                        [
                            "Java",
                            1
                        ],
                        "J"
                    ]
                ]
            },
            {
                "name": "repeat_separator",
                "topic": "",
                "requirements": [],
                "description": "Given two strings, <b>word</b> and a separator <b>sep</b>, return a big string made of <b>count</b> occurrences of the word, separated by the separator string.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p109637) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Word\\nX\\n3') == 'WordXWordXWord'\n\n\ndef test_2(captured_output):\n    assert captured_output('This\\nAnd\\n2') == 'ThisAndThis'\n\n\ndef test_3(captured_output):\n    assert captured_output('This\\nAnd\\n1') == 'This'\n\n\ndef test_4(captured_output):\n    assert captured_output('Hi\\n-n-\\n2') == 'Hi-n-Hi'\n\n\ndef test_5(captured_output):\n    assert captured_output('AAA\\n\\n1') == 'AAA'\n\n\ndef test_6(captured_output):\n    assert captured_output('AAA\\n\\n0') == ''\n\n\ndef test_7(captured_output):\n    assert captured_output('A\\nB\\n5') == 'ABABABABA'\n\n\ndef test_8(captured_output):\n    assert captured_output('abc\\nXX\\n3') == 'abcXXabcXXabc'\n\n\ndef test_9(captured_output):\n    assert captured_output('abc\\nXX\\n2') == 'abcXXabc'\n\n\ndef test_10(captured_output):\n    assert captured_output('abc\\nXX\\n1') == 'abc'\n\n\ndef test_11(captured_output):\n    assert captured_output('XYZ\\na\\n2') == 'XYZaXYZ'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Word",
                            "X",
                            3
                        ],
                        "WordXWordXWord"
                    ],
                    [
                        [
                            "This",
                            "And",
                            2
                        ],
                        "ThisAndThis"
                    ],
                    [
                        [
                            "This",
                            "And",
                            1
                        ],
                        "This"
                    ],
                    [
                        [
                            "Hi",
                            "-n-",
                            2
                        ],
                        "Hi-n-Hi"
                    ],
                    [
                        [
                            "AAA",
                            "",
                            1
                        ],
                        "AAA"
                    ],
                    [
                        [
                            "AAA",
                            "",
                            0
                        ],
                        ""
                    ],
                    [
                        [
                            "A",
                            "B",
                            5
                        ],
                        "ABABABABA"
                    ],
                    [
                        [
                            "abc",
                            "XX",
                            3
                        ],
                        "abcXXabcXXabc"
                    ],
                    [
                        [
                            "abc",
                            "XX",
                            2
                        ],
                        "abcXXabc"
                    ],
                    [
                        [
                            "abc",
                            "XX",
                            1
                        ],
                        "abc"
                    ],
                    [
                        [
                            "XYZ",
                            "a",
                            2
                        ],
                        "XYZaXYZ"
                    ]
                ]
            },
            {
                "name": "prefix_again",
                "topic": "",
                "requirements": [],
                "description": "Given a string, consider the prefix string made of the first N chars of the string. Does that prefix string appear somewhere else in the string? Assume that the string is not empty and that N is in the range 1..str.length().\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p136417) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('abXYabc\\n1') == True\n\n\ndef test_2(captured_output):\n    assert captured_output('abXYabc\\n2') == True\n\n\ndef test_3(captured_output):\n    assert captured_output('abXYabc\\n3') == False\n\n\ndef test_4(captured_output):\n    assert captured_output('xyzxyxyxy\\n2') == True\n\n\ndef test_5(captured_output):\n    assert captured_output('xyzxyxyxy\\n3') == False\n\n\ndef test_6(captured_output):\n    assert captured_output('Hi12345Hi6789Hi10\\n1') == True\n\n\ndef test_7(captured_output):\n    assert captured_output('Hi12345Hi6789Hi10\\n2') == True\n\n\ndef test_8(captured_output):\n    assert captured_output('Hi12345Hi6789Hi10\\n3') == True\n\n\ndef test_9(captured_output):\n    assert captured_output('Hi12345Hi6789Hi10\\n4') == False\n\n\ndef test_10(captured_output):\n    assert captured_output('a\\n1') == False\n\n\ndef test_11(captured_output):\n    assert captured_output('aa\\n1') == True\n\n\ndef test_12(captured_output):\n    assert captured_output('ab\\n1') == False",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "abXYabc",
                            1
                        ],
                        true
                    ],
                    [
                        [
                            "abXYabc",
                            2
                        ],
                        true
                    ],
                    [
                        [
                            "abXYabc",
                            3
                        ],
                        false
                    ],
                    [
                        [
                            "xyzxyxyxy",
                            2
                        ],
                        true
                    ],
                    [
                        [
                            "xyzxyxyxy",
                            3
                        ],
                        false
                    ],
                    [
                        [
                            "Hi12345Hi6789Hi10",
                            1
                        ],
                        true
                    ],
                    [
                        [
                            "Hi12345Hi6789Hi10",
                            2
                        ],
                        true
                    ],
                    [
                        [
                            "Hi12345Hi6789Hi10",
                            3
                        ],
                        true
                    ],
                    [
                        [
                            "Hi12345Hi6789Hi10",
                            4
                        ],
                        false
                    ],
                    [
                        [
                            "a",
                            1
                        ],
                        false
                    ],
                    [
                        [
                            "aa",
                            1
                        ],
                        true
                    ],
                    [
                        [
                            "ab",
                            1
                        ],
                        false
                    ]
                ]
            },
            {
                "name": "xyz_middle",
                "topic": "",
                "requirements": [],
                "description": "Given a string, does \"xyz\" appear in the middle of the string? To define middle, we'll say that the number of chars to the left and right of the \"xyz\" must differ by at most one. This problem is harder than it looks.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p159772) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('AAxyzBB') == True\n\n\ndef test_2(captured_output):\n    assert captured_output('AxyzBB') == True\n\n\ndef test_3(captured_output):\n    assert captured_output('AxyzBBB') == False\n\n\ndef test_4(captured_output):\n    assert captured_output('AxyzBBBB') == False\n\n\ndef test_5(captured_output):\n    assert captured_output('AAAxyzB') == False\n\n\ndef test_6(captured_output):\n    assert captured_output('AAAxyzBB') == True\n\n\ndef test_7(captured_output):\n    assert captured_output('AAAAxyzBB') == False\n\n\ndef test_8(captured_output):\n    assert captured_output('AAAAAxyzBBB') == False\n\n\ndef test_9(captured_output):\n    assert captured_output('1x345xyz12x4') == True\n\n\ndef test_10(captured_output):\n    assert captured_output('xyzAxyzBBB') == True\n\n\ndef test_11(captured_output):\n    assert captured_output('xyzAxyzBxyz') == True\n\n\ndef test_12(captured_output):\n    assert captured_output('xyzxyzAxyzBxyzxyz') == True\n\n\ndef test_13(captured_output):\n    assert captured_output('xyzxyzxyzBxyzxyz') == True\n\n\ndef test_14(captured_output):\n    assert captured_output('xyzxyzAxyzxyzxyz') == True\n\n\ndef test_15(captured_output):\n    assert captured_output('xyzxyzAxyzxyzxy') == False\n\n\ndef test_16(captured_output):\n    assert captured_output('AxyzxyzBB') == False\n\n\ndef test_17(captured_output):\n    assert captured_output('') == False\n\n\ndef test_18(captured_output):\n    assert captured_output('x') == False\n\n\ndef test_19(captured_output):\n    assert captured_output('xy') == False\n\n\ndef test_20(captured_output):\n    assert captured_output('xyz') == True\n\n\ndef test_21(captured_output):\n    assert captured_output('xyzz') == True",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "AAxyzBB"
                        ],
                        true
                    ],
                    [
                        [
                            "AxyzBB"
                        ],
                        true
                    ],
                    [
                        [
                            "AxyzBBB"
                        ],
                        false
                    ],
                    [
                        [
                            "AxyzBBBB"
                        ],
                        false
                    ],
                    [
                        [
                            "AAAxyzB"
                        ],
                        false
                    ],
                    [
                        [
                            "AAAxyzBB"
                        ],
                        true
                    ],
                    [
                        [
                            "AAAAxyzBB"
                        ],
                        false
                    ],
                    [
                        [
                            "AAAAAxyzBBB"
                        ],
                        false
                    ],
                    [
                        [
                            "1x345xyz12x4"
                        ],
                        true
                    ],
                    [
                        [
                            "xyzAxyzBBB"
                        ],
                        true
                    ],
                    [
                        [
                            "xyzAxyzBxyz"
                        ],
                        true
                    ],
                    [
                        [
                            "xyzxyzAxyzBxyzxyz"
                        ],
                        true
                    ],
                    [
                        [
                            "xyzxyzxyzBxyzxyz"
                        ],
                        true
                    ],
                    [
                        [
                            "xyzxyzAxyzxyzxyz"
                        ],
                        true
                    ],
                    [
                        [
                            "xyzxyzAxyzxyzxy"
                        ],
                        false
                    ],
                    [
                        [
                            "AxyzxyzBB"
                        ],
                        false
                    ],
                    [
                        [
                            ""
                        ],
                        false
                    ],
                    [
                        [
                            "x"
                        ],
                        false
                    ],
                    [
                        [
                            "xy"
                        ],
                        false
                    ],
                    [
                        [
                            "xyz"
                        ],
                        true
                    ],
                    [
                        [
                            "xyzz"
                        ],
                        true
                    ]
                ]
            },
            {
                "name": "get_sandwich",
                "topic": "",
                "requirements": [],
                "description": "A sandwich is two pieces of bread with something in between. Return the string that is between the first and last appearance of \"bread\" in the given string, or return the empty string \"\" if there are not two pieces of bread.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p129952) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('breadjambread') == 'jam'\n\n\ndef test_2(captured_output):\n    assert captured_output('xxbreadjambreadyy') == 'jam'\n\n\ndef test_3(captured_output):\n    assert captured_output('xxbreadyy') == ''\n\n\ndef test_4(captured_output):\n    assert captured_output('xxbreadbreadjambreadyy') == 'breadjam'\n\n\ndef test_5(captured_output):\n    assert captured_output('breadAbread') == 'A'\n\n\ndef test_6(captured_output):\n    assert captured_output('breadbread') == ''\n\n\ndef test_7(captured_output):\n    assert captured_output('abcbreaz') == ''\n\n\ndef test_8(captured_output):\n    assert captured_output('xyz') == ''\n\n\ndef test_9(captured_output):\n    assert captured_output('') == ''\n\n\ndef test_10(captured_output):\n    assert captured_output('breadbreaxbread') == 'breax'\n\n\ndef test_11(captured_output):\n    assert captured_output('breaxbreadybread') == 'y'\n\n\ndef test_12(captured_output):\n    assert captured_output('breadbreadbreadbread') == 'breadbread'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "breadjambread"
                        ],
                        "jam"
                    ],
                    [
                        [
                            "xxbreadjambreadyy"
                        ],
                        "jam"
                    ],
                    [
                        [
                            "xxbreadyy"
                        ],
                        ""
                    ],
                    [
                        [
                            "xxbreadbreadjambreadyy"
                        ],
                        "breadjam"
                    ],
                    [
                        [
                            "breadAbread"
                        ],
                        "A"
                    ],
                    [
                        [
                            "breadbread"
                        ],
                        ""
                    ],
                    [
                        [
                            "abcbreaz"
                        ],
                        ""
                    ],
                    [
                        [
                            "xyz"
                        ],
                        ""
                    ],
                    [
                        [
                            ""
                        ],
                        ""
                    ],
                    [
                        [
                            "breadbreaxbread"
                        ],
                        "breax"
                    ],
                    [
                        [
                            "breaxbreadybread"
                        ],
                        "y"
                    ],
                    [
                        [
                            "breadbreadbreadbread"
                        ],
                        "breadbread"
                    ]
                ]
            },
            {
                "name": "same_star_char",
                "topic": "",
                "requirements": [],
                "description": "Returns true if for every '*' (star) in the string, if there are chars both immediately before and after the star, they are the same.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p194491) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('xy*yzz') == True\n\n\ndef test_2(captured_output):\n    assert captured_output('xy*zzz') == False\n\n\ndef test_3(captured_output):\n    assert captured_output('*xa*az') == True\n\n\ndef test_4(captured_output):\n    assert captured_output('*xa*bz') == False\n\n\ndef test_5(captured_output):\n    assert captured_output('*xa*a*') == True\n\n\ndef test_6(captured_output):\n    assert captured_output('') == True\n\n\ndef test_7(captured_output):\n    assert captured_output('*xa*a*a') == True\n\n\ndef test_8(captured_output):\n    assert captured_output('*xa*a*b') == False\n\n\ndef test_9(captured_output):\n    assert captured_output('*12*2*2') == True\n\n\ndef test_10(captured_output):\n    assert captured_output('12*2*3*') == False\n\n\ndef test_11(captured_output):\n    assert captured_output('abcDEF') == True\n\n\ndef test_12(captured_output):\n    assert captured_output('XY*YYYY*Z*') == False\n\n\ndef test_13(captured_output):\n    assert captured_output('XY*YYYY*Y*') == True\n\n\ndef test_14(captured_output):\n    assert captured_output('12*2*3*') == False\n\n\ndef test_15(captured_output):\n    assert captured_output('*') == True\n\n\ndef test_16(captured_output):\n    assert captured_output('**') == True",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "xy*yzz"
                        ],
                        true
                    ],
                    [
                        [
                            "xy*zzz"
                        ],
                        false
                    ],
                    [
                        [
                            "*xa*az"
                        ],
                        true
                    ],
                    [
                        [
                            "*xa*bz"
                        ],
                        false
                    ],
                    [
                        [
                            "*xa*a*"
                        ],
                        true
                    ],
                    [
                        [
                            ""
                        ],
                        true
                    ],
                    [
                        [
                            "*xa*a*a"
                        ],
                        true
                    ],
                    [
                        [
                            "*xa*a*b"
                        ],
                        false
                    ],
                    [
                        [
                            "*12*2*2"
                        ],
                        true
                    ],
                    [
                        [
                            "12*2*3*"
                        ],
                        false
                    ],
                    [
                        [
                            "abcDEF"
                        ],
                        true
                    ],
                    [
                        [
                            "XY*YYYY*Z*"
                        ],
                        false
                    ],
                    [
                        [
                            "XY*YYYY*Y*"
                        ],
                        true
                    ],
                    [
                        [
                            "12*2*3*"
                        ],
                        false
                    ],
                    [
                        [
                            "*"
                        ],
                        true
                    ],
                    [
                        [
                            "**"
                        ],
                        true
                    ]
                ]
            },
            {
                "name": "one_two",
                "topic": "",
                "requirements": [],
                "description": "Given a string, compute a new string by moving the first char to come after the next two chars, so \"abc\" yields \"bca\". Repeat this process for each subsequent group of 3 chars, so \"abcdef\" yields \"bcaefd\". Ignore any group of fewer than 3 chars at the end.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p122943) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('abc') == 'bca'\n\n\ndef test_2(captured_output):\n    assert captured_output('tca') == 'cat'\n\n\ndef test_3(captured_output):\n    assert captured_output('tcagdo') == 'catdog'\n\n\ndef test_4(captured_output):\n    assert captured_output('chocolate') == 'hocolctea'\n\n\ndef test_5(captured_output):\n    assert captured_output('1234567890') == '231564897'\n\n\ndef test_6(captured_output):\n    assert captured_output('xabxabxabxabxabxabxab') == 'abxabxabxabxabxabxabx'\n\n\ndef test_7(captured_output):\n    assert captured_output('abcdefx') == 'bcaefd'\n\n\ndef test_8(captured_output):\n    assert captured_output('abcdefxy') == 'bcaefd'\n\n\ndef test_9(captured_output):\n    assert captured_output('abcdefxyz') == 'bcaefdyzx'\n\n\ndef test_10(captured_output):\n    assert captured_output('') == ''\n\n\ndef test_11(captured_output):\n    assert captured_output('x') == ''\n\n\ndef test_12(captured_output):\n    assert captured_output('xy') == ''\n\n\ndef test_13(captured_output):\n    assert captured_output('xyz') == 'yzx'\n\n\ndef test_14(captured_output):\n    assert captured_output('abcdefghijklkmnopqrstuvwxyz1234567890') == 'bcaefdhigkljmnkpqostrvwuyzx231564897'\n\n\ndef test_15(captured_output):\n    assert captured_output('abcdefghijklkmnopqrstuvwxyz123456789') == 'bcaefdhigkljmnkpqostrvwuyzx231564897'\n\n\ndef test_16(captured_output):\n    assert captured_output('abcdefghijklkmnopqrstuvwxyz12345678') == 'bcaefdhigkljmnkpqostrvwuyzx231564'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "abc"
                        ],
                        "bca"
                    ],
                    [
                        [
                            "tca"
                        ],
                        "cat"
                    ],
                    [
                        [
                            "tcagdo"
                        ],
                        "catdog"
                    ],
                    [
                        [
                            "chocolate"
                        ],
                        "hocolctea"
                    ],
                    [
                        [
                            "1234567890"
                        ],
                        "231564897"
                    ],
                    [
                        [
                            "xabxabxabxabxabxabxab"
                        ],
                        "abxabxabxabxabxabxabx"
                    ],
                    [
                        [
                            "abcdefx"
                        ],
                        "bcaefd"
                    ],
                    [
                        [
                            "abcdefxy"
                        ],
                        "bcaefd"
                    ],
                    [
                        [
                            "abcdefxyz"
                        ],
                        "bcaefdyzx"
                    ],
                    [
                        [
                            ""
                        ],
                        ""
                    ],
                    [
                        [
                            "x"
                        ],
                        ""
                    ],
                    [
                        [
                            "xy"
                        ],
                        ""
                    ],
                    [
                        [
                            "xyz"
                        ],
                        "yzx"
                    ],
                    [
                        [
                            "abcdefghijklkmnopqrstuvwxyz1234567890"
                        ],
                        "bcaefdhigkljmnkpqostrvwuyzx231564897"
                    ],
                    [
                        [
                            "abcdefghijklkmnopqrstuvwxyz123456789"
                        ],
                        "bcaefdhigkljmnkpqostrvwuyzx231564897"
                    ],
                    [
                        [
                            "abcdefghijklkmnopqrstuvwxyz12345678"
                        ],
                        "bcaefdhigkljmnkpqostrvwuyzx231564"
                    ]
                ]
            },
            {
                "name": "zip_zap",
                "topic": "",
                "requirements": [],
                "description": "Look for patterns like \"zip\" and \"zap\" in the string -- length-3, starting with 'z' and ending with 'p'. Return a string where for all such words, the middle letter is gone, so \"zipXzap\" yields \"zpXzp\".\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p180759) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('zipXzap') == 'zpXzp'\n\n\ndef test_2(captured_output):\n    assert captured_output('zopzop') == 'zpzp'\n\n\ndef test_3(captured_output):\n    assert captured_output('zzzopzop') == 'zzzpzp'\n\n\ndef test_4(captured_output):\n    assert captured_output('zibzap') == 'zibzp'\n\n\ndef test_5(captured_output):\n    assert captured_output('zip') == 'zp'\n\n\ndef test_6(captured_output):\n    assert captured_output('zi') == 'zi'\n\n\ndef test_7(captured_output):\n    assert captured_output('z') == 'z'\n\n\ndef test_8(captured_output):\n    assert captured_output('') == ''\n\n\ndef test_9(captured_output):\n    assert captured_output('zzp') == 'zp'\n\n\ndef test_10(captured_output):\n    assert captured_output('abcppp') == 'abcppp'\n\n\ndef test_11(captured_output):\n    assert captured_output('azbcppp') == 'azbcppp'\n\n\ndef test_12(captured_output):\n    assert captured_output('azbcpzpp') == 'azbcpzp'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "zipXzap"
                        ],
                        "zpXzp"
                    ],
                    [
                        [
                            "zopzop"
                        ],
                        "zpzp"
                    ],
                    [
                        [
                            "zzzopzop"
                        ],
                        "zzzpzp"
                    ],
                    [
                        [
                            "zibzap"
                        ],
                        "zibzp"
                    ],
                    [
                        [
                            "zip"
                        ],
                        "zp"
                    ],
                    [
                        [
                            "zi"
                        ],
                        "zi"
                    ],
                    [
                        [
                            "z"
                        ],
                        "z"
                    ],
                    [
                        [
                            ""
                        ],
                        ""
                    ],
                    [
                        [
                            "zzp"
                        ],
                        "zp"
                    ],
                    [
                        [
                            "abcppp"
                        ],
                        "abcppp"
                    ],
                    [
                        [
                            "azbcppp"
                        ],
                        "azbcppp"
                    ],
                    [
                        [
                            "azbcpzpp"
                        ],
                        "azbcpzp"
                    ]
                ]
            },
            {
                "name": "star_out",
                "topic": "",
                "requirements": [],
                "description": "Return a version of the given string, where for every star (*) in the string the star and the chars immediately to its left and right are gone. So \"ab*cd\" yields \"ad\" and \"ab**cd\" also yields \"ad\".\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p139564) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('ab*cd') == 'ad'\n\n\ndef test_2(captured_output):\n    assert captured_output('ab**cd') == 'ad'\n\n\ndef test_3(captured_output):\n    assert captured_output('sm*eilly') == 'silly'\n\n\ndef test_4(captured_output):\n    assert captured_output('sm*eil*ly') == 'siy'\n\n\ndef test_5(captured_output):\n    assert captured_output('sm**eil*ly') == 'siy'\n\n\ndef test_6(captured_output):\n    assert captured_output('sm***eil*ly') == 'siy'\n\n\ndef test_7(captured_output):\n    assert captured_output('stringy*') == 'string'\n\n\ndef test_8(captured_output):\n    assert captured_output('*stringy') == 'tringy'\n\n\ndef test_9(captured_output):\n    assert captured_output('*str*in*gy') == 'ty'\n\n\ndef test_10(captured_output):\n    assert captured_output('abc') == 'abc'\n\n\ndef test_11(captured_output):\n    assert captured_output('a*bc') == 'c'\n\n\ndef test_12(captured_output):\n    assert captured_output('ab') == 'ab'\n\n\ndef test_13(captured_output):\n    assert captured_output('a*b') == ''\n\n\ndef test_14(captured_output):\n    assert captured_output('a') == 'a'\n\n\ndef test_15(captured_output):\n    assert captured_output('a*') == ''\n\n\ndef test_16(captured_output):\n    assert captured_output('*a') == ''\n\n\ndef test_17(captured_output):\n    assert captured_output('*') == ''\n\n\ndef test_18(captured_output):\n    assert captured_output('') == ''",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "ab*cd"
                        ],
                        "ad"
                    ],
                    [
                        [
                            "ab**cd"
                        ],
                        "ad"
                    ],
                    [
                        [
                            "sm*eilly"
                        ],
                        "silly"
                    ],
                    [
                        [
                            "sm*eil*ly"
                        ],
                        "siy"
                    ],
                    [
                        [
                            "sm**eil*ly"
                        ],
                        "siy"
                    ],
                    [
                        [
                            "sm***eil*ly"
                        ],
                        "siy"
                    ],
                    [
                        [
                            "stringy*"
                        ],
                        "string"
                    ],
                    [
                        [
                            "*stringy"
                        ],
                        "tringy"
                    ],
                    [
                        [
                            "*str*in*gy"
                        ],
                        "ty"
                    ],
                    [
                        [
                            "abc"
                        ],
                        "abc"
                    ],
                    [
                        [
                            "a*bc"
                        ],
                        "c"
                    ],
                    [
                        [
                            "ab"
                        ],
                        "ab"
                    ],
                    [
                        [
                            "a*b"
                        ],
                        ""
                    ],
                    [
                        [
                            "a"
                        ],
                        "a"
                    ],
                    [
                        [
                            "a*"
                        ],
                        ""
                    ],
                    [
                        [
                            "*a"
                        ],
                        ""
                    ],
                    [
                        [
                            "*"
                        ],
                        ""
                    ],
                    [
                        [
                            ""
                        ],
                        ""
                    ]
                ]
            },
            {
                "name": "plus_out",
                "topic": "",
                "requirements": [],
                "description": "Given a string and a non-empty <b>word</b> string, return a version of the original String where all chars have been replaced by pluses (\"+\"), except for appearances of the word string which are preserved unchanged.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p170829) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('12xy34\\nxy') == '++xy++'\n\n\ndef test_2(captured_output):\n    assert captured_output('12xy34\\n1') == '1+++++'\n\n\ndef test_3(captured_output):\n    assert captured_output('12xy34xyabcxy\\nxy') == '++xy++xy+++xy'\n\n\ndef test_4(captured_output):\n    assert captured_output('abXYabcXYZ\\nab') == 'ab++ab++++'\n\n\ndef test_5(captured_output):\n    assert captured_output('abXYabcXYZ\\nabc') == '++++abc+++'\n\n\ndef test_6(captured_output):\n    assert captured_output('abXYabcXYZ\\nXY') == '++XY+++XY+'\n\n\ndef test_7(captured_output):\n    assert captured_output('abXYxyzXYZ\\nXYZ') == '+++++++XYZ'\n\n\ndef test_8(captured_output):\n    assert captured_output('--++ab\\n++') == '++++++'\n\n\ndef test_9(captured_output):\n    assert captured_output('aaxxxxbb\\nxx') == '++xxxx++'\n\n\ndef test_10(captured_output):\n    assert captured_output('123123\\n3') == '++3++3'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "12xy34",
                            "xy"
                        ],
                        "++xy++"
                    ],
                    [
                        [
                            "12xy34",
                            "1"
                        ],
                        "1+++++"
                    ],
                    [
                        [
                            "12xy34xyabcxy",
                            "xy"
                        ],
                        "++xy++xy+++xy"
                    ],
                    [
                        [
                            "abXYabcXYZ",
                            "ab"
                        ],
                        "ab++ab++++"
                    ],
                    [
                        [
                            "abXYabcXYZ",
                            "abc"
                        ],
                        "++++abc+++"
                    ],
                    [
                        [
                            "abXYabcXYZ",
                            "XY"
                        ],
                        "++XY+++XY+"
                    ],
                    [
                        [
                            "abXYxyzXYZ",
                            "XYZ"
                        ],
                        "+++++++XYZ"
                    ],
                    [
                        [
                            "--++ab",
                            "++"
                        ],
                        "++++++"
                    ],
                    [
                        [
                            "aaxxxxbb",
                            "xx"
                        ],
                        "++xxxx++"
                    ],
                    [
                        [
                            "123123",
                            "3"
                        ],
                        "++3++3"
                    ]
                ]
            },
            {
                "name": "word_ends",
                "topic": "",
                "requirements": [],
                "description": "Given a string and a non-empty <b>word</b> string, return a string made of each char just before and just after every appearance of the word in the string. Ignore cases where there is no char before or after the word, and a char may be included twice if it is between two words.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p147538) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('abcXY123XYijk\\nXY') == 'c13i'\n\n\ndef test_2(captured_output):\n    assert captured_output('XY123XY\\nXY') == '13'\n\n\ndef test_3(captured_output):\n    assert captured_output('XY1XY\\nXY') == '11'\n\n\ndef test_4(captured_output):\n    assert captured_output('XYXY\\nXY') == 'XY'\n\n\ndef test_5(captured_output):\n    assert captured_output('XY\\nXY') == ''\n\n\ndef test_6(captured_output):\n    assert captured_output('Hi\\nXY') == ''\n\n\ndef test_7(captured_output):\n    assert captured_output('\\nXY') == ''\n\n\ndef test_8(captured_output):\n    assert captured_output('abc1xyz1i1j\\n1') == 'cxziij'\n\n\ndef test_9(captured_output):\n    assert captured_output('abc1xyz1\\n1') == 'cxz'\n\n\ndef test_10(captured_output):\n    assert captured_output('abc1xyz11\\n1') == 'cxz11'\n\n\ndef test_11(captured_output):\n    assert captured_output('abc1xyz1abc\\nabc') == '11'\n\n\ndef test_12(captured_output):\n    assert captured_output('abc1xyz1abc\\nb') == 'acac'\n\n\ndef test_13(captured_output):\n    assert captured_output('abc1abc1abc\\nabc') == '1111'",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "abcXY123XYijk",
                            "XY"
                        ],
                        "c13i"
                    ],
                    [
                        [
                            "XY123XY",
                            "XY"
                        ],
                        "13"
                    ],
                    [
                        [
                            "XY1XY",
                            "XY"
                        ],
                        "11"
                    ],
                    [
                        [
                            "XYXY",
                            "XY"
                        ],
                        "XY"
                    ],
                    [
                        [
                            "XY",
                            "XY"
                        ],
                        ""
                    ],
                    [
                        [
                            "Hi",
                            "XY"
                        ],
                        ""
                    ],
                    [
                        [
                            "",
                            "XY"
                        ],
                        ""
                    ],
                    [
                        [
                            "abc1xyz1i1j",
                            "1"
                        ],
                        "cxziij"
                    ],
                    [
                        [
                            "abc1xyz1",
                            "1"
                        ],
                        "cxz"
                    ],
                    [
                        [
                            "abc1xyz11",
                            "1"
                        ],
                        "cxz11"
                    ],
                    [
                        [
                            "abc1xyz1abc",
                            "abc"
                        ],
                        "11"
                    ],
                    [
                        [
                            "abc1xyz1abc",
                            "b"
                        ],
                        "acac"
                    ],
                    [
                        [
                            "abc1abc1abc",
                            "abc"
                        ],
                        "1111"
                    ]
                ]
            }
        ],
        "Warmup-1": [
            {
                "name": "sleep_in",
                "topic": "",
                "requirements": [],
                "description": "Ask the user if today is a weekday. Also ask them if today is a vacation. You sleep in if it is not a weekday or we're on vacation. Output a message telling the user if they sleep in today. For the test cases below, `False` means \"no\" and `True` means \"yes\". \n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p187868) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('False\\nFalse') == 'True'\n\n\ndef test_2(captured_output):\n    assert captured_output('True\\nFalse') == 'False'\n\n\ndef test_3(captured_output):\n    assert captured_output('False\\nTrue') == 'True'\n\n\ndef test_4(captured_output):\n    assert captured_output('True\\nTrue') == 'True'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            false,
                            false
                        ],
                        true
                    ],
                    [
                        [
                            true,
                            false
                        ],
                        false
                    ],
                    [
                        [
                            false,
                            true
                        ],
                        true
                    ],
                    [
                        [
                            true,
                            true
                        ],
                        true
                    ]
                ]
            },
            {
                "name": "monkey_trouble",
                "topic": "",
                "requirements": [],
                "description": "We have two monkeys, a and b. First ask the user if `monkey a` is smiling, then ask the user if `monkey b` is smiling.  We are in trouble if they are both smiling or if neither of them is smiling. Output a message to the user telling them if we are in trouble. For the test cases below, `False` means \"no\" and `True` means \"yes\".\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p181646) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('True\\nTrue') == 'True'\n\n\ndef test_2(captured_output):\n    assert captured_output('False\\nFalse') == 'True'\n\n\ndef test_3(captured_output):\n    assert captured_output('True\\nFalse') == 'False'\n\n\ndef test_4(captured_output):\n    assert captured_output('False\\nTrue') == 'False'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            true,
                            true
                        ],
                        true
                    ],
                    [
                        [
                            false,
                            false
                        ],
                        true
                    ],
                    [
                        [
                            true,
                            false
                        ],
                        false
                    ],
                    [
                        [
                            false,
                            true
                        ],
                        false
                    ]
                ]
            },
            {
                "name": "sum_double",
                "topic": "",
                "requirements": [],
                "description": "Get two int values from the user, output their sum. Unless the two values are the same, then output double their sum.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p154485) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('1\\n2') == 3\n\n\ndef test_2(captured_output):\n    assert captured_output('3\\n2') == 5\n\n\ndef test_3(captured_output):\n    assert captured_output('2\\n2') == 8\n\n\ndef test_4(captured_output):\n    assert captured_output('-1\\n0') == -1\n\n\ndef test_5(captured_output):\n    assert captured_output('3\\n3') == 12\n\n\ndef test_6(captured_output):\n    assert captured_output('0\\n0') == 0\n\n\ndef test_7(captured_output):\n    assert captured_output('0\\n1') == 1\n\n\ndef test_8(captured_output):\n    assert captured_output('3\\n4') == 7\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            1,
                            2
                        ],
                        3
                    ],
                    [
                        [
                            3,
                            2
                        ],
                        5
                    ],
                    [
                        [
                            2,
                            2
                        ],
                        8
                    ],
                    [
                        [
                            -1,
                            0
                        ],
                        -1
                    ],
                    [
                        [
                            3,
                            3
                        ],
                        12
                    ],
                    [
                        [
                            0,
                            0
                        ],
                        0
                    ],
                    [
                        [
                            0,
                            1
                        ],
                        1
                    ],
                    [
                        [
                            3,
                            4
                        ],
                        7
                    ]
                ]
            },
            {
                "name": "diff_21",
                "topic": "",
                "requirements": [],
                "description": "Get an integer from the user. Output the absolute difference between the integer and `21`, except output double the absolute difference if the integer is greater than 21. Use the `abs()` function to get the absolute value. For a greater challenge, you can find the absolute value using if statements.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p116624) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('19') == 2\n\n\ndef test_2(captured_output):\n    assert captured_output('10') == 11\n\n\ndef test_3(captured_output):\n    assert captured_output('21') == 0\n\n\ndef test_4(captured_output):\n    assert captured_output('22') == 2\n\n\ndef test_5(captured_output):\n    assert captured_output('25') == 8\n\n\ndef test_6(captured_output):\n    assert captured_output('30') == 18\n\n\ndef test_7(captured_output):\n    assert captured_output('0') == 21\n\n\ndef test_8(captured_output):\n    assert captured_output('1') == 20\n\n\ndef test_9(captured_output):\n    assert captured_output('2') == 19\n\n\ndef test_10(captured_output):\n    assert captured_output('-1') == 22\n\n\ndef test_11(captured_output):\n    assert captured_output('-2') == 23\n\n\ndef test_12(captured_output):\n    assert captured_output('50') == 58\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            19
                        ],
                        2
                    ],
                    [
                        [
                            10
                        ],
                        11
                    ],
                    [
                        [
                            21
                        ],
                        0
                    ],
                    [
                        [
                            22
                        ],
                        2
                    ],
                    [
                        [
                            25
                        ],
                        8
                    ],
                    [
                        [
                            30
                        ],
                        18
                    ],
                    [
                        [
                            0
                        ],
                        21
                    ],
                    [
                        [
                            1
                        ],
                        20
                    ],
                    [
                        [
                            2
                        ],
                        19
                    ],
                    [
                        [
                            -1
                        ],
                        22
                    ],
                    [
                        [
                            -2
                        ],
                        23
                    ],
                    [
                        [
                            50
                        ],
                        58
                    ]
                ]
            },
            {
                "name": "parrot_trouble",
                "topic": "",
                "requirements": [],
                "description": "We have a loud talking parrot. Get an hour from the user. The \"hour\" is the current hour time in the range `0..23`. We are in trouble if the parrot is talking and the hour is before `7` or after `20`. Output if we are in trouble or not. For the test cases below, `False` means \"no\" and `True` means \"yes\".\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p140449) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('True\\n6') == 'True'\n\n\ndef test_2(captured_output):\n    assert captured_output('True\\n7') == 'False'\n\n\ndef test_3(captured_output):\n    assert captured_output('False\\n6') == 'False'\n\n\ndef test_4(captured_output):\n    assert captured_output('True\\n21') == 'True'\n\n\ndef test_5(captured_output):\n    assert captured_output('False\\n21') == 'False'\n\n\ndef test_6(captured_output):\n    assert captured_output('False\\n20') == 'False'\n\n\ndef test_7(captured_output):\n    assert captured_output('True\\n23') == 'True'\n\n\ndef test_8(captured_output):\n    assert captured_output('False\\n23') == 'False'\n\n\ndef test_9(captured_output):\n    assert captured_output('True\\n20') == 'False'\n\n\ndef test_10(captured_output):\n    assert captured_output('False\\n12') == 'False'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            true,
                            6
                        ],
                        true
                    ],
                    [
                        [
                            true,
                            7
                        ],
                        false
                    ],
                    [
                        [
                            false,
                            6
                        ],
                        false
                    ],
                    [
                        [
                            true,
                            21
                        ],
                        true
                    ],
                    [
                        [
                            false,
                            21
                        ],
                        false
                    ],
                    [
                        [
                            false,
                            20
                        ],
                        false
                    ],
                    [
                        [
                            true,
                            23
                        ],
                        true
                    ],
                    [
                        [
                            false,
                            23
                        ],
                        false
                    ],
                    [
                        [
                            true,
                            20
                        ],
                        false
                    ],
                    [
                        [
                            false,
                            12
                        ],
                        false
                    ]
                ]
            },
            {
                "name": "makes_10",
                "topic": "",
                "requirements": [],
                "description": "Get two integers from the user. Output `'True'` if one if them is `10` or if their sum is `10`. For the test cases below, `False` means \"no\" and `True` means \"yes\".\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p182873) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('9\\n10') == 'True'\n\n\ndef test_2(captured_output):\n    assert captured_output('9\\n9') == 'False'\n\n\ndef test_3(captured_output):\n    assert captured_output('1\\n9') == 'True'\n\n\ndef test_4(captured_output):\n    assert captured_output('10\\n1') == 'True'\n\n\ndef test_5(captured_output):\n    assert captured_output('10\\n10') == 'True'\n\n\ndef test_6(captured_output):\n    assert captured_output('8\\n2') == 'True'\n\n\ndef test_7(captured_output):\n    assert captured_output('8\\n3') == 'False'\n\n\ndef test_8(captured_output):\n    assert captured_output('10\\n42') == 'True'\n\n\ndef test_9(captured_output):\n    assert captured_output('12\\n-2') == 'True'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            9,
                            10
                        ],
                        true
                    ],
                    [
                        [
                            9,
                            9
                        ],
                        false
                    ],
                    [
                        [
                            1,
                            9
                        ],
                        true
                    ],
                    [
                        [
                            10,
                            1
                        ],
                        true
                    ],
                    [
                        [
                            10,
                            10
                        ],
                        true
                    ],
                    [
                        [
                            8,
                            2
                        ],
                        true
                    ],
                    [
                        [
                            8,
                            3
                        ],
                        false
                    ],
                    [
                        [
                            10,
                            42
                        ],
                        true
                    ],
                    [
                        [
                            12,
                            -2
                        ],
                        true
                    ]
                ]
            },
            {
                "name": "near_hundred",
                "topic": "",
                "requirements": [],
                "description": "Ask the userr for an integetr. Output `'True'` if it is within `10` of `100` or `200`. Note: `abs()` computes the absolute value of a number. For the test cases below, `False` means \"no\" and `True` means \"yes\".\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p184004) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('93') == 'True'\n\n\ndef test_2(captured_output):\n    assert captured_output('90') == 'True'\n\n\ndef test_3(captured_output):\n    assert captured_output('89') == 'False'\n\n\ndef test_4(captured_output):\n    assert captured_output('110') == 'True'\n\n\ndef test_5(captured_output):\n    assert captured_output('111') == 'False'\n\n\ndef test_6(captured_output):\n    assert captured_output('121') == 'False'\n\n\ndef test_7(captured_output):\n    assert captured_output('-101') == 'False'\n\n\ndef test_8(captured_output):\n    assert captured_output('-209') == 'False'\n\n\ndef test_9(captured_output):\n    assert captured_output('190') == 'True'\n\n\ndef test_10(captured_output):\n    assert captured_output('209') == 'True'\n\n\ndef test_11(captured_output):\n    assert captured_output('0') == 'False'\n\n\ndef test_12(captured_output):\n    assert captured_output('5') == 'False'\n\n\ndef test_13(captured_output):\n    assert captured_output('-50') == 'False'\n\n\ndef test_14(captured_output):\n    assert captured_output('191') == 'True'\n\n\ndef test_15(captured_output):\n    assert captured_output('189') == 'False'\n\n\ndef test_16(captured_output):\n    assert captured_output('200') == 'True'\n\n\ndef test_17(captured_output):\n    assert captured_output('210') == 'True'\n\n\ndef test_18(captured_output):\n    assert captured_output('211') == 'False'\n\n\ndef test_19(captured_output):\n    assert captured_output('290') == 'False'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            93
                        ],
                        true
                    ],
                    [
                        [
                            90
                        ],
                        true
                    ],
                    [
                        [
                            89
                        ],
                        false
                    ],
                    [
                        [
                            110
                        ],
                        true
                    ],
                    [
                        [
                            111
                        ],
                        false
                    ],
                    [
                        [
                            121
                        ],
                        false
                    ],
                    [
                        [
                            -101
                        ],
                        false
                    ],
                    [
                        [
                            -209
                        ],
                        false
                    ],
                    [
                        [
                            190
                        ],
                        true
                    ],
                    [
                        [
                            209
                        ],
                        true
                    ],
                    [
                        [
                            0
                        ],
                        false
                    ],
                    [
                        [
                            5
                        ],
                        false
                    ],
                    [
                        [
                            -50
                        ],
                        false
                    ],
                    [
                        [
                            191
                        ],
                        true
                    ],
                    [
                        [
                            189
                        ],
                        false
                    ],
                    [
                        [
                            200
                        ],
                        true
                    ],
                    [
                        [
                            210
                        ],
                        true
                    ],
                    [
                        [
                            211
                        ],
                        false
                    ],
                    [
                        [
                            290
                        ],
                        false
                    ]
                ]
            },
            {
                "name": "pos_neg",
                "topic": "",
                "requirements": [],
                "description": "Given 2 int values, return true if one is negative and one is positive. Except if the parameter \"negative\" is true, then return true only if both are negative.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p159227) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('1\\n-1\\nFalse') == 'True'\n\n\ndef test_2(captured_output):\n    assert captured_output('-1\\n1\\nFalse') == 'True'\n\n\ndef test_3(captured_output):\n    assert captured_output('-4\\n-5\\nTrue') == 'True'\n\n\ndef test_4(captured_output):\n    assert captured_output('-4\\n-5\\nFalse') == 'False'\n\n\ndef test_5(captured_output):\n    assert captured_output('-4\\n5\\nFalse') == 'True'\n\n\ndef test_6(captured_output):\n    assert captured_output('-4\\n5\\nTrue') == 'False'\n\n\ndef test_7(captured_output):\n    assert captured_output('1\\n1\\nFalse') == 'False'\n\n\ndef test_8(captured_output):\n    assert captured_output('-1\\n-1\\nFalse') == 'False'\n\n\ndef test_9(captured_output):\n    assert captured_output('1\\n-1\\nTrue') == 'False'\n\n\ndef test_10(captured_output):\n    assert captured_output('-1\\n1\\nTrue') == 'False'\n\n\ndef test_11(captured_output):\n    assert captured_output('1\\n1\\nTrue') == 'False'\n\n\ndef test_12(captured_output):\n    assert captured_output('-1\\n-1\\nTrue') == 'True'\n\n\ndef test_13(captured_output):\n    assert captured_output('5\\n-5\\nFalse') == 'True'\n\n\ndef test_14(captured_output):\n    assert captured_output('-6\\n6\\nFalse') == 'True'\n\n\ndef test_15(captured_output):\n    assert captured_output('-5\\n-6\\nFalse') == 'False'\n\n\ndef test_16(captured_output):\n    assert captured_output('-2\\n-1\\nFalse') == 'False'\n\n\ndef test_17(captured_output):\n    assert captured_output('1\\n2\\nFalse') == 'False'\n\n\ndef test_18(captured_output):\n    assert captured_output('-5\\n6\\nTrue') == 'False'\n\n\ndef test_19(captured_output):\n    assert captured_output('-5\\n-5\\nTrue') == 'True'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            1,
                            -1,
                            false
                        ],
                        true
                    ],
                    [
                        [
                            -1,
                            1,
                            false
                        ],
                        true
                    ],
                    [
                        [
                            -4,
                            -5,
                            true
                        ],
                        true
                    ],
                    [
                        [
                            -4,
                            -5,
                            false
                        ],
                        false
                    ],
                    [
                        [
                            -4,
                            5,
                            false
                        ],
                        true
                    ],
                    [
                        [
                            -4,
                            5,
                            true
                        ],
                        false
                    ],
                    [
                        [
                            1,
                            1,
                            false
                        ],
                        false
                    ],
                    [
                        [
                            -1,
                            -1,
                            false
                        ],
                        false
                    ],
                    [
                        [
                            1,
                            -1,
                            true
                        ],
                        false
                    ],
                    [
                        [
                            -1,
                            1,
                            true
                        ],
                        false
                    ],
                    [
                        [
                            1,
                            1,
                            true
                        ],
                        false
                    ],
                    [
                        [
                            -1,
                            -1,
                            true
                        ],
                        true
                    ],
                    [
                        [
                            5,
                            -5,
                            false
                        ],
                        true
                    ],
                    [
                        [
                            -6,
                            6,
                            false
                        ],
                        true
                    ],
                    [
                        [
                            -5,
                            -6,
                            false
                        ],
                        false
                    ],
                    [
                        [
                            -2,
                            -1,
                            false
                        ],
                        false
                    ],
                    [
                        [
                            1,
                            2,
                            false
                        ],
                        false
                    ],
                    [
                        [
                            -5,
                            6,
                            true
                        ],
                        false
                    ],
                    [
                        [
                            -5,
                            -5,
                            true
                        ],
                        true
                    ]
                ]
            },
            {
                "name": "not_string",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a new string where \"not \" has been added to the front. However, if the string already begins with \"not\", return the string unchanged. Note: use .equals() to compare 2 strings.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p191914) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('candy') == 'not candy'\n\n\ndef test_2(captured_output):\n    assert captured_output('x') == 'not x'\n\n\ndef test_3(captured_output):\n    assert captured_output('not bad') == 'not bad'\n\n\ndef test_4(captured_output):\n    assert captured_output('bad') == 'not bad'\n\n\ndef test_5(captured_output):\n    assert captured_output('not') == 'not'\n\n\ndef test_6(captured_output):\n    assert captured_output('is not') == 'not is not'\n\n\ndef test_7(captured_output):\n    assert captured_output('no') == 'not no'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "candy"
                        ],
                        "not candy"
                    ],
                    [
                        [
                            "x"
                        ],
                        "not x"
                    ],
                    [
                        [
                            "not bad"
                        ],
                        "not bad"
                    ],
                    [
                        [
                            "bad"
                        ],
                        "not bad"
                    ],
                    [
                        [
                            "not"
                        ],
                        "not"
                    ],
                    [
                        [
                            "is not"
                        ],
                        "not is not"
                    ],
                    [
                        [
                            "no"
                        ],
                        "not no"
                    ]
                ]
            },
            {
                "name": "missing_char",
                "topic": "",
                "requirements": [],
                "description": "Given a non-empty string and an int n, return a new string where the char at index n has been removed. The value of n will be a valid index of a char in the original string (i.e. n will be in the range 0..str.length()-1 inclusive).\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p190570) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('kitten\\n1') == 'ktten'\n\n\ndef test_2(captured_output):\n    assert captured_output('kitten\\n0') == 'itten'\n\n\ndef test_3(captured_output):\n    assert captured_output('kitten\\n4') == 'kittn'\n\n\ndef test_4(captured_output):\n    assert captured_output('Hi\\n0') == 'i'\n\n\ndef test_5(captured_output):\n    assert captured_output('Hi\\n1') == 'H'\n\n\ndef test_6(captured_output):\n    assert captured_output('code\\n0') == 'ode'\n\n\ndef test_7(captured_output):\n    assert captured_output('code\\n1') == 'cde'\n\n\ndef test_8(captured_output):\n    assert captured_output('code\\n2') == 'coe'\n\n\ndef test_9(captured_output):\n    assert captured_output('code\\n3') == 'cod'\n\n\ndef test_10(captured_output):\n    assert captured_output('chocolate\\n8') == 'chocolat'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "kitten",
                            1
                        ],
                        "ktten"
                    ],
                    [
                        [
                            "kitten",
                            0
                        ],
                        "itten"
                    ],
                    [
                        [
                            "kitten",
                            4
                        ],
                        "kittn"
                    ],
                    [
                        [
                            "Hi",
                            0
                        ],
                        "i"
                    ],
                    [
                        [
                            "Hi",
                            1
                        ],
                        "H"
                    ],
                    [
                        [
                            "code",
                            0
                        ],
                        "ode"
                    ],
                    [
                        [
                            "code",
                            1
                        ],
                        "cde"
                    ],
                    [
                        [
                            "code",
                            2
                        ],
                        "coe"
                    ],
                    [
                        [
                            "code",
                            3
                        ],
                        "cod"
                    ],
                    [
                        [
                            "chocolate",
                            8
                        ],
                        "chocolat"
                    ]
                ]
            },
            {
                "name": "front_back",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a new string where the first and last chars have been exchanged.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p123384) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('code') == 'eodc'\n\n\ndef test_2(captured_output):\n    assert captured_output('a') == 'a'\n\n\ndef test_3(captured_output):\n    assert captured_output('ab') == 'ba'\n\n\ndef test_4(captured_output):\n    assert captured_output('abc') == 'cba'\n\n\ndef test_5(captured_output):\n    assert captured_output('') == ''\n\n\ndef test_6(captured_output):\n    assert captured_output('Chocolate') == 'ehocolatC'\n\n\ndef test_7(captured_output):\n    assert captured_output('aavJ') == 'Java'\n\n\ndef test_8(captured_output):\n    assert captured_output('hello') == 'oellh'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "code"
                        ],
                        "eodc"
                    ],
                    [
                        [
                            "a"
                        ],
                        "a"
                    ],
                    [
                        [
                            "ab"
                        ],
                        "ba"
                    ],
                    [
                        [
                            "abc"
                        ],
                        "cba"
                    ],
                    [
                        [
                            ""
                        ],
                        ""
                    ],
                    [
                        [
                            "Chocolate"
                        ],
                        "ehocolatC"
                    ],
                    [
                        [
                            "aavJ"
                        ],
                        "Java"
                    ],
                    [
                        [
                            "hello"
                        ],
                        "oellh"
                    ]
                ]
            },
            {
                "name": "front_3",
                "topic": "",
                "requirements": [],
                "description": "Given a string, we'll say that the front is the first 3 chars of the string. If the string length is less than 3, the front is whatever is there. Return a new string which is 3 copies of the front.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p136351) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Java') == 'JavJavJav'\n\n\ndef test_2(captured_output):\n    assert captured_output('Chocolate') == 'ChoChoCho'\n\n\ndef test_3(captured_output):\n    assert captured_output('abc') == 'abcabcabc'\n\n\ndef test_4(captured_output):\n    assert captured_output('abcXYZ') == 'abcabcabc'\n\n\ndef test_5(captured_output):\n    assert captured_output('ab') == 'ababab'\n\n\ndef test_6(captured_output):\n    assert captured_output('a') == 'aaa'\n\n\ndef test_7(captured_output):\n    assert captured_output('') == ''\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Java"
                        ],
                        "JavJavJav"
                    ],
                    [
                        [
                            "Chocolate"
                        ],
                        "ChoChoCho"
                    ],
                    [
                        [
                            "abc"
                        ],
                        "abcabcabc"
                    ],
                    [
                        [
                            "abcXYZ"
                        ],
                        "abcabcabc"
                    ],
                    [
                        [
                            "ab"
                        ],
                        "ababab"
                    ],
                    [
                        [
                            "a"
                        ],
                        "aaa"
                    ],
                    [
                        [
                            ""
                        ],
                        ""
                    ]
                ]
            },
            {
                "name": "back_around",
                "topic": "",
                "requirements": [],
                "description": "Given a string, take the last char and return a new string with the last char added at the front and back, so \"cat\" yields \"tcatt\". The original string will be length 1 or more.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p161642) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('cat') == 'tcatt'\n\n\ndef test_2(captured_output):\n    assert captured_output('Hello') == 'oHelloo'\n\n\ndef test_3(captured_output):\n    assert captured_output('a') == 'aaa'\n\n\ndef test_4(captured_output):\n    assert captured_output('abc') == 'cabcc'\n\n\ndef test_5(captured_output):\n    assert captured_output('read') == 'dreadd'\n\n\ndef test_6(captured_output):\n    assert captured_output('boo') == 'obooo'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "cat"
                        ],
                        "tcatt"
                    ],
                    [
                        [
                            "Hello"
                        ],
                        "oHelloo"
                    ],
                    [
                        [
                            "a"
                        ],
                        "aaa"
                    ],
                    [
                        [
                            "abc"
                        ],
                        "cabcc"
                    ],
                    [
                        [
                            "read"
                        ],
                        "dreadd"
                    ],
                    [
                        [
                            "boo"
                        ],
                        "obooo"
                    ]
                ]
            },
            {
                "name": "or_35",
                "topic": "",
                "requirements": [],
                "description": "Return true if the given non-negative number is a multiple of 3 or a multiple of 5. Use the % \"mod\" operator -- see <a href=/doc/practice/mod-introduction.html>Introduction to Mod</a>\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p112564) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('3') == 'True'\n\n\ndef test_2(captured_output):\n    assert captured_output('10') == 'True'\n\n\ndef test_3(captured_output):\n    assert captured_output('8') == 'False'\n\n\ndef test_4(captured_output):\n    assert captured_output('15') == 'True'\n\n\ndef test_5(captured_output):\n    assert captured_output('5') == 'True'\n\n\ndef test_6(captured_output):\n    assert captured_output('9') == 'True'\n\n\ndef test_7(captured_output):\n    assert captured_output('4') == 'False'\n\n\ndef test_8(captured_output):\n    assert captured_output('7') == 'False'\n\n\ndef test_9(captured_output):\n    assert captured_output('6') == 'True'\n\n\ndef test_10(captured_output):\n    assert captured_output('17') == 'False'\n\n\ndef test_11(captured_output):\n    assert captured_output('18') == 'True'\n\n\ndef test_12(captured_output):\n    assert captured_output('29') == 'False'\n\n\ndef test_13(captured_output):\n    assert captured_output('20') == 'True'\n\n\ndef test_14(captured_output):\n    assert captured_output('21') == 'True'\n\n\ndef test_15(captured_output):\n    assert captured_output('22') == 'False'\n\n\ndef test_16(captured_output):\n    assert captured_output('45') == 'True'\n\n\ndef test_17(captured_output):\n    assert captured_output('99') == 'True'\n\n\ndef test_18(captured_output):\n    assert captured_output('100') == 'True'\n\n\ndef test_19(captured_output):\n    assert captured_output('101') == 'False'\n\n\ndef test_20(captured_output):\n    assert captured_output('121') == 'False'\n\n\ndef test_21(captured_output):\n    assert captured_output('122') == 'False'\n\n\ndef test_22(captured_output):\n    assert captured_output('123') == 'True'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            3
                        ],
                        true
                    ],
                    [
                        [
                            10
                        ],
                        true
                    ],
                    [
                        [
                            8
                        ],
                        false
                    ],
                    [
                        [
                            15
                        ],
                        true
                    ],
                    [
                        [
                            5
                        ],
                        true
                    ],
                    [
                        [
                            9
                        ],
                        true
                    ],
                    [
                        [
                            4
                        ],
                        false
                    ],
                    [
                        [
                            7
                        ],
                        false
                    ],
                    [
                        [
                            6
                        ],
                        true
                    ],
                    [
                        [
                            17
                        ],
                        false
                    ],
                    [
                        [
                            18
                        ],
                        true
                    ],
                    [
                        [
                            29
                        ],
                        false
                    ],
                    [
                        [
                            20
                        ],
                        true
                    ],
                    [
                        [
                            21
                        ],
                        true
                    ],
                    [
                        [
                            22
                        ],
                        false
                    ],
                    [
                        [
                            45
                        ],
                        true
                    ],
                    [
                        [
                            99
                        ],
                        true
                    ],
                    [
                        [
                            100
                        ],
                        true
                    ],
                    [
                        [
                            101
                        ],
                        false
                    ],
                    [
                        [
                            121
                        ],
                        false
                    ],
                    [
                        [
                            122
                        ],
                        false
                    ],
                    [
                        [
                            123
                        ],
                        true
                    ]
                ]
            },
            {
                "name": "front_22",
                "topic": "",
                "requirements": [],
                "description": "Given a string, take the first 2 chars and return the string with the 2 chars added at both the front and back, so \"kitten\" yields\"kikittenki\". If the string length is less than 2, use whatever chars are there.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p183592) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('kitten') == 'kikittenki'\n\n\ndef test_2(captured_output):\n    assert captured_output('Ha') == 'HaHaHa'\n\n\ndef test_3(captured_output):\n    assert captured_output('abc') == 'ababcab'\n\n\ndef test_4(captured_output):\n    assert captured_output('ab') == 'ababab'\n\n\ndef test_5(captured_output):\n    assert captured_output('a') == 'aaa'\n\n\ndef test_6(captured_output):\n    assert captured_output('') == ''\n\n\ndef test_7(captured_output):\n    assert captured_output('Logic') == 'LoLogicLo'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "kitten"
                        ],
                        "kikittenki"
                    ],
                    [
                        [
                            "Ha"
                        ],
                        "HaHaHa"
                    ],
                    [
                        [
                            "abc"
                        ],
                        "ababcab"
                    ],
                    [
                        [
                            "ab"
                        ],
                        "ababab"
                    ],
                    [
                        [
                            "a"
                        ],
                        "aaa"
                    ],
                    [
                        [
                            ""
                        ],
                        ""
                    ],
                    [
                        [
                            "Logic"
                        ],
                        "LoLogicLo"
                    ]
                ]
            },
            {
                "name": "start_hi",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return true if the string starts with \"hi\" and false otherwise.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p191022) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('hi there') == 'True'\n\n\ndef test_2(captured_output):\n    assert captured_output('hi') == 'True'\n\n\ndef test_3(captured_output):\n    assert captured_output('hello hi') == 'False'\n\n\ndef test_4(captured_output):\n    assert captured_output('he') == 'False'\n\n\ndef test_5(captured_output):\n    assert captured_output('h') == 'False'\n\n\ndef test_6(captured_output):\n    assert captured_output('') == 'False'\n\n\ndef test_7(captured_output):\n    assert captured_output('ho hi') == 'False'\n\n\ndef test_8(captured_output):\n    assert captured_output('hi ho') == 'True'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "hi there"
                        ],
                        true
                    ],
                    [
                        [
                            "hi"
                        ],
                        true
                    ],
                    [
                        [
                            "hello hi"
                        ],
                        false
                    ],
                    [
                        [
                            "he"
                        ],
                        false
                    ],
                    [
                        [
                            "h"
                        ],
                        false
                    ],
                    [
                        [
                            ""
                        ],
                        false
                    ],
                    [
                        [
                            "ho hi"
                        ],
                        false
                    ],
                    [
                        [
                            "hi ho"
                        ],
                        true
                    ]
                ]
            },
            {
                "name": "icy_hot",
                "topic": "",
                "requirements": [],
                "description": "Given two temperatures, return true if one is less than 0 and the other is greater than 100.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p192082) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('120\\n-1') == 'True'\n\n\ndef test_2(captured_output):\n    assert captured_output('-1\\n120') == 'True'\n\n\ndef test_3(captured_output):\n    assert captured_output('2\\n120') == 'False'\n\n\ndef test_4(captured_output):\n    assert captured_output('-1\\n100') == 'False'\n\n\ndef test_5(captured_output):\n    assert captured_output('-2\\n-2') == 'False'\n\n\ndef test_6(captured_output):\n    assert captured_output('120\\n120') == 'False'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            120,
                            -1
                        ],
                        true
                    ],
                    [
                        [
                            -1,
                            120
                        ],
                        true
                    ],
                    [
                        [
                            2,
                            120
                        ],
                        false
                    ],
                    [
                        [
                            -1,
                            100
                        ],
                        false
                    ],
                    [
                        [
                            -2,
                            -2
                        ],
                        false
                    ],
                    [
                        [
                            120,
                            120
                        ],
                        false
                    ]
                ]
            },
            {
                "name": "in_1020",
                "topic": "",
                "requirements": [],
                "description": "Given 2 int values, return true if either of them is in the range 10..20 inclusive.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p144535) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('12\\n99') == 'True'\n\n\ndef test_2(captured_output):\n    assert captured_output('21\\n12') == 'True'\n\n\ndef test_3(captured_output):\n    assert captured_output('8\\n99') == 'False'\n\n\ndef test_4(captured_output):\n    assert captured_output('99\\n10') == 'True'\n\n\ndef test_5(captured_output):\n    assert captured_output('20\\n20') == 'True'\n\n\ndef test_6(captured_output):\n    assert captured_output('21\\n21') == 'False'\n\n\ndef test_7(captured_output):\n    assert captured_output('9\\n9') == 'False'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            12,
                            99
                        ],
                        true
                    ],
                    [
                        [
                            21,
                            12
                        ],
                        true
                    ],
                    [
                        [
                            8,
                            99
                        ],
                        false
                    ],
                    [
                        [
                            99,
                            10
                        ],
                        true
                    ],
                    [
                        [
                            20,
                            20
                        ],
                        true
                    ],
                    [
                        [
                            21,
                            21
                        ],
                        false
                    ],
                    [
                        [
                            9,
                            9
                        ],
                        false
                    ]
                ]
            },
            {
                "name": "has_teen",
                "topic": "",
                "requirements": [],
                "description": "We'll say that a number is \"teen\" if it is in the range 13..19 inclusive. Given 3 int values, return true if 1 or more of them are teen.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p178986) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('13\\n20\\n10') == 'True'\n\n\ndef test_2(captured_output):\n    assert captured_output('20\\n19\\n10') == 'True'\n\n\ndef test_3(captured_output):\n    assert captured_output('20\\n10\\n13') == 'True'\n\n\ndef test_4(captured_output):\n    assert captured_output('1\\n20\\n12') == 'False'\n\n\ndef test_5(captured_output):\n    assert captured_output('19\\n20\\n12') == 'True'\n\n\ndef test_6(captured_output):\n    assert captured_output('12\\n20\\n19') == 'True'\n\n\ndef test_7(captured_output):\n    assert captured_output('12\\n9\\n20') == 'False'\n\n\ndef test_8(captured_output):\n    assert captured_output('12\\n18\\n20') == 'True'\n\n\ndef test_9(captured_output):\n    assert captured_output('14\\n2\\n20') == 'True'\n\n\ndef test_10(captured_output):\n    assert captured_output('4\\n2\\n20') == 'False'\n\n\ndef test_11(captured_output):\n    assert captured_output('11\\n22\\n22') == 'False'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            13,
                            20,
                            10
                        ],
                        true
                    ],
                    [
                        [
                            20,
                            19,
                            10
                        ],
                        true
                    ],
                    [
                        [
                            20,
                            10,
                            13
                        ],
                        true
                    ],
                    [
                        [
                            1,
                            20,
                            12
                        ],
                        false
                    ],
                    [
                        [
                            19,
                            20,
                            12
                        ],
                        true
                    ],
                    [
                        [
                            12,
                            20,
                            19
                        ],
                        true
                    ],
                    [
                        [
                            12,
                            9,
                            20
                        ],
                        false
                    ],
                    [
                        [
                            12,
                            18,
                            20
                        ],
                        true
                    ],
                    [
                        [
                            14,
                            2,
                            20
                        ],
                        true
                    ],
                    [
                        [
                            4,
                            2,
                            20
                        ],
                        false
                    ],
                    [
                        [
                            11,
                            22,
                            22
                        ],
                        false
                    ]
                ]
            },
            {
                "name": "lone_teen",
                "topic": "",
                "requirements": [],
                "description": "We'll say that a number is \"teen\" if it is in the range 13..19 inclusive. Given 2 int values, return true if one or the other is teen, but not both.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p165701) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('13\\n99') == 'True'\n\n\ndef test_2(captured_output):\n    assert captured_output('21\\n19') == 'True'\n\n\ndef test_3(captured_output):\n    assert captured_output('13\\n13') == 'False'\n\n\ndef test_4(captured_output):\n    assert captured_output('14\\n20') == 'True'\n\n\ndef test_5(captured_output):\n    assert captured_output('20\\n15') == 'True'\n\n\ndef test_6(captured_output):\n    assert captured_output('16\\n17') == 'False'\n\n\ndef test_7(captured_output):\n    assert captured_output('16\\n9') == 'True'\n\n\ndef test_8(captured_output):\n    assert captured_output('16\\n18') == 'False'\n\n\ndef test_9(captured_output):\n    assert captured_output('13\\n19') == 'False'\n\n\ndef test_10(captured_output):\n    assert captured_output('13\\n20') == 'True'\n\n\ndef test_11(captured_output):\n    assert captured_output('6\\n18') == 'True'\n\n\ndef test_12(captured_output):\n    assert captured_output('99\\n13') == 'True'\n\n\ndef test_13(captured_output):\n    assert captured_output('99\\n99') == 'False'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            13,
                            99
                        ],
                        true
                    ],
                    [
                        [
                            21,
                            19
                        ],
                        true
                    ],
                    [
                        [
                            13,
                            13
                        ],
                        false
                    ],
                    [
                        [
                            14,
                            20
                        ],
                        true
                    ],
                    [
                        [
                            20,
                            15
                        ],
                        true
                    ],
                    [
                        [
                            16,
                            17
                        ],
                        false
                    ],
                    [
                        [
                            16,
                            9
                        ],
                        true
                    ],
                    [
                        [
                            16,
                            18
                        ],
                        false
                    ],
                    [
                        [
                            13,
                            19
                        ],
                        false
                    ],
                    [
                        [
                            13,
                            20
                        ],
                        true
                    ],
                    [
                        [
                            6,
                            18
                        ],
                        true
                    ],
                    [
                        [
                            99,
                            13
                        ],
                        true
                    ],
                    [
                        [
                            99,
                            99
                        ],
                        false
                    ]
                ]
            },
            {
                "name": "del_del",
                "topic": "",
                "requirements": [],
                "description": "Given a string, if the string \"del\" appears starting at index 1, return a string where that \"del\" has been deleted. Otherwise, return the string unchanged.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p100905) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('adelbc') == 'abc'\n\n\ndef test_2(captured_output):\n    assert captured_output('adelHello') == 'aHello'\n\n\ndef test_3(captured_output):\n    assert captured_output('adedbc') == 'adedbc'\n\n\ndef test_4(captured_output):\n    assert captured_output('abcdel') == 'abcdel'\n\n\ndef test_5(captured_output):\n    assert captured_output('add') == 'add'\n\n\ndef test_6(captured_output):\n    assert captured_output('ad') == 'ad'\n\n\ndef test_7(captured_output):\n    assert captured_output('a') == 'a'\n\n\ndef test_8(captured_output):\n    assert captured_output('') == ''\n\n\ndef test_9(captured_output):\n    assert captured_output('del') == 'del'\n\n\ndef test_10(captured_output):\n    assert captured_output('adel') == 'a'\n\n\ndef test_11(captured_output):\n    assert captured_output('aadelbb') == 'aadelbb'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "adelbc"
                        ],
                        "abc"
                    ],
                    [
                        [
                            "adelHello"
                        ],
                        "aHello"
                    ],
                    [
                        [
                            "adedbc"
                        ],
                        "adedbc"
                    ],
                    [
                        [
                            "abcdel"
                        ],
                        "abcdel"
                    ],
                    [
                        [
                            "add"
                        ],
                        "add"
                    ],
                    [
                        [
                            "ad"
                        ],
                        "ad"
                    ],
                    [
                        [
                            "a"
                        ],
                        "a"
                    ],
                    [
                        [
                            ""
                        ],
                        ""
                    ],
                    [
                        [
                            "del"
                        ],
                        "del"
                    ],
                    [
                        [
                            "adel"
                        ],
                        "a"
                    ],
                    [
                        [
                            "aadelbb"
                        ],
                        "aadelbb"
                    ]
                ]
            },
            {
                "name": "mix_start",
                "topic": "",
                "requirements": [],
                "description": "Return true if the given string begins with \"mix\", except the 'm' can be anything, so \"pix\", \"9ix\" .. all count.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p151713) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('mix snacks') == 'True'\n\n\ndef test_2(captured_output):\n    assert captured_output('pix snacks') == 'True'\n\n\ndef test_3(captured_output):\n    assert captured_output('piz snacks') == 'False'\n\n\ndef test_4(captured_output):\n    assert captured_output('nix') == 'True'\n\n\ndef test_5(captured_output):\n    assert captured_output('ni') == 'False'\n\n\ndef test_6(captured_output):\n    assert captured_output('n') == 'False'\n\n\ndef test_7(captured_output):\n    assert captured_output('') == 'False'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "mix snacks"
                        ],
                        true
                    ],
                    [
                        [
                            "pix snacks"
                        ],
                        true
                    ],
                    [
                        [
                            "piz snacks"
                        ],
                        false
                    ],
                    [
                        [
                            "nix"
                        ],
                        true
                    ],
                    [
                        [
                            "ni"
                        ],
                        false
                    ],
                    [
                        [
                            "n"
                        ],
                        false
                    ],
                    [
                        [
                            ""
                        ],
                        false
                    ]
                ]
            },
            {
                "name": "start_oz",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a string made of the first 2 chars (if present), however include first char only if it is 'o' and include the second only if it is 'z', so \"ozymandias\" yields \"oz\".\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p199720) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('ozymandias') == 'oz'\n\n\ndef test_2(captured_output):\n    assert captured_output('bzoo') == 'z'\n\n\ndef test_3(captured_output):\n    assert captured_output('oxx') == 'o'\n\n\ndef test_4(captured_output):\n    assert captured_output('oz') == 'oz'\n\n\ndef test_5(captured_output):\n    assert captured_output('ounce') == 'o'\n\n\ndef test_6(captured_output):\n    assert captured_output('o') == 'o'\n\n\ndef test_7(captured_output):\n    assert captured_output('abc') == ''\n\n\ndef test_8(captured_output):\n    assert captured_output('') == ''\n\n\ndef test_9(captured_output):\n    assert captured_output('zoo') == ''\n\n\ndef test_10(captured_output):\n    assert captured_output('aztec') == 'z'\n\n\ndef test_11(captured_output):\n    assert captured_output('zzzz') == 'z'\n\n\ndef test_12(captured_output):\n    assert captured_output('oznic') == 'oz'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "ozymandias"
                        ],
                        "oz"
                    ],
                    [
                        [
                            "bzoo"
                        ],
                        "z"
                    ],
                    [
                        [
                            "oxx"
                        ],
                        "o"
                    ],
                    [
                        [
                            "oz"
                        ],
                        "oz"
                    ],
                    [
                        [
                            "ounce"
                        ],
                        "o"
                    ],
                    [
                        [
                            "o"
                        ],
                        "o"
                    ],
                    [
                        [
                            "abc"
                        ],
                        ""
                    ],
                    [
                        [
                            ""
                        ],
                        ""
                    ],
                    [
                        [
                            "zoo"
                        ],
                        ""
                    ],
                    [
                        [
                            "aztec"
                        ],
                        "z"
                    ],
                    [
                        [
                            "zzzz"
                        ],
                        "z"
                    ],
                    [
                        [
                            "oznic"
                        ],
                        "oz"
                    ]
                ]
            },
            {
                "name": "int_max",
                "topic": "",
                "requirements": [],
                "description": "Given three int values, a b c, return the largest.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p101887) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('1\\n2\\n3') == 3\n\n\ndef test_2(captured_output):\n    assert captured_output('1\\n3\\n2') == 3\n\n\ndef test_3(captured_output):\n    assert captured_output('3\\n2\\n1') == 3\n\n\ndef test_4(captured_output):\n    assert captured_output('9\\n3\\n3') == 9\n\n\ndef test_5(captured_output):\n    assert captured_output('3\\n9\\n3') == 9\n\n\ndef test_6(captured_output):\n    assert captured_output('3\\n3\\n9') == 9\n\n\ndef test_7(captured_output):\n    assert captured_output('8\\n2\\n3') == 8\n\n\ndef test_8(captured_output):\n    assert captured_output('-3\\n-1\\n-2') == -1\n\n\ndef test_9(captured_output):\n    assert captured_output('6\\n2\\n5') == 6\n\n\ndef test_10(captured_output):\n    assert captured_output('5\\n6\\n2') == 6\n\n\ndef test_11(captured_output):\n    assert captured_output('5\\n2\\n6') == 6\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            1,
                            2,
                            3
                        ],
                        3
                    ],
                    [
                        [
                            1,
                            3,
                            2
                        ],
                        3
                    ],
                    [
                        [
                            3,
                            2,
                            1
                        ],
                        3
                    ],
                    [
                        [
                            9,
                            3,
                            3
                        ],
                        9
                    ],
                    [
                        [
                            3,
                            9,
                            3
                        ],
                        9
                    ],
                    [
                        [
                            3,
                            3,
                            9
                        ],
                        9
                    ],
                    [
                        [
                            8,
                            2,
                            3
                        ],
                        8
                    ],
                    [
                        [
                            -3,
                            -1,
                            -2
                        ],
                        -1
                    ],
                    [
                        [
                            6,
                            2,
                            5
                        ],
                        6
                    ],
                    [
                        [
                            5,
                            6,
                            2
                        ],
                        6
                    ],
                    [
                        [
                            5,
                            2,
                            6
                        ],
                        6
                    ]
                ]
            },
            {
                "name": "close_10",
                "topic": "",
                "requirements": [],
                "description": "Given 2 int values, return whichever value is nearest to the value 10, or return 0 in the event of a tie. Note that Math.abs(n) returns the absolute value of a number.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p172021) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('8\\n13') == 8\n\n\ndef test_2(captured_output):\n    assert captured_output('13\\n8') == 8\n\n\ndef test_3(captured_output):\n    assert captured_output('13\\n7') == 0\n\n\ndef test_4(captured_output):\n    assert captured_output('7\\n13') == 0\n\n\ndef test_5(captured_output):\n    assert captured_output('9\\n13') == 9\n\n\ndef test_6(captured_output):\n    assert captured_output('13\\n8') == 8\n\n\ndef test_7(captured_output):\n    assert captured_output('10\\n12') == 10\n\n\ndef test_8(captured_output):\n    assert captured_output('11\\n10') == 10\n\n\ndef test_9(captured_output):\n    assert captured_output('5\\n21') == 5\n\n\ndef test_10(captured_output):\n    assert captured_output('0\\n20') == 0\n\n\ndef test_11(captured_output):\n    assert captured_output('10\\n10') == 0\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            8,
                            13
                        ],
                        8
                    ],
                    [
                        [
                            13,
                            8
                        ],
                        8
                    ],
                    [
                        [
                            13,
                            7
                        ],
                        0
                    ],
                    [
                        [
                            7,
                            13
                        ],
                        0
                    ],
                    [
                        [
                            9,
                            13
                        ],
                        9
                    ],
                    [
                        [
                            13,
                            8
                        ],
                        8
                    ],
                    [
                        [
                            10,
                            12
                        ],
                        10
                    ],
                    [
                        [
                            11,
                            10
                        ],
                        10
                    ],
                    [
                        [
                            5,
                            21
                        ],
                        5
                    ],
                    [
                        [
                            0,
                            20
                        ],
                        0
                    ],
                    [
                        [
                            10,
                            10
                        ],
                        0
                    ]
                ]
            },
            {
                "name": "in_3050",
                "topic": "",
                "requirements": [],
                "description": "Given 2 int values, return true if they are both in the range 30..40 inclusive, or they are both in the range 40..50 inclusive.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p132134) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('30\\n31') == 'True'\n\n\ndef test_2(captured_output):\n    assert captured_output('30\\n41') == 'False'\n\n\ndef test_3(captured_output):\n    assert captured_output('40\\n50') == 'True'\n\n\ndef test_4(captured_output):\n    assert captured_output('40\\n51') == 'False'\n\n\ndef test_5(captured_output):\n    assert captured_output('39\\n50') == 'False'\n\n\ndef test_6(captured_output):\n    assert captured_output('50\\n39') == 'False'\n\n\ndef test_7(captured_output):\n    assert captured_output('40\\n39') == 'True'\n\n\ndef test_8(captured_output):\n    assert captured_output('49\\n48') == 'True'\n\n\ndef test_9(captured_output):\n    assert captured_output('50\\n40') == 'True'\n\n\ndef test_10(captured_output):\n    assert captured_output('50\\n51') == 'False'\n\n\ndef test_11(captured_output):\n    assert captured_output('35\\n36') == 'True'\n\n\ndef test_12(captured_output):\n    assert captured_output('35\\n45') == 'False'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            30,
                            31
                        ],
                        true
                    ],
                    [
                        [
                            30,
                            41
                        ],
                        false
                    ],
                    [
                        [
                            40,
                            50
                        ],
                        true
                    ],
                    [
                        [
                            40,
                            51
                        ],
                        false
                    ],
                    [
                        [
                            39,
                            50
                        ],
                        false
                    ],
                    [
                        [
                            50,
                            39
                        ],
                        false
                    ],
                    [
                        [
                            40,
                            39
                        ],
                        true
                    ],
                    [
                        [
                            49,
                            48
                        ],
                        true
                    ],
                    [
                        [
                            50,
                            40
                        ],
                        true
                    ],
                    [
                        [
                            50,
                            51
                        ],
                        false
                    ],
                    [
                        [
                            35,
                            36
                        ],
                        true
                    ],
                    [
                        [
                            35,
                            45
                        ],
                        false
                    ]
                ]
            },
            {
                "name": "max_1020",
                "topic": "",
                "requirements": [],
                "description": "Given 2 positive int values, return the larger value that is in the range 10..20 inclusive, or return 0 if neither is in that range.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p177372) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('11\\n19') == 19\n\n\ndef test_2(captured_output):\n    assert captured_output('19\\n11') == 19\n\n\ndef test_3(captured_output):\n    assert captured_output('11\\n9') == 11\n\n\ndef test_4(captured_output):\n    assert captured_output('9\\n21') == 0\n\n\ndef test_5(captured_output):\n    assert captured_output('10\\n21') == 10\n\n\ndef test_6(captured_output):\n    assert captured_output('21\\n10') == 10\n\n\ndef test_7(captured_output):\n    assert captured_output('9\\n11') == 11\n\n\ndef test_8(captured_output):\n    assert captured_output('23\\n10') == 10\n\n\ndef test_9(captured_output):\n    assert captured_output('20\\n10') == 20\n\n\ndef test_10(captured_output):\n    assert captured_output('7\\n20') == 20\n\n\ndef test_11(captured_output):\n    assert captured_output('17\\n16') == 17\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            11,
                            19
                        ],
                        19
                    ],
                    [
                        [
                            19,
                            11
                        ],
                        19
                    ],
                    [
                        [
                            11,
                            9
                        ],
                        11
                    ],
                    [
                        [
                            9,
                            21
                        ],
                        0
                    ],
                    [
                        [
                            10,
                            21
                        ],
                        10
                    ],
                    [
                        [
                            21,
                            10
                        ],
                        10
                    ],
                    [
                        [
                            9,
                            11
                        ],
                        11
                    ],
                    [
                        [
                            23,
                            10
                        ],
                        10
                    ],
                    [
                        [
                            20,
                            10
                        ],
                        20
                    ],
                    [
                        [
                            7,
                            20
                        ],
                        20
                    ],
                    [
                        [
                            17,
                            16
                        ],
                        17
                    ]
                ]
            },
            {
                "name": "string_e",
                "topic": "",
                "requirements": [],
                "description": "Return true if the given string contains between 1 and 3 'e' chars.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p173784) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Hello') == 'True'\n\n\ndef test_2(captured_output):\n    assert captured_output('Heelle') == 'True'\n\n\ndef test_3(captured_output):\n    assert captured_output('Heelele') == 'False'\n\n\ndef test_4(captured_output):\n    assert captured_output('Hll') == 'False'\n\n\ndef test_5(captured_output):\n    assert captured_output('e') == 'True'\n\n\ndef test_6(captured_output):\n    assert captured_output('') == 'False'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Hello"
                        ],
                        true
                    ],
                    [
                        [
                            "Heelle"
                        ],
                        true
                    ],
                    [
                        [
                            "Heelele"
                        ],
                        false
                    ],
                    [
                        [
                            "Hll"
                        ],
                        false
                    ],
                    [
                        [
                            "e"
                        ],
                        true
                    ],
                    [
                        [
                            ""
                        ],
                        false
                    ]
                ]
            },
            {
                "name": "last_digit",
                "topic": "",
                "requirements": [],
                "description": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57. Note that the % \"mod\" operator computes remainders, so 17 % 10 is 7.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p125339) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('7\\n17') == 'True'\n\n\ndef test_2(captured_output):\n    assert captured_output('6\\n17') == 'False'\n\n\ndef test_3(captured_output):\n    assert captured_output('3\\n113') == 'True'\n\n\ndef test_4(captured_output):\n    assert captured_output('114\\n113') == 'False'\n\n\ndef test_5(captured_output):\n    assert captured_output('114\\n4') == 'True'\n\n\ndef test_6(captured_output):\n    assert captured_output('10\\n0') == 'True'\n\n\ndef test_7(captured_output):\n    assert captured_output('11\\n0') == 'False'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            7,
                            17
                        ],
                        true
                    ],
                    [
                        [
                            6,
                            17
                        ],
                        false
                    ],
                    [
                        [
                            3,
                            113
                        ],
                        true
                    ],
                    [
                        [
                            114,
                            113
                        ],
                        false
                    ],
                    [
                        [
                            114,
                            4
                        ],
                        true
                    ],
                    [
                        [
                            10,
                            0
                        ],
                        true
                    ],
                    [
                        [
                            11,
                            0
                        ],
                        false
                    ]
                ]
            },
            {
                "name": "end_up",
                "topic": "",
                "requirements": [],
                "description": "Given a string, return a new string where the last 3 chars are now in upper case. If the string has less than 3 chars, uppercase whatever is there. Note that str.toUpperCase() returns the uppercase version of a string.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p125268) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Hello') == 'HeLLO'\n\n\ndef test_2(captured_output):\n    assert captured_output('hi there') == 'hi thERE'\n\n\ndef test_3(captured_output):\n    assert captured_output('hi') == 'HI'\n\n\ndef test_4(captured_output):\n    assert captured_output('woo hoo') == 'woo HOO'\n\n\ndef test_5(captured_output):\n    assert captured_output('xyz12') == 'xyZ12'\n\n\ndef test_6(captured_output):\n    assert captured_output('x') == 'X'\n\n\ndef test_7(captured_output):\n    assert captured_output('') == ''\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Hello"
                        ],
                        "HeLLO"
                    ],
                    [
                        [
                            "hi there"
                        ],
                        "hi thERE"
                    ],
                    [
                        [
                            "hi"
                        ],
                        "HI"
                    ],
                    [
                        [
                            "woo hoo"
                        ],
                        "woo HOO"
                    ],
                    [
                        [
                            "xyz12"
                        ],
                        "xyZ12"
                    ],
                    [
                        [
                            "x"
                        ],
                        "X"
                    ],
                    [
                        [
                            ""
                        ],
                        ""
                    ]
                ]
            },
            {
                "name": "every_nth",
                "topic": "",
                "requirements": [],
                "description": "Given a non-empty string and an int N, return the string made starting with char 0, and then every Nth char of the string. So if N is 3, use char 0, 3, 6, ... and so on. N is 1 or more.\n\nThis exercise was taken from [codingbat.com](https://codingbat.com/prob/p196441) and has been adapted for the Python language. There are many great programming exercises there, but the majority are created for Java.",
                "starter_code": "",
                "tests": "from exercise.fixtures import captured_output\n\n\ndef test_1(captured_output):\n    assert captured_output('Miracle\\n2') == 'Mrce'\n\n\ndef test_2(captured_output):\n    assert captured_output('abcdefg\\n2') == 'aceg'\n\n\ndef test_3(captured_output):\n    assert captured_output('abcdefg\\n3') == 'adg'\n\n\ndef test_4(captured_output):\n    assert captured_output('Chocolate\\n3') == 'Cca'\n\n\ndef test_5(captured_output):\n    assert captured_output('Chocolates\\n3') == 'Ccas'\n\n\ndef test_6(captured_output):\n    assert captured_output('Chocolates\\n4') == 'Coe'\n\n\ndef test_7(captured_output):\n    assert captured_output('Chocolates\\n100') == 'C'\n\n\n",
                "solution": "",
                "tests_io": [
                    [
                        [
                            "Miracle",
                            2
                        ],
                        "Mrce"
                    ],
                    [
                        [
                            "abcdefg",
                            2
                        ],
                        "aceg"
                    ],
                    [
                        [
                            "abcdefg",
                            3
                        ],
                        "adg"
                    ],
                    [
                        [
                            "Chocolate",
                            3
                        ],
                        "Cca"
                    ],
                    [
                        [
                            "Chocolates",
                            3
                        ],
                        "Ccas"
                    ],
                    [
                        [
                            "Chocolates",
                            4
                        ],
                        "Coe"
                    ],
                    [
                        [
                            "Chocolates",
                            100
                        ],
                        "C"
                    ]
                ]
            }
        ]
    }
}