{
    "exercises": [
        {
            "name": "Hello, World!",
            "topic": "output a message",
            "requirements": [],
            "description": "One of the most important parts of a computer program is the ability for the computer to talk to the user (the person running the program). In Python, this is achieved using the `print()` function. The `print()` function will will output anything you want to the terminal screen (it does not activate your printer). \n\n\n### Your task\n1. Run the starter code to see an example of what it looks like to print something to the terminal. The code, as it is, should output the following:\n    ```\n    Hello,\n    ```\n2. In addition to the output that is already there, make the program print out `\"World!\"`. The result should look like:\n    ```\n    Hello,\n    World!\n    ```",
            "starter_code": "print(\"Hello,\")\nprint()",
            "tests": "from exercise.fixtures import captured_output\n\n\ndef test_hello(captured_output):\n    assert captured_output() == \"Hello,\\nWorld!\""
        },
        {
            "name": "Hello, Goodbye",
            "topic": "output a message",
            "requirements": [],
            "description": "The print function in the starter code provided (`main.py`) currently prints out the string `\"Hello\"`. Modify the code, so instead of printing out `\"Hello\"`, it prints out `\"Goodbye\"`. \n\n1. Run the code and observe the fact the output says `\"Hello\"`.\n2. Change the string in the `print()` function to `\"Goodbye\"`.\n3. Run the program again to observe the change. The output should no longer include `Hello`, only `Goodbye`. Expected output:\n    ```\n    Goodbye\n    ```",
            "starter_code": "print(\"Hello\")",
            "tests": "from exercise.fixtures import captured_output\n\n\ndef test_hello(captured_output):\n    assert captured_output() == \"Goodbye\""
        },
        {
            "name": "Hamburger",
            "topic": "output a message",
            "requirements": [],
            "description": "With the starter code (given in `main.py`) your program outputs an empty hamburger. You goal is to create a complete hamburger.\n\n1. Run the program and observe the output. It should be as follows:\n    ```\n    (--Bun--)\n\n    (--Bun--)\n    ```\n    Notice the empty space. This empty line comes from the empty `print()` function.\n2. Place the string `\"Hamburger\"` inside that empty `print()` function.",
            "starter_code": "print(\"(--Bun--)\")\nprint()\nprint(\"(--Bun--)\")",
            "tests": "from exercise.fixtures import captured_output\n\n\ndef test_hello(captured_output):\n    assert captured_output() == \"(--Bun--)\\nHamburger\\n(--Bun--)\""
        }
    ]
}